
MyAlarmClock.elf:     file format elf32-littlenios2
MyAlarmClock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000020cc memsz 0x000020cc flags r-x
    LOAD off    0x000030ec vaddr 0x000060ec paddr 0x00006278 align 2**12
         filesz 0x0000018c memsz 0x0000018c flags rw-
    LOAD off    0x00003404 vaddr 0x00006404 paddr 0x00006404 align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001ef4  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  00006074  00006074  00003074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000018c  000060ec  00006278  000030ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a0  00006404  00006404  00003404  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  000065a4  000065a4  00003278  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000570  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000075e4  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a5f  00000000  00000000  0000adf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002fd6  00000000  00000000  0000d853  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007bc  00000000  00000000  0001082c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e56  00000000  00000000  00010fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000247d  00000000  00000000  00012e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000152bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003e8  00000000  00000000  000152d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001714e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00017151  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017159  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001715a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001715b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00017166  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00017171  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0001717c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000f  00000000  00000000  00017188  2**0
                  CONTENTS, READONLY
 26 .jdi          00004d65  00000000  00000000  00017197  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00069a0c  00000000  00000000  0001befc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00006074 l    d  .rodata	00000000 .rodata
000060ec l    d  .rwdata	00000000 .rwdata
00006404 l    d  .bss	00000000 .bss
000065a4 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MyAlarmClock_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0000620c l     O .rwdata	00000008 CSWTCH.53
0000428c l     F .text	000001a8 buttons_manager
00004568 l     F .text	0000021c timer_manager
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lcltime.c
00000000 l    df *ABS*	00000000 lcltime_r.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 month_lengths.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 tzcalc_limits.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 vfprintf.c
00005360 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettzinfo.c
000060ec l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 gmtime_r.c
00000000 l    df *ABS*	00000000 impure.c
0000612c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00006268 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00006448 g     O .bss	00000004 alt_instruction_exception_handler
00005e88 g     F .text	0000002c alt_main
000064a4 g     O .bss	00000100 alt_irq
00006278 g       *ABS*	00000000 __flash_rwdata_start
0000644c g     O .bss	0000002c alarm_timestamp
0000626c g     O .rwdata	00000004 UART
000065a4 g       *ABS*	00000000 __alt_heap_start
00005014 g     F .text	0000004c printf
00006430 g     O .bss	00000004 _daylight
0000640c g     O .bss	00000004 actual_time
00005eb4 g     F .text	00000038 alt_putstr
0000606c g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
0000622c g     O .rwdata	00000004 hex0
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006434 g     O .bss	00000004 errno
00006478 g     O .bss	0000002c timestamp
00006440 g     O .bss	00000004 alt_argv
0000e20c g       *ABS*	00000000 _gp
00006240 g     O .rwdata	00000004 btn_direction_ptr
00006410 g     O .bss	00000004 edge_capture_time
00004d74 g     F .text	00000028 memcpy
00006244 g     O .rwdata	00000004 timer_edge_cap_ptr
00005ff8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00006214 g     O .rwdata	00000001 button_data
00006414 g     O .bss	00000004 decs
00004d4c g     F .text	00000014 malloc
00004fd8 g     F .text	0000003c _printf_r
00004908 g     F .text	00000064 .hidden __udivsi3
00006248 g     O .rwdata	00000004 timer_mask_ptr
00004000 g       *ABS*	00000000 __alt_mem_ram
00005060 g     F .text	00000050 _sbrk_r
0000623c g     O .rwdata	00000004 btn_mask_ptr
0000625c g     O .rwdata	00000004 _global_impure_ptr
000065a4 g       *ABS*	00000000 __bss_end
00005d40 g     F .text	00000068 alt_iic_isr_register
000059d8 g     F .text	00000240 gmtime_r
00005d28 g     F .text	00000018 alt_ic_irq_enabled
00006408 g     O .bss	00000004 alarm
00006438 g     O .bss	00000004 alt_irq_active
00006418 g     O .bss	00000004 new_time
000040fc g     F .exceptions	00000060 alt_irq_handler
00006224 g     O .rwdata	00000004 hex2
0000535c g     F .text	00000004 __tz_unlock
00005ff0 g     F .text	00000004 alt_dcache_flush_all
00006278 g       *ABS*	00000000 __ram_rwdata_end
00005f38 g     F .text	00000060 write
00006254 g     O .rwdata	00000008 _tzname
000060ec g       *ABS*	00000000 __ram_rodata_end
00006270 g     O .rwdata	00000004 jtag_uart_0
0000641c g     O .bss	00000004 edge_capture_button
0000496c g     F .text	00000058 .hidden __umodsi3
000065a4 g       *ABS*	00000000 end
00006230 g     O .rwdata	00000004 leds
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00006228 g     O .rwdata	00000004 hex1
00007000 g       *ABS*	00000000 __alt_stack_pointer
00005fbc g     F .text	00000034 altera_avalon_jtag_uart_write
000053cc g     F .text	0000052c ___vfprintf_internal_r
00004d9c g     F .text	000000e4 _free_r
00004180 g     F .text	0000003c _start
00005fb8 g     F .text	00000004 alt_sys_init
00006218 g     O .rwdata	00000004 hex5
00005c8c g     F .text	00000028 .hidden __mulsi3
000060ec g       *ABS*	00000000 __ram_rwdata_start
00006074 g       *ABS*	00000000 __ram_rodata_start
00006088 g     O .rodata	00000060 __month_lengths
000041bc g     F .text	000000a8 convert_to_7seg
0000624c g     O .rwdata	00000004 timer_control_ptr
00006250 g     O .rwdata	00000004 timer_status_ptr
000065a4 g       *ABS*	00000000 __alt_stack_base
00005eec g     F .text	0000004c sbrk
00004264 g     F .text	00000028 get_time_diff
00005358 g     F .text	00000004 __tz_lock
00005914 g     F .text	000000b8 __sfvwrite_small_dev
00006404 g       *ABS*	00000000 __bss_start
000049c4 g     F .text	00000050 localtime
00004784 g     F .text	0000008c main
0000643c g     O .bss	00000004 alt_envp
00006234 g     O .rwdata	00000004 buttons
00007000 g       *ABS*	00000000 __alt_heap_limit
00004e80 g     F .text	00000158 _malloc_r
00006274 g     O .rwdata	00000004 alt_errno
00004810 g     F .text	00000084 .hidden __divsi3
00006074 g       *ABS*	00000000 __flash_rodata_start
000044b0 g     F .text	000000b8 show_time
00006220 g     O .rwdata	00000004 hex3
00005f98 g     F .text	00000020 alt_irq_init
00005c34 g     F .text	00000058 _write_r
00006260 g     O .rwdata	00000004 _impure_ptr
00006444 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
0000642c g     O .bss	00000004 _timezone
00004a14 g     F .text	00000338 localtime_r
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005cb4 g     F .text	00000004 alt_ic_isr_register
00006404 g     O .bss	00000002 pos_ptr
00006278 g       *ABS*	00000000 _edata
000065a4 g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
00005cf0 g     F .text	00000038 alt_ic_irq_disable
00004894 g     F .text	00000074 .hidden __modsi3
00007000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
0000400c g       .entry	00000000 _exit
00006238 g     O .rwdata	00000004 btn_edge_ptr
00005c18 g     F .text	0000001c strlen
0000621c g     O .rwdata	00000004 hex4
00006424 g     O .bss	00000004 __malloc_sbrk_start
00006420 g     O .bss	00000004 units
00005ff4 g     F .text	00000004 alt_icache_flush_all
00006264 g     O .rwdata	00000004 alt_priority_mask
00006428 g     O .bss	00000004 __malloc_free_list
00005cb8 g     F .text	00000038 alt_ic_irq_enable
000058f8 g     F .text	0000001c __vfprintf_internal
000050b0 g     F .text	000002a8 __tzcalc_limits
00006406 g     O .bss	00000002 status
00004434 g     F .text	0000007c split_time
00005da8 g     F .text	000000e0 alt_load
000059cc g     F .text	0000000c __gettzinfo
00004d60 g     F .text	00000014 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	84192904 	addi	r16,r16,25764

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <_gp+0xffff5f08>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <_gp+0xffff5f10>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a08f17 	ldw	r2,-32196(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b88314 	ori	gp,gp,57868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	10990114 	ori	r2,r2,25604

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d96914 	ori	r3,r3,26020

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_gp+0xffff5f98>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	0005da80 	call	5da8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	0005e880 	call	5e88 <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <_gp+0xffff5fac>

000041bc <convert_to_7seg>:
short pos_ptr = 0;

char convert_to_7seg(int num)
{
	unsigned int result = 0;
	if (num == 0) { result = 0x7F - 0x40; }
    41bc:	20001426 	beq	r4,zero,4210 <convert_to_7seg+0x54>
	else if (num == 1) { result = 0x7F - 0x79; }
    41c0:	00800044 	movi	r2,1
    41c4:	20801426 	beq	r4,r2,4218 <convert_to_7seg+0x5c>
	else if (num == 2) { result = 0x7F - 0x24; }
    41c8:	00800084 	movi	r2,2
    41cc:	20801426 	beq	r4,r2,4220 <convert_to_7seg+0x64>
	else if (num == 3) { result = 0x7F - 0x30; }
    41d0:	008000c4 	movi	r2,3
    41d4:	20801426 	beq	r4,r2,4228 <convert_to_7seg+0x6c>
	else if (num == 4) { result = 0x7F - 0x19; }
    41d8:	00800104 	movi	r2,4
    41dc:	20801426 	beq	r4,r2,4230 <convert_to_7seg+0x74>
	else if (num == 5) { result = 0x7F - 0x12; }
    41e0:	00800144 	movi	r2,5
    41e4:	20801426 	beq	r4,r2,4238 <convert_to_7seg+0x7c>
	else if (num == 6) { result = 0x7F - 0x02; }
    41e8:	00800184 	movi	r2,6
    41ec:	20801426 	beq	r4,r2,4240 <convert_to_7seg+0x84>
	else if (num == 7) { result = 0x7F - 0x78; }
    41f0:	008001c4 	movi	r2,7
    41f4:	20801426 	beq	r4,r2,4248 <convert_to_7seg+0x8c>
	else if (num == 8) { result = 0x7F - 0x00; }
    41f8:	00800204 	movi	r2,8
    41fc:	20801426 	beq	r4,r2,4250 <convert_to_7seg+0x94>
	else if (num == 9) { result = 0x7F - 0x10; }
    4200:	00800244 	movi	r2,9
    4204:	2080141e 	bne	r4,r2,4258 <convert_to_7seg+0x9c>
    4208:	00801bc4 	movi	r2,111
    420c:	00001306 	br	425c <convert_to_7seg+0xa0>
short pos_ptr = 0;

char convert_to_7seg(int num)
{
	unsigned int result = 0;
	if (num == 0) { result = 0x7F - 0x40; }
    4210:	00800fc4 	movi	r2,63
    4214:	00001106 	br	425c <convert_to_7seg+0xa0>
	else if (num == 1) { result = 0x7F - 0x79; }
    4218:	00800184 	movi	r2,6
    421c:	00000f06 	br	425c <convert_to_7seg+0xa0>
	else if (num == 2) { result = 0x7F - 0x24; }
    4220:	008016c4 	movi	r2,91
    4224:	00000d06 	br	425c <convert_to_7seg+0xa0>
	else if (num == 3) { result = 0x7F - 0x30; }
    4228:	008013c4 	movi	r2,79
    422c:	00000b06 	br	425c <convert_to_7seg+0xa0>
	else if (num == 4) { result = 0x7F - 0x19; }
    4230:	00801984 	movi	r2,102
    4234:	00000906 	br	425c <convert_to_7seg+0xa0>
	else if (num == 5) { result = 0x7F - 0x12; }
    4238:	00801b44 	movi	r2,109
    423c:	00000706 	br	425c <convert_to_7seg+0xa0>
	else if (num == 6) { result = 0x7F - 0x02; }
    4240:	00801f44 	movi	r2,125
    4244:	00000506 	br	425c <convert_to_7seg+0xa0>
	else if (num == 7) { result = 0x7F - 0x78; }
    4248:	2005883a 	mov	r2,r4
    424c:	00000306 	br	425c <convert_to_7seg+0xa0>
	else if (num == 8) { result = 0x7F - 0x00; }
    4250:	00801fc4 	movi	r2,127
    4254:	00000106 	br	425c <convert_to_7seg+0xa0>
short status = 0;
short pos_ptr = 0;

char convert_to_7seg(int num)
{
	unsigned int result = 0;
    4258:	0005883a 	mov	r2,zero
	else if (num == 7) { result = 0x7F - 0x78; }
	else if (num == 8) { result = 0x7F - 0x00; }
	else if (num == 9) { result = 0x7F - 0x10; }

	return ~result;
}
    425c:	0084303a 	nor	r2,zero,r2
    4260:	f800283a 	ret

00004264 <get_time_diff>:

int get_time_diff()
{
    4264:	d0a07e0b 	ldhu	r2,-32264(gp)
    4268:	00c000c4 	movi	r3,3
    426c:	18800536 	bltu	r3,r2,4284 <get_time_diff+0x20>
    4270:	d0e00004 	addi	r3,gp,-32768
    4274:	1085883a 	add	r2,r2,r2
    4278:	1885883a 	add	r2,r3,r2
    427c:	1080000b 	ldhu	r2,0(r2)
    4280:	f800283a 	ret
	switch (pos_ptr){
    4284:	0005883a 	mov	r2,zero
			break;
		default:
			return 0;
			break;
		}
}
    4288:	f800283a 	ret

0000428c <buttons_manager>:
}

static void buttons_manager(void * context)
{
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 12);
    428c:	00a43314 	movui	r2,37068
    4290:	10800017 	ldw	r2,0(r2)
		}
	}
}

static void buttons_manager(void * context)
{
    4294:	defffc04 	addi	sp,sp,-16
    4298:	dc800215 	stw	r18,8(sp)
    429c:	dc400115 	stw	r17,4(sp)
    42a0:	dc000015 	stw	r16,0(sp)
    42a4:	dfc00315 	stw	ra,12(sp)
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 12);
    42a8:	20800015 	stw	r2,0(r4)
	*btn_mask_ptr = 0xF;
    42ac:	d0a00c17 	ldw	r2,-32720(gp)
    42b0:	00c003c4 	movi	r3,15
	*btn_edge_ptr = *edge_capture_ptr;

	switch (*edge_capture_ptr) {
    42b4:	04800084 	movi	r18,2

static void buttons_manager(void * context)
{
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 12);
	*btn_mask_ptr = 0xF;
    42b8:	10c00005 	stb	r3,0(r2)
	*btn_edge_ptr = *edge_capture_ptr;
    42bc:	20c00017 	ldw	r3,0(r4)
    42c0:	d0a00b17 	ldw	r2,-32724(gp)
		}
	}
}

static void buttons_manager(void * context)
{
    42c4:	2023883a 	mov	r17,r4
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 12);
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = *edge_capture_ptr;
    42c8:	10c00005 	stb	r3,0(r2)

	switch (*edge_capture_ptr) {
    42cc:	24000017 	ldw	r16,0(r4)
    42d0:	84802f26 	beq	r16,r18,4390 <buttons_manager+0x104>
    42d4:	94000316 	blt	r18,r16,42e4 <buttons_manager+0x58>
    42d8:	00800044 	movi	r2,1
    42dc:	80803b26 	beq	r16,r2,43cc <buttons_manager+0x140>
    42e0:	00004e06 	br	441c <buttons_manager+0x190>
    42e4:	01000104 	movi	r4,4
    42e8:	81001b26 	beq	r16,r4,4358 <buttons_manager+0xcc>
    42ec:	00800204 	movi	r2,8
    42f0:	80804a1e 	bne	r16,r2,441c <buttons_manager+0x190>

		/* Change mode */
		case 8:
			if(button_data != *edge_capture_ptr)
    42f4:	88800017 	ldw	r2,0(r17)
    42f8:	d0e00207 	ldb	r3,-32760(gp)
    42fc:	18804726 	beq	r3,r2,441c <buttons_manager+0x190>
			{
				if (status == 0)  				 	/* Show time */
    4300:	d0a07e8f 	ldh	r2,-32262(gp)
    4304:	00c00044 	movi	r3,1
    4308:	1000061e 	bne	r2,zero,4324 <buttons_manager+0x98>
				{
					status = 1;
					new_time = actual_time;
    430c:	d0a08017 	ldw	r2,-32256(gp)
		case 8:
			if(button_data != *edge_capture_ptr)
			{
				if (status == 0)  				 	/* Show time */
				{
					status = 1;
    4310:	d0e07e8d 	sth	r3,-32262(gp)
					new_time = actual_time;
    4314:	d0a08315 	stw	r2,-32244(gp)
					*leds = 2;
    4318:	d0a00917 	ldw	r2,-32732(gp)
    431c:	14800005 	stb	r18,0(r2)
    4320:	00003e06 	br	441c <buttons_manager+0x190>
				}
				else if (status == 1)  				/* Set time */
    4324:	01400044 	movi	r5,1
    4328:	1140061e 	bne	r2,r5,4344 <buttons_manager+0xb8>
				{
					status = 2;
					actual_time = new_time;
    432c:	d0a08317 	ldw	r2,-32244(gp)
					new_time = actual_time;
					*leds = 2;
				}
				else if (status == 1)  				/* Set time */
				{
					status = 2;
    4330:	d4a07e8d 	sth	r18,-32262(gp)
					actual_time = new_time;
    4334:	d0a08015 	stw	r2,-32256(gp)
					*leds = 4;
    4338:	d0a00917 	ldw	r2,-32732(gp)
    433c:	11000005 	stb	r4,0(r2)
    4340:	00003606 	br	441c <buttons_manager+0x190>
				}
				else if (status == 2)  				/* Set alarm */
    4344:	1480351e 	bne	r2,r18,441c <buttons_manager+0x190>
				{
					status = 0;
					*leds = 1;
    4348:	d0a00917 	ldw	r2,-32732(gp)
					actual_time = new_time;
					*leds = 4;
				}
				else if (status == 2)  				/* Set alarm */
				{
					status = 0;
    434c:	d0207e8d 	sth	zero,-32262(gp)
					*leds = 1;
    4350:	10c00005 	stb	r3,0(r2)
    4354:	00003106 	br	441c <buttons_manager+0x190>
			break;

		/* Change pointer position in 7segs */
		case 4:

			if(button_data != *edge_capture_ptr)
    4358:	88800017 	ldw	r2,0(r17)
    435c:	d0e00207 	ldb	r3,-32760(gp)
    4360:	18802e26 	beq	r3,r2,441c <buttons_manager+0x190>
			{
				pos_ptr++;
    4364:	d0a07e0b 	ldhu	r2,-32264(gp)
				if (pos_ptr > 3) { pos_ptr = 0; }
    4368:	010000c4 	movi	r4,3
		/* Change pointer position in 7segs */
		case 4:

			if(button_data != *edge_capture_ptr)
			{
				pos_ptr++;
    436c:	10800044 	addi	r2,r2,1
				if (pos_ptr > 3) { pos_ptr = 0; }
    4370:	10ffffcc 	andi	r3,r2,65535
    4374:	18e0001c 	xori	r3,r3,32768
    4378:	18e00004 	addi	r3,r3,-32768
    437c:	20c00216 	blt	r4,r3,4388 <buttons_manager+0xfc>
		/* Change pointer position in 7segs */
		case 4:

			if(button_data != *edge_capture_ptr)
			{
				pos_ptr++;
    4380:	d0a07e0d 	sth	r2,-32264(gp)
    4384:	00002506 	br	441c <buttons_manager+0x190>
				if (pos_ptr > 3) { pos_ptr = 0; }
    4388:	d0207e0d 	sth	zero,-32264(gp)
    438c:	00002306 	br	441c <buttons_manager+0x190>
			}
			break;

		/* Increase digit in 7seg  */
		case 2:
			if(button_data != *edge_capture_ptr){
    4390:	20800017 	ldw	r2,0(r4)
    4394:	d0e00207 	ldb	r3,-32760(gp)
    4398:	18802026 	beq	r3,r2,441c <buttons_manager+0x190>
				if (status == 1)
    439c:	d0a07e8f 	ldh	r2,-32262(gp)
    43a0:	00c00044 	movi	r3,1
    43a4:	10c0041e 	bne	r2,r3,43b8 <buttons_manager+0x12c>
				{
					new_time += get_time_diff();
    43a8:	00042640 	call	4264 <get_time_diff>
    43ac:	d0e08317 	ldw	r3,-32244(gp)
    43b0:	1885883a 	add	r2,r3,r2
    43b4:	00001106 	br	43fc <buttons_manager+0x170>
				}
				else if (status == 2)
    43b8:	1400181e 	bne	r2,r16,441c <buttons_manager+0x190>
				{
					alarm += get_time_diff();
    43bc:	00042640 	call	4264 <get_time_diff>
    43c0:	d0e07f17 	ldw	r3,-32260(gp)
    43c4:	1885883a 	add	r2,r3,r2
    43c8:	00001306 	br	4418 <buttons_manager+0x18c>
			}
			break;

		/* Decrease digit in 7seg  */
		case 1:
			alt_putstr("DOWN");
    43cc:	01000034 	movhi	r4,0
    43d0:	21181d04 	addi	r4,r4,24692
    43d4:	0005eb40 	call	5eb4 <alt_putstr>
			if(button_data != *edge_capture_ptr) {
    43d8:	88800017 	ldw	r2,0(r17)
    43dc:	d0e00207 	ldb	r3,-32760(gp)
    43e0:	18800e26 	beq	r3,r2,441c <buttons_manager+0x190>
				if (status == 1)
    43e4:	d0a07e8f 	ldh	r2,-32262(gp)
    43e8:	1400061e 	bne	r2,r16,4404 <buttons_manager+0x178>
				{
					if(new_time != 0) (new_time -= get_time_diff());
    43ec:	d4208317 	ldw	r16,-32244(gp)
    43f0:	80000a26 	beq	r16,zero,441c <buttons_manager+0x190>
    43f4:	00042640 	call	4264 <get_time_diff>
    43f8:	8085c83a 	sub	r2,r16,r2
    43fc:	d0a08315 	stw	r2,-32244(gp)
    4400:	00000606 	br	441c <buttons_manager+0x190>
				}
				else if (status == 2)
    4404:	1480051e 	bne	r2,r18,441c <buttons_manager+0x190>
				{
					if(alarm != 0) (alarm -= get_time_diff());
    4408:	d4207f17 	ldw	r16,-32260(gp)
    440c:	80000326 	beq	r16,zero,441c <buttons_manager+0x190>
    4410:	00042640 	call	4264 <get_time_diff>
    4414:	8085c83a 	sub	r2,r16,r2
    4418:	d0a07f15 	stw	r2,-32260(gp)
			break;

		default:
			break;
	}
}
    441c:	dfc00317 	ldw	ra,12(sp)
    4420:	dc800217 	ldw	r18,8(sp)
    4424:	dc400117 	ldw	r17,4(sp)
    4428:	dc000017 	ldw	r16,0(sp)
    442c:	dec00404 	addi	sp,sp,16
    4430:	f800283a 	ret

00004434 <split_time>:
			break;
		}
}

void split_time(const int digit, int* dec, int* unit)
{
    4434:	defffc04 	addi	sp,sp,-16
    4438:	dc800215 	stw	r18,8(sp)
    443c:	2825883a 	mov	r18,r5
	*dec = convert_to_7seg(digit / 10);
    4440:	01400284 	movi	r5,10
			break;
		}
}

void split_time(const int digit, int* dec, int* unit)
{
    4444:	dfc00315 	stw	ra,12(sp)
    4448:	dc400115 	stw	r17,4(sp)
    444c:	dc000015 	stw	r16,0(sp)
    4450:	2023883a 	mov	r17,r4
    4454:	3021883a 	mov	r16,r6
	*dec = convert_to_7seg(digit / 10);
    4458:	00048100 	call	4810 <__divsi3>
    445c:	1009883a 	mov	r4,r2
    4460:	00041bc0 	call	41bc <convert_to_7seg>
    4464:	10803fcc 	andi	r2,r2,255
    4468:	1080201c 	xori	r2,r2,128
    446c:	10bfe004 	addi	r2,r2,-128
	*unit = convert_to_7seg(digit % 10);
    4470:	01400284 	movi	r5,10
    4474:	8809883a 	mov	r4,r17
		}
}

void split_time(const int digit, int* dec, int* unit)
{
	*dec = convert_to_7seg(digit / 10);
    4478:	90800015 	stw	r2,0(r18)
	*unit = convert_to_7seg(digit % 10);
    447c:	00048940 	call	4894 <__modsi3>
    4480:	1009883a 	mov	r4,r2
    4484:	00041bc0 	call	41bc <convert_to_7seg>
    4488:	10803fcc 	andi	r2,r2,255
    448c:	1080201c 	xori	r2,r2,128
    4490:	10bfe004 	addi	r2,r2,-128
    4494:	80800015 	stw	r2,0(r16)
}
    4498:	dfc00317 	ldw	ra,12(sp)
    449c:	dc800217 	ldw	r18,8(sp)
    44a0:	dc400117 	ldw	r17,4(sp)
    44a4:	dc000017 	ldw	r16,0(sp)
    44a8:	dec00404 	addi	sp,sp,16
    44ac:	f800283a 	ret

000044b0 <show_time>:

void show_time(int hours, int minutes, int seconds)
{
    44b0:	defffb04 	addi	sp,sp,-20
    44b4:	dc400115 	stw	r17,4(sp)
    44b8:	dc000015 	stw	r16,0(sp)
	split_time(hours, &decs, &units);
    44bc:	d4608504 	addi	r17,gp,-32236
    44c0:	d4208204 	addi	r16,gp,-32248
	*dec = convert_to_7seg(digit / 10);
	*unit = convert_to_7seg(digit % 10);
}

void show_time(int hours, int minutes, int seconds)
{
    44c4:	dcc00315 	stw	r19,12(sp)
    44c8:	dc800215 	stw	r18,8(sp)
    44cc:	2827883a 	mov	r19,r5
    44d0:	3025883a 	mov	r18,r6
	split_time(hours, &decs, &units);
    44d4:	800b883a 	mov	r5,r16
    44d8:	880d883a 	mov	r6,r17
	*dec = convert_to_7seg(digit / 10);
	*unit = convert_to_7seg(digit % 10);
}

void show_time(int hours, int minutes, int seconds)
{
    44dc:	dfc00415 	stw	ra,16(sp)
	split_time(hours, &decs, &units);
    44e0:	00044340 	call	4434 <split_time>
	*hex5 = decs;
    44e4:	d0e08217 	ldw	r3,-32248(gp)
    44e8:	d0a00317 	ldw	r2,-32756(gp)
	*hex4 = units;
	split_time(minutes, &decs, &units);
    44ec:	880d883a 	mov	r6,r17
    44f0:	800b883a 	mov	r5,r16
}

void show_time(int hours, int minutes, int seconds)
{
	split_time(hours, &decs, &units);
	*hex5 = decs;
    44f4:	10c00005 	stb	r3,0(r2)
	*hex4 = units;
    44f8:	d0e08517 	ldw	r3,-32236(gp)
    44fc:	d0a00417 	ldw	r2,-32752(gp)
	split_time(minutes, &decs, &units);
    4500:	9809883a 	mov	r4,r19

void show_time(int hours, int minutes, int seconds)
{
	split_time(hours, &decs, &units);
	*hex5 = decs;
	*hex4 = units;
    4504:	10c00005 	stb	r3,0(r2)
	split_time(minutes, &decs, &units);
    4508:	00044340 	call	4434 <split_time>
	*hex3 = decs;
    450c:	d0e08217 	ldw	r3,-32248(gp)
    4510:	d0a00517 	ldw	r2,-32748(gp)
	*hex2 = units;
	split_time(seconds, &decs, &units);
    4514:	880d883a 	mov	r6,r17
    4518:	800b883a 	mov	r5,r16
{
	split_time(hours, &decs, &units);
	*hex5 = decs;
	*hex4 = units;
	split_time(minutes, &decs, &units);
	*hex3 = decs;
    451c:	10c00005 	stb	r3,0(r2)
	*hex2 = units;
    4520:	d0e08517 	ldw	r3,-32236(gp)
    4524:	d0a00617 	ldw	r2,-32744(gp)
	split_time(seconds, &decs, &units);
    4528:	9009883a 	mov	r4,r18
	split_time(hours, &decs, &units);
	*hex5 = decs;
	*hex4 = units;
	split_time(minutes, &decs, &units);
	*hex3 = decs;
	*hex2 = units;
    452c:	10c00005 	stb	r3,0(r2)
	split_time(seconds, &decs, &units);
    4530:	00044340 	call	4434 <split_time>
	*hex1 = decs;
    4534:	d0e08217 	ldw	r3,-32248(gp)
    4538:	d0a00717 	ldw	r2,-32740(gp)
    453c:	10c00005 	stb	r3,0(r2)
	*hex0 = units;
    4540:	d0e08517 	ldw	r3,-32236(gp)
    4544:	d0a00817 	ldw	r2,-32736(gp)
    4548:	10c00005 	stb	r3,0(r2)
}
    454c:	dfc00417 	ldw	ra,16(sp)
    4550:	dcc00317 	ldw	r19,12(sp)
    4554:	dc800217 	ldw	r18,8(sp)
    4558:	dc400117 	ldw	r17,4(sp)
    455c:	dc000017 	ldw	r16,0(sp)
    4560:	dec00504 	addi	sp,sp,20
    4564:	f800283a 	ret

00004568 <timer_manager>:

/********************************************************************/
static void timer_manager(void * context)
{
	*timer_status_ptr = 0;
    4568:	d0a01117 	ldw	r2,-32700(gp)
	*hex0 = units;
}

/********************************************************************/
static void timer_manager(void * context)
{
    456c:	defffd04 	addi	sp,sp,-12
    4570:	dc000015 	stw	r16,0(sp)
    4574:	dfc00215 	stw	ra,8(sp)
    4578:	dc400115 	stw	r17,4(sp)
	*timer_status_ptr = 0;
    457c:	10000005 	stb	zero,0(r2)
	printf("actual: %d\n", actual_time);
    4580:	d1608017 	ldw	r5,-32256(gp)
    4584:	01000034 	movhi	r4,0
    4588:	21181f04 	addi	r4,r4,24700
    458c:	00050140 	call	5014 <printf>
	actual_time++;
    4590:	d0a08017 	ldw	r2,-32256(gp)
    4594:	04000034 	movhi	r16,0
    4598:	84191e04 	addi	r16,r16,25720
    459c:	10800044 	addi	r2,r2,1
    45a0:	d0a08015 	stw	r2,-32256(gp)

	/* Check actual time and check alarm */
	if (status == 0){
    45a4:	d0a07e8f 	ldh	r2,-32262(gp)
    45a8:	1000211e 	bne	r2,zero,4630 <timer_manager+0xc8>
		timestamp = *localtime(&actual_time);
    45ac:	d1208004 	addi	r4,gp,-32256
    45b0:	00049c40 	call	49c4 <localtime>
    45b4:	01800b04 	movi	r6,44
    45b8:	100b883a 	mov	r5,r2
    45bc:	8009883a 	mov	r4,r16
    45c0:	0004d740 	call	4d74 <memcpy>
		alarm_timestamp = *localtime(&alarm);
    45c4:	d1207f04 	addi	r4,gp,-32260
    45c8:	04400034 	movhi	r17,0
    45cc:	00049c40 	call	49c4 <localtime>
    45d0:	8c591304 	addi	r17,r17,25676
    45d4:	01800b04 	movi	r6,44
    45d8:	100b883a 	mov	r5,r2
    45dc:	8809883a 	mov	r4,r17
    45e0:	0004d740 	call	4d74 <memcpy>
		show_time(timestamp.tm_hour, timestamp.tm_min, timestamp.tm_sec);
    45e4:	81800017 	ldw	r6,0(r16)
    45e8:	81400117 	ldw	r5,4(r16)
    45ec:	81000217 	ldw	r4,8(r16)
    45f0:	00044b00 	call	44b0 <show_time>
		if (timestamp.tm_sec % 2 == 0)
    45f4:	80c00017 	ldw	r3,0(r16)
    45f8:	d0a00917 	ldw	r2,-32732(gp)
    45fc:	18c0004c 	andi	r3,r3,1
    4600:	1800091e 	bne	r3,zero,4628 <timer_manager+0xc0>
		{
			if (timestamp.tm_hour == alarm_timestamp.tm_hour && timestamp.tm_min == alarm_timestamp.tm_min){
    4604:	81000217 	ldw	r4,8(r16)
    4608:	88c00217 	ldw	r3,8(r17)
    460c:	20c0061e 	bne	r4,r3,4628 <timer_manager+0xc0>
    4610:	81000117 	ldw	r4,4(r16)
    4614:	88c00117 	ldw	r3,4(r17)
    4618:	20c0031e 	bne	r4,r3,4628 <timer_manager+0xc0>
				*leds = 0xAA;
    461c:	00ffea84 	movi	r3,-86
    4620:	10c00005 	stb	r3,0(r2)
    4624:	00001606 	br	4680 <timer_manager+0x118>
			}
			else{
				*leds = 0;
			}
		}
		else { *leds = 0; }
    4628:	10000005 	stb	zero,0(r2)
    462c:	00001406 	br	4680 <timer_manager+0x118>
	}

	/* New time */
	else if (status == 1)
    4630:	00c00044 	movi	r3,1
    4634:	10c00a1e 	bne	r2,r3,4660 <timer_manager+0xf8>
	{
		timestamp = *localtime(&new_time);
    4638:	d1208304 	addi	r4,gp,-32244
    463c:	00049c40 	call	49c4 <localtime>
    4640:	01800b04 	movi	r6,44
    4644:	100b883a 	mov	r5,r2
    4648:	8009883a 	mov	r4,r16
    464c:	0004d740 	call	4d74 <memcpy>
		new_time++;
    4650:	d0a08317 	ldw	r2,-32244(gp)
    4654:	10800044 	addi	r2,r2,1
    4658:	d0a08315 	stw	r2,-32244(gp)
    465c:	00000806 	br	4680 <timer_manager+0x118>
	}

	/* Set alarm in 7seg */
	else if (status == 2)
    4660:	00c00084 	movi	r3,2
    4664:	10c0061e 	bne	r2,r3,4680 <timer_manager+0x118>
	{
		timestamp = *localtime(&alarm);
    4668:	d1207f04 	addi	r4,gp,-32260
    466c:	00049c40 	call	49c4 <localtime>
    4670:	01800b04 	movi	r6,44
    4674:	100b883a 	mov	r5,r2
    4678:	8009883a 	mov	r4,r16
    467c:	0004d740 	call	4d74 <memcpy>
	}

	alarm_timestamp = *localtime(&actual_time);
    4680:	d1208004 	addi	r4,gp,-32256
    4684:	00049c40 	call	49c4 <localtime>
    4688:	00c00034 	movhi	r3,0
    468c:	18d91304 	addi	r3,r3,25676
    4690:	1809883a 	mov	r4,r3
    4694:	01800b04 	movi	r6,44
    4698:	100b883a 	mov	r5,r2
    469c:	0004d740 	call	4d74 <memcpy>
    46a0:	1007883a 	mov	r3,r2
	if(status == 0 || (status ==1  && timestamp.tm_sec % 2 == 0) ||
    46a4:	d0a07e8f 	ldh	r2,-32262(gp)
    46a8:	10000a26 	beq	r2,zero,46d4 <timer_manager+0x16c>
    46ac:	01000044 	movi	r4,1
    46b0:	1100031e 	bne	r2,r4,46c0 <timer_manager+0x158>
    46b4:	80800017 	ldw	r2,0(r16)
    46b8:	1104703a 	and	r2,r2,r4
    46bc:	00000406 	br	46d0 <timer_manager+0x168>
    46c0:	01000084 	movi	r4,2
    46c4:	11000b1e 	bne	r2,r4,46f4 <timer_manager+0x18c>
		(status == 2 && alarm_timestamp.tm_sec % 2 == 0))
    46c8:	18800017 	ldw	r2,0(r3)
    46cc:	1080004c 	andi	r2,r2,1
    46d0:	1000081e 	bne	r2,zero,46f4 <timer_manager+0x18c>
	{
		show_time(timestamp.tm_hour, timestamp.tm_min, timestamp.tm_sec);
    46d4:	81800017 	ldw	r6,0(r16)
    46d8:	81400117 	ldw	r5,4(r16)
    46dc:	81000217 	ldw	r4,8(r16)
			break;
		default:
			break;
		}
	}
}
    46e0:	dfc00217 	ldw	ra,8(sp)
    46e4:	dc400117 	ldw	r17,4(sp)
    46e8:	dc000017 	ldw	r16,0(sp)
    46ec:	dec00304 	addi	sp,sp,12

	alarm_timestamp = *localtime(&actual_time);
	if(status == 0 || (status ==1  && timestamp.tm_sec % 2 == 0) ||
		(status == 2 && alarm_timestamp.tm_sec % 2 == 0))
	{
		show_time(timestamp.tm_hour, timestamp.tm_min, timestamp.tm_sec);
    46f0:	00044b01 	jmpi	44b0 <show_time>
	}

	else {
		split_time(timestamp.tm_sec, &decs, &units);
    46f4:	81000017 	ldw	r4,0(r16)
    46f8:	d1a08504 	addi	r6,gp,-32236
    46fc:	d1608204 	addi	r5,gp,-32248
    4700:	00044340 	call	4434 <split_time>
		*hex1 = decs;
    4704:	d0e08217 	ldw	r3,-32248(gp)
    4708:	d0a00717 	ldw	r2,-32740(gp)
    470c:	10c00005 	stb	r3,0(r2)
		*hex0 = units;
    4710:	d0e08517 	ldw	r3,-32236(gp)
    4714:	d0a00817 	ldw	r2,-32736(gp)
    4718:	10c00005 	stb	r3,0(r2)

		switch (pos_ptr){
    471c:	d0a07e0f 	ldh	r2,-32264(gp)
    4720:	00c00044 	movi	r3,1
    4724:	10c00c26 	beq	r2,r3,4758 <timer_manager+0x1f0>
    4728:	18800416 	blt	r3,r2,473c <timer_manager+0x1d4>
    472c:	1000101e 	bne	r2,zero,4770 <timer_manager+0x208>
		case 0:
			*hex2 = BLINK_7SEG;
    4730:	00ffffc4 	movi	r3,-1
    4734:	d0a00617 	ldw	r2,-32744(gp)
    4738:	00000c06 	br	476c <timer_manager+0x204>
	else {
		split_time(timestamp.tm_sec, &decs, &units);
		*hex1 = decs;
		*hex0 = units;

		switch (pos_ptr){
    473c:	00c00084 	movi	r3,2
    4740:	10c00826 	beq	r2,r3,4764 <timer_manager+0x1fc>
    4744:	00c000c4 	movi	r3,3
    4748:	10c0091e 	bne	r2,r3,4770 <timer_manager+0x208>
			break;
		case 2:
			*hex4 = BLINK_7SEG;
			break;
		case 3:
			*hex5 = BLINK_7SEG;
    474c:	00ffffc4 	movi	r3,-1
    4750:	d0a00317 	ldw	r2,-32756(gp)
    4754:	00000506 	br	476c <timer_manager+0x204>
		switch (pos_ptr){
		case 0:
			*hex2 = BLINK_7SEG;
			break;
		case 1:
			*hex3 = BLINK_7SEG;
    4758:	00ffffc4 	movi	r3,-1
    475c:	d0a00517 	ldw	r2,-32748(gp)
    4760:	00000206 	br	476c <timer_manager+0x204>
			break;
		case 2:
			*hex4 = BLINK_7SEG;
    4764:	d0a00417 	ldw	r2,-32752(gp)
    4768:	00ffffc4 	movi	r3,-1
			break;
		case 3:
			*hex5 = BLINK_7SEG;
    476c:	10c00005 	stb	r3,0(r2)
			break;
		default:
			break;
		}
	}
}
    4770:	dfc00217 	ldw	ra,8(sp)
    4774:	dc400117 	ldw	r17,4(sp)
    4778:	dc000017 	ldw	r16,0(sp)
    477c:	dec00304 	addi	sp,sp,12
    4780:	f800283a 	ret

00004784 <main>:
}

static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
    4784:	d0a00f17 	ldw	r2,-32708(gp)
}

/********************************************************************/

int main()
{
    4788:	defffd04 	addi	sp,sp,-12
    478c:	dc000115 	stw	r16,4(sp)
    4790:	dfc00215 	stw	ra,8(sp)
}

static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
    4794:	00c00044 	movi	r3,1
    4798:	10c00005 	stb	r3,0(r2)
	*timer_edge_cap_ptr = 0xF;
    479c:	d0a00e17 	ldw	r2,-32712(gp)
    47a0:	040003c4 	movi	r16,15
	*timer_control_ptr = 7;
    47a4:	00c001c4 	movi	r3,7

static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
	*timer_edge_cap_ptr = 0xF;
    47a8:	14000005 	stb	r16,0(r2)
	*timer_control_ptr = 7;
    47ac:	d0a01017 	ldw	r2,-32704(gp)
	*timer_status_ptr = 0;

	alt_ic_isr_register (TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
    47b0:	01800034 	movhi	r6,0
    47b4:	d1e08104 	addi	r7,gp,-32252
static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
	*timer_edge_cap_ptr = 0xF;
	*timer_control_ptr = 7;
    47b8:	10c00005 	stb	r3,0(r2)
	*timer_status_ptr = 0;
    47bc:	d0a01117 	ldw	r2,-32700(gp)

	alt_ic_isr_register (TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
    47c0:	31915a04 	addi	r6,r6,17768
    47c4:	01400044 	movi	r5,1
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
	*timer_edge_cap_ptr = 0xF;
	*timer_control_ptr = 7;
	*timer_status_ptr = 0;
    47c8:	10000005 	stb	zero,0(r2)

	alt_ic_isr_register (TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
    47cc:	0009883a 	mov	r4,zero
    47d0:	d8000015 	stw	zero,0(sp)
    47d4:	0005cb40 	call	5cb4 <alt_ic_isr_register>
/********************************************************************/

static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
    47d8:	d0a00c17 	ldw	r2,-32720(gp)
	*btn_edge_ptr = 0xF;
	*btn_direction_ptr = 0;

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    47dc:	01800034 	movhi	r6,0
    47e0:	d1e08404 	addi	r7,gp,-32240
/********************************************************************/

static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
    47e4:	14000005 	stb	r16,0(r2)
	*btn_edge_ptr = 0xF;
    47e8:	d0a00b17 	ldw	r2,-32724(gp)
	*btn_direction_ptr = 0;

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    47ec:	3190a304 	addi	r6,r6,17036
    47f0:	01400084 	movi	r5,2

static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = 0xF;
    47f4:	14000005 	stb	r16,0(r2)
	*btn_direction_ptr = 0;
    47f8:	d0a00d17 	ldw	r2,-32716(gp)

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    47fc:	0009883a 	mov	r4,zero
static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = 0xF;
	*btn_direction_ptr = 0;
    4800:	10000005 	stb	zero,0(r2)

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    4804:	d8000015 	stw	zero,0(sp)
    4808:	0005cb40 	call	5cb4 <alt_ic_isr_register>
    480c:	003fff06 	br	480c <_gp+0xffff6600>

00004810 <__divsi3>:
    4810:	20001b16 	blt	r4,zero,4880 <__divsi3+0x70>
    4814:	000f883a 	mov	r7,zero
    4818:	28001616 	blt	r5,zero,4874 <__divsi3+0x64>
    481c:	200d883a 	mov	r6,r4
    4820:	29001a2e 	bgeu	r5,r4,488c <__divsi3+0x7c>
    4824:	00800804 	movi	r2,32
    4828:	00c00044 	movi	r3,1
    482c:	00000106 	br	4834 <__divsi3+0x24>
    4830:	10000d26 	beq	r2,zero,4868 <__divsi3+0x58>
    4834:	294b883a 	add	r5,r5,r5
    4838:	10bfffc4 	addi	r2,r2,-1
    483c:	18c7883a 	add	r3,r3,r3
    4840:	293ffb36 	bltu	r5,r4,4830 <_gp+0xffff6624>
    4844:	0005883a 	mov	r2,zero
    4848:	18000726 	beq	r3,zero,4868 <__divsi3+0x58>
    484c:	0005883a 	mov	r2,zero
    4850:	31400236 	bltu	r6,r5,485c <__divsi3+0x4c>
    4854:	314dc83a 	sub	r6,r6,r5
    4858:	10c4b03a 	or	r2,r2,r3
    485c:	1806d07a 	srli	r3,r3,1
    4860:	280ad07a 	srli	r5,r5,1
    4864:	183ffa1e 	bne	r3,zero,4850 <_gp+0xffff6644>
    4868:	38000126 	beq	r7,zero,4870 <__divsi3+0x60>
    486c:	0085c83a 	sub	r2,zero,r2
    4870:	f800283a 	ret
    4874:	014bc83a 	sub	r5,zero,r5
    4878:	39c0005c 	xori	r7,r7,1
    487c:	003fe706 	br	481c <_gp+0xffff6610>
    4880:	0109c83a 	sub	r4,zero,r4
    4884:	01c00044 	movi	r7,1
    4888:	003fe306 	br	4818 <_gp+0xffff660c>
    488c:	00c00044 	movi	r3,1
    4890:	003fee06 	br	484c <_gp+0xffff6640>

00004894 <__modsi3>:
    4894:	20001716 	blt	r4,zero,48f4 <__modsi3+0x60>
    4898:	000f883a 	mov	r7,zero
    489c:	2005883a 	mov	r2,r4
    48a0:	28001216 	blt	r5,zero,48ec <__modsi3+0x58>
    48a4:	2900162e 	bgeu	r5,r4,4900 <__modsi3+0x6c>
    48a8:	01800804 	movi	r6,32
    48ac:	00c00044 	movi	r3,1
    48b0:	00000106 	br	48b8 <__modsi3+0x24>
    48b4:	30000a26 	beq	r6,zero,48e0 <__modsi3+0x4c>
    48b8:	294b883a 	add	r5,r5,r5
    48bc:	31bfffc4 	addi	r6,r6,-1
    48c0:	18c7883a 	add	r3,r3,r3
    48c4:	293ffb36 	bltu	r5,r4,48b4 <_gp+0xffff66a8>
    48c8:	18000526 	beq	r3,zero,48e0 <__modsi3+0x4c>
    48cc:	1806d07a 	srli	r3,r3,1
    48d0:	11400136 	bltu	r2,r5,48d8 <__modsi3+0x44>
    48d4:	1145c83a 	sub	r2,r2,r5
    48d8:	280ad07a 	srli	r5,r5,1
    48dc:	183ffb1e 	bne	r3,zero,48cc <_gp+0xffff66c0>
    48e0:	38000126 	beq	r7,zero,48e8 <__modsi3+0x54>
    48e4:	0085c83a 	sub	r2,zero,r2
    48e8:	f800283a 	ret
    48ec:	014bc83a 	sub	r5,zero,r5
    48f0:	003fec06 	br	48a4 <_gp+0xffff6698>
    48f4:	0109c83a 	sub	r4,zero,r4
    48f8:	01c00044 	movi	r7,1
    48fc:	003fe706 	br	489c <_gp+0xffff6690>
    4900:	00c00044 	movi	r3,1
    4904:	003ff106 	br	48cc <_gp+0xffff66c0>

00004908 <__udivsi3>:
    4908:	200d883a 	mov	r6,r4
    490c:	2900152e 	bgeu	r5,r4,4964 <__udivsi3+0x5c>
    4910:	28001416 	blt	r5,zero,4964 <__udivsi3+0x5c>
    4914:	00800804 	movi	r2,32
    4918:	00c00044 	movi	r3,1
    491c:	00000206 	br	4928 <__udivsi3+0x20>
    4920:	10000e26 	beq	r2,zero,495c <__udivsi3+0x54>
    4924:	28000516 	blt	r5,zero,493c <__udivsi3+0x34>
    4928:	294b883a 	add	r5,r5,r5
    492c:	10bfffc4 	addi	r2,r2,-1
    4930:	18c7883a 	add	r3,r3,r3
    4934:	293ffa36 	bltu	r5,r4,4920 <_gp+0xffff6714>
    4938:	18000826 	beq	r3,zero,495c <__udivsi3+0x54>
    493c:	0005883a 	mov	r2,zero
    4940:	31400236 	bltu	r6,r5,494c <__udivsi3+0x44>
    4944:	314dc83a 	sub	r6,r6,r5
    4948:	10c4b03a 	or	r2,r2,r3
    494c:	1806d07a 	srli	r3,r3,1
    4950:	280ad07a 	srli	r5,r5,1
    4954:	183ffa1e 	bne	r3,zero,4940 <_gp+0xffff6734>
    4958:	f800283a 	ret
    495c:	0005883a 	mov	r2,zero
    4960:	f800283a 	ret
    4964:	00c00044 	movi	r3,1
    4968:	003ff406 	br	493c <_gp+0xffff6730>

0000496c <__umodsi3>:
    496c:	2005883a 	mov	r2,r4
    4970:	2900122e 	bgeu	r5,r4,49bc <__umodsi3+0x50>
    4974:	28001116 	blt	r5,zero,49bc <__umodsi3+0x50>
    4978:	01800804 	movi	r6,32
    497c:	00c00044 	movi	r3,1
    4980:	00000206 	br	498c <__umodsi3+0x20>
    4984:	30000c26 	beq	r6,zero,49b8 <__umodsi3+0x4c>
    4988:	28000516 	blt	r5,zero,49a0 <__umodsi3+0x34>
    498c:	294b883a 	add	r5,r5,r5
    4990:	31bfffc4 	addi	r6,r6,-1
    4994:	18c7883a 	add	r3,r3,r3
    4998:	293ffa36 	bltu	r5,r4,4984 <_gp+0xffff6778>
    499c:	18000626 	beq	r3,zero,49b8 <__umodsi3+0x4c>
    49a0:	1806d07a 	srli	r3,r3,1
    49a4:	11400136 	bltu	r2,r5,49ac <__umodsi3+0x40>
    49a8:	1145c83a 	sub	r2,r2,r5
    49ac:	280ad07a 	srli	r5,r5,1
    49b0:	183ffb1e 	bne	r3,zero,49a0 <_gp+0xffff6794>
    49b4:	f800283a 	ret
    49b8:	f800283a 	ret
    49bc:	00c00044 	movi	r3,1
    49c0:	003ff706 	br	49a0 <_gp+0xffff6794>

000049c4 <localtime>:
    49c4:	00800034 	movhi	r2,0
    49c8:	defffd04 	addi	sp,sp,-12
    49cc:	10989804 	addi	r2,r2,25184
    49d0:	dc000015 	stw	r16,0(sp)
    49d4:	14000017 	ldw	r16,0(r2)
    49d8:	dc400115 	stw	r17,4(sp)
    49dc:	dfc00215 	stw	ra,8(sp)
    49e0:	80800917 	ldw	r2,36(r16)
    49e4:	2023883a 	mov	r17,r4
    49e8:	1000031e 	bne	r2,zero,49f8 <localtime+0x34>
    49ec:	01000904 	movi	r4,36
    49f0:	0004d4c0 	call	4d4c <malloc>
    49f4:	80800915 	stw	r2,36(r16)
    49f8:	81400917 	ldw	r5,36(r16)
    49fc:	8809883a 	mov	r4,r17
    4a00:	dfc00217 	ldw	ra,8(sp)
    4a04:	dc400117 	ldw	r17,4(sp)
    4a08:	dc000017 	ldw	r16,0(sp)
    4a0c:	dec00304 	addi	sp,sp,12
    4a10:	0004a141 	jmpi	4a14 <localtime_r>

00004a14 <localtime_r>:
    4a14:	defff904 	addi	sp,sp,-28
    4a18:	dfc00615 	stw	ra,24(sp)
    4a1c:	dd000515 	stw	r20,20(sp)
    4a20:	dcc00415 	stw	r19,16(sp)
    4a24:	dc400215 	stw	r17,8(sp)
    4a28:	dc000115 	stw	r16,4(sp)
    4a2c:	2029883a 	mov	r20,r4
    4a30:	d9400015 	stw	r5,0(sp)
    4a34:	dc800315 	stw	r18,12(sp)
    4a38:	00059cc0 	call	59cc <__gettzinfo>
    4a3c:	d9400017 	ldw	r5,0(sp)
    4a40:	a009883a 	mov	r4,r20
    4a44:	1023883a 	mov	r17,r2
    4a48:	00059d80 	call	59d8 <gmtime_r>
    4a4c:	14c00517 	ldw	r19,20(r2)
    4a50:	1021883a 	mov	r16,r2
    4a54:	9cc1db04 	addi	r19,r19,1900
    4a58:	988000cc 	andi	r2,r19,3
    4a5c:	1000041e 	bne	r2,zero,4a70 <localtime_r+0x5c>
    4a60:	01401904 	movi	r5,100
    4a64:	9809883a 	mov	r4,r19
    4a68:	00048940 	call	4894 <__modsi3>
    4a6c:	1000051e 	bne	r2,zero,4a84 <localtime_r+0x70>
    4a70:	9809883a 	mov	r4,r19
    4a74:	01406404 	movi	r5,400
    4a78:	00048940 	call	4894 <__modsi3>
    4a7c:	1009003a 	cmpeq	r4,r2,zero
    4a80:	00000106 	br	4a88 <localtime_r+0x74>
    4a84:	01000044 	movi	r4,1
    4a88:	01400c04 	movi	r5,48
    4a8c:	04800034 	movhi	r18,0
    4a90:	0005c8c0 	call	5c8c <__mulsi3>
    4a94:	94982204 	addi	r18,r18,24712
    4a98:	90a5883a 	add	r18,r18,r2
    4a9c:	00053580 	call	5358 <__tz_lock>
    4aa0:	00800034 	movhi	r2,0
    4aa4:	10990c04 	addi	r2,r2,25648
    4aa8:	10800017 	ldw	r2,0(r2)
    4aac:	10001726 	beq	r2,zero,4b0c <localtime_r+0xf8>
    4ab0:	88800117 	ldw	r2,4(r17)
    4ab4:	9880051e 	bne	r19,r2,4acc <localtime_r+0xb8>
    4ab8:	89000017 	ldw	r4,0(r17)
    4abc:	a0800017 	ldw	r2,0(r20)
    4ac0:	88c00717 	ldw	r3,28(r17)
    4ac4:	2000061e 	bne	r4,zero,4ae0 <localtime_r+0xcc>
    4ac8:	00000706 	br	4ae8 <localtime_r+0xd4>
    4acc:	9809883a 	mov	r4,r19
    4ad0:	00050b00 	call	50b0 <__tzcalc_limits>
    4ad4:	103ff81e 	bne	r2,zero,4ab8 <_gp+0xffff68ac>
    4ad8:	00bfffc4 	movi	r2,-1
    4adc:	00000906 	br	4b04 <localtime_r+0xf0>
    4ae0:	10c00516 	blt	r2,r3,4af8 <localtime_r+0xe4>
    4ae4:	00000106 	br	4aec <localtime_r+0xd8>
    4ae8:	10c0050e 	bge	r2,r3,4b00 <localtime_r+0xec>
    4aec:	88c00e17 	ldw	r3,56(r17)
    4af0:	10c4803a 	cmplt	r2,r2,r3
    4af4:	00000306 	br	4b04 <localtime_r+0xf0>
    4af8:	0005883a 	mov	r2,zero
    4afc:	00000106 	br	4b04 <localtime_r+0xf0>
    4b00:	00800044 	movi	r2,1
    4b04:	80800815 	stw	r2,32(r16)
    4b08:	00000106 	br	4b10 <localtime_r+0xfc>
    4b0c:	80000815 	stw	zero,32(r16)
    4b10:	80c00817 	ldw	r3,32(r16)
    4b14:	00800044 	movi	r2,1
    4b18:	1880021e 	bne	r3,r2,4b24 <localtime_r+0x110>
    4b1c:	8d000f17 	ldw	r20,60(r17)
    4b20:	00000106 	br	4b28 <localtime_r+0x114>
    4b24:	8d000817 	ldw	r20,32(r17)
    4b28:	01438404 	movi	r5,3600
    4b2c:	a009883a 	mov	r4,r20
    4b30:	00048940 	call	4894 <__modsi3>
    4b34:	01400f04 	movi	r5,60
    4b38:	1009883a 	mov	r4,r2
    4b3c:	1027883a 	mov	r19,r2
    4b40:	00048940 	call	4894 <__modsi3>
    4b44:	84400017 	ldw	r17,0(r16)
    4b48:	9809883a 	mov	r4,r19
    4b4c:	01400f04 	movi	r5,60
    4b50:	88a3c83a 	sub	r17,r17,r2
    4b54:	84400015 	stw	r17,0(r16)
    4b58:	00048100 	call	4810 <__divsi3>
    4b5c:	84c00117 	ldw	r19,4(r16)
    4b60:	a009883a 	mov	r4,r20
    4b64:	01438404 	movi	r5,3600
    4b68:	98a7c83a 	sub	r19,r19,r2
    4b6c:	84c00115 	stw	r19,4(r16)
    4b70:	00048100 	call	4810 <__divsi3>
    4b74:	80c00217 	ldw	r3,8(r16)
    4b78:	01000ec4 	movi	r4,59
    4b7c:	1885c83a 	sub	r2,r3,r2
    4b80:	80800215 	stw	r2,8(r16)
    4b84:	2440040e 	bge	r4,r17,4b98 <localtime_r+0x184>
    4b88:	9cc00044 	addi	r19,r19,1
    4b8c:	84c00115 	stw	r19,4(r16)
    4b90:	8c7ff104 	addi	r17,r17,-60
    4b94:	00000406 	br	4ba8 <localtime_r+0x194>
    4b98:	8800040e 	bge	r17,zero,4bac <localtime_r+0x198>
    4b9c:	9cffffc4 	addi	r19,r19,-1
    4ba0:	84c00115 	stw	r19,4(r16)
    4ba4:	8c400f04 	addi	r17,r17,60
    4ba8:	84400015 	stw	r17,0(r16)
    4bac:	80c00117 	ldw	r3,4(r16)
    4bb0:	20c0040e 	bge	r4,r3,4bc4 <localtime_r+0x1b0>
    4bb4:	10800044 	addi	r2,r2,1
    4bb8:	80800215 	stw	r2,8(r16)
    4bbc:	18fff104 	addi	r3,r3,-60
    4bc0:	00000406 	br	4bd4 <localtime_r+0x1c0>
    4bc4:	1800040e 	bge	r3,zero,4bd8 <localtime_r+0x1c4>
    4bc8:	10bfffc4 	addi	r2,r2,-1
    4bcc:	80800215 	stw	r2,8(r16)
    4bd0:	18c00f04 	addi	r3,r3,60
    4bd4:	80c00115 	stw	r3,4(r16)
    4bd8:	80800217 	ldw	r2,8(r16)
    4bdc:	00c005c4 	movi	r3,23
    4be0:	1880220e 	bge	r3,r2,4c6c <localtime_r+0x258>
    4be4:	80c00717 	ldw	r3,28(r16)
    4be8:	01000184 	movi	r4,6
    4bec:	18c00044 	addi	r3,r3,1
    4bf0:	80c00715 	stw	r3,28(r16)
    4bf4:	80c00617 	ldw	r3,24(r16)
    4bf8:	18c00044 	addi	r3,r3,1
    4bfc:	20c00216 	blt	r4,r3,4c08 <localtime_r+0x1f4>
    4c00:	80c00615 	stw	r3,24(r16)
    4c04:	00000106 	br	4c0c <localtime_r+0x1f8>
    4c08:	80000615 	stw	zero,24(r16)
    4c0c:	81000417 	ldw	r4,16(r16)
    4c10:	80c00317 	ldw	r3,12(r16)
    4c14:	10bffa04 	addi	r2,r2,-24
    4c18:	80800215 	stw	r2,8(r16)
    4c1c:	2105883a 	add	r2,r4,r4
    4c20:	18c00044 	addi	r3,r3,1
    4c24:	1085883a 	add	r2,r2,r2
    4c28:	80c00315 	stw	r3,12(r16)
    4c2c:	9085883a 	add	r2,r18,r2
    4c30:	10800017 	ldw	r2,0(r2)
    4c34:	10c03b0e 	bge	r2,r3,4d24 <localtime_r+0x310>
    4c38:	1887c83a 	sub	r3,r3,r2
    4c3c:	80c00315 	stw	r3,12(r16)
    4c40:	21000044 	addi	r4,r4,1
    4c44:	00800304 	movi	r2,12
    4c48:	20800226 	beq	r4,r2,4c54 <localtime_r+0x240>
    4c4c:	81000415 	stw	r4,16(r16)
    4c50:	00003406 	br	4d24 <localtime_r+0x310>
    4c54:	80800517 	ldw	r2,20(r16)
    4c58:	80000415 	stw	zero,16(r16)
    4c5c:	80000715 	stw	zero,28(r16)
    4c60:	10800044 	addi	r2,r2,1
    4c64:	80800515 	stw	r2,20(r16)
    4c68:	00002e06 	br	4d24 <localtime_r+0x310>
    4c6c:	10002d0e 	bge	r2,zero,4d24 <localtime_r+0x310>
    4c70:	80c00717 	ldw	r3,28(r16)
    4c74:	18ffffc4 	addi	r3,r3,-1
    4c78:	80c00715 	stw	r3,28(r16)
    4c7c:	80c00617 	ldw	r3,24(r16)
    4c80:	18ffffc4 	addi	r3,r3,-1
    4c84:	1800010e 	bge	r3,zero,4c8c <localtime_r+0x278>
    4c88:	00c00184 	movi	r3,6
    4c8c:	80c00615 	stw	r3,24(r16)
    4c90:	80c00317 	ldw	r3,12(r16)
    4c94:	10800604 	addi	r2,r2,24
    4c98:	80800215 	stw	r2,8(r16)
    4c9c:	18ffffc4 	addi	r3,r3,-1
    4ca0:	80c00315 	stw	r3,12(r16)
    4ca4:	18001f1e 	bne	r3,zero,4d24 <localtime_r+0x310>
    4ca8:	80800417 	ldw	r2,16(r16)
    4cac:	10bfffc4 	addi	r2,r2,-1
    4cb0:	10000216 	blt	r2,zero,4cbc <localtime_r+0x2a8>
    4cb4:	80800415 	stw	r2,16(r16)
    4cb8:	00001406 	br	4d0c <localtime_r+0x2f8>
    4cbc:	84400517 	ldw	r17,20(r16)
    4cc0:	008002c4 	movi	r2,11
    4cc4:	80800415 	stw	r2,16(r16)
    4cc8:	88bfffc4 	addi	r2,r17,-1
    4ccc:	80800515 	stw	r2,20(r16)
    4cd0:	108000cc 	andi	r2,r2,3
    4cd4:	8c41dac4 	addi	r17,r17,1899
    4cd8:	1000041e 	bne	r2,zero,4cec <localtime_r+0x2d8>
    4cdc:	01401904 	movi	r5,100
    4ce0:	8809883a 	mov	r4,r17
    4ce4:	00048940 	call	4894 <__modsi3>
    4ce8:	1000051e 	bne	r2,zero,4d00 <localtime_r+0x2ec>
    4cec:	01406404 	movi	r5,400
    4cf0:	8809883a 	mov	r4,r17
    4cf4:	00048940 	call	4894 <__modsi3>
    4cf8:	1005003a 	cmpeq	r2,r2,zero
    4cfc:	00000106 	br	4d04 <localtime_r+0x2f0>
    4d00:	00800044 	movi	r2,1
    4d04:	10805b04 	addi	r2,r2,364
    4d08:	80800715 	stw	r2,28(r16)
    4d0c:	80800417 	ldw	r2,16(r16)
    4d10:	1085883a 	add	r2,r2,r2
    4d14:	1085883a 	add	r2,r2,r2
    4d18:	9085883a 	add	r2,r18,r2
    4d1c:	10800017 	ldw	r2,0(r2)
    4d20:	80800315 	stw	r2,12(r16)
    4d24:	000535c0 	call	535c <__tz_unlock>
    4d28:	8005883a 	mov	r2,r16
    4d2c:	dfc00617 	ldw	ra,24(sp)
    4d30:	dd000517 	ldw	r20,20(sp)
    4d34:	dcc00417 	ldw	r19,16(sp)
    4d38:	dc800317 	ldw	r18,12(sp)
    4d3c:	dc400217 	ldw	r17,8(sp)
    4d40:	dc000117 	ldw	r16,4(sp)
    4d44:	dec00704 	addi	sp,sp,28
    4d48:	f800283a 	ret

00004d4c <malloc>:
    4d4c:	00800034 	movhi	r2,0
    4d50:	10989804 	addi	r2,r2,25184
    4d54:	200b883a 	mov	r5,r4
    4d58:	11000017 	ldw	r4,0(r2)
    4d5c:	0004e801 	jmpi	4e80 <_malloc_r>

00004d60 <free>:
    4d60:	00800034 	movhi	r2,0
    4d64:	10989804 	addi	r2,r2,25184
    4d68:	200b883a 	mov	r5,r4
    4d6c:	11000017 	ldw	r4,0(r2)
    4d70:	0004d9c1 	jmpi	4d9c <_free_r>

00004d74 <memcpy>:
    4d74:	2005883a 	mov	r2,r4
    4d78:	2007883a 	mov	r3,r4
    4d7c:	218d883a 	add	r6,r4,r6
    4d80:	19800526 	beq	r3,r6,4d98 <memcpy+0x24>
    4d84:	29000003 	ldbu	r4,0(r5)
    4d88:	18c00044 	addi	r3,r3,1
    4d8c:	29400044 	addi	r5,r5,1
    4d90:	193fffc5 	stb	r4,-1(r3)
    4d94:	003ffa06 	br	4d80 <_gp+0xffff6b74>
    4d98:	f800283a 	ret

00004d9c <_free_r>:
    4d9c:	28003726 	beq	r5,zero,4e7c <_free_r+0xe0>
    4da0:	28ffff17 	ldw	r3,-4(r5)
    4da4:	28bfff04 	addi	r2,r5,-4
    4da8:	1800010e 	bge	r3,zero,4db0 <_free_r+0x14>
    4dac:	10c5883a 	add	r2,r2,r3
    4db0:	01400034 	movhi	r5,0
    4db4:	29590a04 	addi	r5,r5,25640
    4db8:	28c00017 	ldw	r3,0(r5)
    4dbc:	280d883a 	mov	r6,r5
    4dc0:	1800031e 	bne	r3,zero,4dd0 <_free_r+0x34>
    4dc4:	10000115 	stw	zero,4(r2)
    4dc8:	28800015 	stw	r2,0(r5)
    4dcc:	f800283a 	ret
    4dd0:	10c00c2e 	bgeu	r2,r3,4e04 <_free_r+0x68>
    4dd4:	11000017 	ldw	r4,0(r2)
    4dd8:	110b883a 	add	r5,r2,r4
    4ddc:	1940041e 	bne	r3,r5,4df0 <_free_r+0x54>
    4de0:	19400017 	ldw	r5,0(r3)
    4de4:	18c00117 	ldw	r3,4(r3)
    4de8:	2909883a 	add	r4,r5,r4
    4dec:	11000015 	stw	r4,0(r2)
    4df0:	10c00115 	stw	r3,4(r2)
    4df4:	30800015 	stw	r2,0(r6)
    4df8:	f800283a 	ret
    4dfc:	11400336 	bltu	r2,r5,4e0c <_free_r+0x70>
    4e00:	2807883a 	mov	r3,r5
    4e04:	19400117 	ldw	r5,4(r3)
    4e08:	283ffc1e 	bne	r5,zero,4dfc <_gp+0xffff6bf0>
    4e0c:	19c00017 	ldw	r7,0(r3)
    4e10:	19cd883a 	add	r6,r3,r7
    4e14:	30800a1e 	bne	r6,r2,4e40 <_free_r+0xa4>
    4e18:	10800017 	ldw	r2,0(r2)
    4e1c:	3885883a 	add	r2,r7,r2
    4e20:	18800015 	stw	r2,0(r3)
    4e24:	1889883a 	add	r4,r3,r2
    4e28:	2900141e 	bne	r5,r4,4e7c <_free_r+0xe0>
    4e2c:	29000017 	ldw	r4,0(r5)
    4e30:	2085883a 	add	r2,r4,r2
    4e34:	18800015 	stw	r2,0(r3)
    4e38:	28800117 	ldw	r2,4(r5)
    4e3c:	00000e06 	br	4e78 <_free_r+0xdc>
    4e40:	1180032e 	bgeu	r2,r6,4e50 <_free_r+0xb4>
    4e44:	00800304 	movi	r2,12
    4e48:	20800015 	stw	r2,0(r4)
    4e4c:	f800283a 	ret
    4e50:	11000017 	ldw	r4,0(r2)
    4e54:	110d883a 	add	r6,r2,r4
    4e58:	2980061e 	bne	r5,r6,4e74 <_free_r+0xd8>
    4e5c:	29800017 	ldw	r6,0(r5)
    4e60:	3109883a 	add	r4,r6,r4
    4e64:	11000015 	stw	r4,0(r2)
    4e68:	29000117 	ldw	r4,4(r5)
    4e6c:	11000115 	stw	r4,4(r2)
    4e70:	00000106 	br	4e78 <_free_r+0xdc>
    4e74:	11400115 	stw	r5,4(r2)
    4e78:	18800115 	stw	r2,4(r3)
    4e7c:	f800283a 	ret

00004e80 <_malloc_r>:
    4e80:	defffb04 	addi	sp,sp,-20
    4e84:	00bfff04 	movi	r2,-4
    4e88:	dc400115 	stw	r17,4(sp)
    4e8c:	2c4000c4 	addi	r17,r5,3
    4e90:	88a2703a 	and	r17,r17,r2
    4e94:	dc800215 	stw	r18,8(sp)
    4e98:	dfc00415 	stw	ra,16(sp)
    4e9c:	dcc00315 	stw	r19,12(sp)
    4ea0:	dc000015 	stw	r16,0(sp)
    4ea4:	8c400204 	addi	r17,r17,8
    4ea8:	00800304 	movi	r2,12
    4eac:	2025883a 	mov	r18,r4
    4eb0:	8880022e 	bgeu	r17,r2,4ebc <_malloc_r+0x3c>
    4eb4:	1023883a 	mov	r17,r2
    4eb8:	00000506 	br	4ed0 <_malloc_r+0x50>
    4ebc:	8800040e 	bge	r17,zero,4ed0 <_malloc_r+0x50>
    4ec0:	00800304 	movi	r2,12
    4ec4:	90800015 	stw	r2,0(r18)
    4ec8:	0005883a 	mov	r2,zero
    4ecc:	00003b06 	br	4fbc <_malloc_r+0x13c>
    4ed0:	897ffb36 	bltu	r17,r5,4ec0 <_gp+0xffff6cb4>
    4ed4:	00800034 	movhi	r2,0
    4ed8:	10990a04 	addi	r2,r2,25640
    4edc:	10c00017 	ldw	r3,0(r2)
    4ee0:	1009883a 	mov	r4,r2
    4ee4:	1821883a 	mov	r16,r3
    4ee8:	80000926 	beq	r16,zero,4f10 <_malloc_r+0x90>
    4eec:	80800017 	ldw	r2,0(r16)
    4ef0:	1445c83a 	sub	r2,r2,r17
    4ef4:	10001516 	blt	r2,zero,4f4c <_malloc_r+0xcc>
    4ef8:	014002c4 	movi	r5,11
    4efc:	28800d2e 	bgeu	r5,r2,4f34 <_malloc_r+0xb4>
    4f00:	80800015 	stw	r2,0(r16)
    4f04:	80a1883a 	add	r16,r16,r2
    4f08:	84400015 	stw	r17,0(r16)
    4f0c:	8000221e 	bne	r16,zero,4f98 <_malloc_r+0x118>
    4f10:	04000034 	movhi	r16,0
    4f14:	84190904 	addi	r16,r16,25636
    4f18:	80800017 	ldw	r2,0(r16)
    4f1c:	10000e1e 	bne	r2,zero,4f58 <_malloc_r+0xd8>
    4f20:	000b883a 	mov	r5,zero
    4f24:	9009883a 	mov	r4,r18
    4f28:	00050600 	call	5060 <_sbrk_r>
    4f2c:	80800015 	stw	r2,0(r16)
    4f30:	00000906 	br	4f58 <_malloc_r+0xd8>
    4f34:	80800117 	ldw	r2,4(r16)
    4f38:	1c00021e 	bne	r3,r16,4f44 <_malloc_r+0xc4>
    4f3c:	20800015 	stw	r2,0(r4)
    4f40:	00001506 	br	4f98 <_malloc_r+0x118>
    4f44:	18800115 	stw	r2,4(r3)
    4f48:	00001306 	br	4f98 <_malloc_r+0x118>
    4f4c:	8007883a 	mov	r3,r16
    4f50:	84000117 	ldw	r16,4(r16)
    4f54:	003fe406 	br	4ee8 <_gp+0xffff6cdc>
    4f58:	880b883a 	mov	r5,r17
    4f5c:	9009883a 	mov	r4,r18
    4f60:	00050600 	call	5060 <_sbrk_r>
    4f64:	04ffffc4 	movi	r19,-1
    4f68:	14ffd526 	beq	r2,r19,4ec0 <_gp+0xffff6cb4>
    4f6c:	140000c4 	addi	r16,r2,3
    4f70:	00ffff04 	movi	r3,-4
    4f74:	80e0703a 	and	r16,r16,r3
    4f78:	1400021e 	bne	r2,r16,4f84 <_malloc_r+0x104>
    4f7c:	84400015 	stw	r17,0(r16)
    4f80:	00000506 	br	4f98 <_malloc_r+0x118>
    4f84:	808bc83a 	sub	r5,r16,r2
    4f88:	9009883a 	mov	r4,r18
    4f8c:	00050600 	call	5060 <_sbrk_r>
    4f90:	14fffa1e 	bne	r2,r19,4f7c <_gp+0xffff6d70>
    4f94:	003fca06 	br	4ec0 <_gp+0xffff6cb4>
    4f98:	810002c4 	addi	r4,r16,11
    4f9c:	00bffe04 	movi	r2,-8
    4fa0:	80c00104 	addi	r3,r16,4
    4fa4:	2084703a 	and	r2,r4,r2
    4fa8:	10c7c83a 	sub	r3,r2,r3
    4fac:	18000326 	beq	r3,zero,4fbc <_malloc_r+0x13c>
    4fb0:	80e1883a 	add	r16,r16,r3
    4fb4:	00c7c83a 	sub	r3,zero,r3
    4fb8:	80c00015 	stw	r3,0(r16)
    4fbc:	dfc00417 	ldw	ra,16(sp)
    4fc0:	dcc00317 	ldw	r19,12(sp)
    4fc4:	dc800217 	ldw	r18,8(sp)
    4fc8:	dc400117 	ldw	r17,4(sp)
    4fcc:	dc000017 	ldw	r16,0(sp)
    4fd0:	dec00504 	addi	sp,sp,20
    4fd4:	f800283a 	ret

00004fd8 <_printf_r>:
    4fd8:	defffd04 	addi	sp,sp,-12
    4fdc:	dfc00015 	stw	ra,0(sp)
    4fe0:	d9800115 	stw	r6,4(sp)
    4fe4:	d9c00215 	stw	r7,8(sp)
    4fe8:	20c00217 	ldw	r3,8(r4)
    4fec:	01800034 	movhi	r6,0
    4ff0:	31964504 	addi	r6,r6,22804
    4ff4:	19800115 	stw	r6,4(r3)
    4ff8:	280d883a 	mov	r6,r5
    4ffc:	21400217 	ldw	r5,8(r4)
    5000:	d9c00104 	addi	r7,sp,4
    5004:	00053cc0 	call	53cc <___vfprintf_internal_r>
    5008:	dfc00017 	ldw	ra,0(sp)
    500c:	dec00304 	addi	sp,sp,12
    5010:	f800283a 	ret

00005014 <printf>:
    5014:	defffc04 	addi	sp,sp,-16
    5018:	dfc00015 	stw	ra,0(sp)
    501c:	d9400115 	stw	r5,4(sp)
    5020:	d9800215 	stw	r6,8(sp)
    5024:	d9c00315 	stw	r7,12(sp)
    5028:	00800034 	movhi	r2,0
    502c:	10989804 	addi	r2,r2,25184
    5030:	10800017 	ldw	r2,0(r2)
    5034:	01400034 	movhi	r5,0
    5038:	29564504 	addi	r5,r5,22804
    503c:	10c00217 	ldw	r3,8(r2)
    5040:	d9800104 	addi	r6,sp,4
    5044:	19400115 	stw	r5,4(r3)
    5048:	200b883a 	mov	r5,r4
    504c:	11000217 	ldw	r4,8(r2)
    5050:	00058f80 	call	58f8 <__vfprintf_internal>
    5054:	dfc00017 	ldw	ra,0(sp)
    5058:	dec00404 	addi	sp,sp,16
    505c:	f800283a 	ret

00005060 <_sbrk_r>:
    5060:	defffd04 	addi	sp,sp,-12
    5064:	dc000015 	stw	r16,0(sp)
    5068:	04000034 	movhi	r16,0
    506c:	dc400115 	stw	r17,4(sp)
    5070:	84190d04 	addi	r16,r16,25652
    5074:	2023883a 	mov	r17,r4
    5078:	2809883a 	mov	r4,r5
    507c:	dfc00215 	stw	ra,8(sp)
    5080:	80000015 	stw	zero,0(r16)
    5084:	0005eec0 	call	5eec <sbrk>
    5088:	00ffffc4 	movi	r3,-1
    508c:	10c0031e 	bne	r2,r3,509c <_sbrk_r+0x3c>
    5090:	80c00017 	ldw	r3,0(r16)
    5094:	18000126 	beq	r3,zero,509c <_sbrk_r+0x3c>
    5098:	88c00015 	stw	r3,0(r17)
    509c:	dfc00217 	ldw	ra,8(sp)
    50a0:	dc400117 	ldw	r17,4(sp)
    50a4:	dc000017 	ldw	r16,0(sp)
    50a8:	dec00304 	addi	sp,sp,12
    50ac:	f800283a 	ret

000050b0 <__tzcalc_limits>:
    50b0:	deffed04 	addi	sp,sp,-76
    50b4:	ddc01015 	stw	r23,64(sp)
    50b8:	dc400a15 	stw	r17,40(sp)
    50bc:	dfc01215 	stw	ra,72(sp)
    50c0:	df001115 	stw	fp,68(sp)
    50c4:	dd800f15 	stw	r22,60(sp)
    50c8:	dd400e15 	stw	r21,56(sp)
    50cc:	dd000d15 	stw	r20,52(sp)
    50d0:	dcc00c15 	stw	r19,48(sp)
    50d4:	dc800b15 	stw	r18,44(sp)
    50d8:	dc000915 	stw	r16,36(sp)
    50dc:	2023883a 	mov	r17,r4
    50e0:	00059cc0 	call	59cc <__gettzinfo>
    50e4:	102f883a 	mov	r23,r2
    50e8:	0081ec44 	movi	r2,1969
    50ec:	14408d0e 	bge	r2,r17,5324 <__tzcalc_limits+0x274>
    50f0:	8c3e13c4 	addi	r16,r17,-1969
    50f4:	893e1384 	addi	r4,r17,-1970
    50f8:	bc400115 	stw	r17,4(r23)
    50fc:	01405b44 	movi	r5,365
    5100:	8021d0ba 	srai	r16,r16,2
    5104:	0005c8c0 	call	5c8c <__mulsi3>
    5108:	893e24c4 	addi	r4,r17,-1901
    510c:	017fe704 	movi	r5,-100
    5110:	1421883a 	add	r16,r2,r16
    5114:	00048100 	call	4810 <__divsi3>
    5118:	893e6fc4 	addi	r4,r17,-1601
    511c:	01406404 	movi	r5,400
    5120:	80a1883a 	add	r16,r16,r2
    5124:	00048100 	call	4810 <__divsi3>
    5128:	8809883a 	mov	r4,r17
    512c:	01401904 	movi	r5,100
    5130:	80a1883a 	add	r16,r16,r2
    5134:	00048940 	call	4894 <__modsi3>
    5138:	8809883a 	mov	r4,r17
    513c:	01406404 	movi	r5,400
    5140:	d8800115 	stw	r2,4(sp)
    5144:	00048940 	call	4894 <__modsi3>
    5148:	1007003a 	cmpeq	r3,r2,zero
    514c:	d8c00415 	stw	r3,16(sp)
    5150:	b8c00304 	addi	r3,r23,12
    5154:	d8c00015 	stw	r3,0(sp)
    5158:	8c4000cc 	andi	r17,r17,3
    515c:	b8c01304 	addi	r3,r23,76
    5160:	d8800215 	stw	r2,8(sp)
    5164:	bd800204 	addi	r22,r23,8
    5168:	bd400604 	addi	r21,r23,24
    516c:	bd000804 	addi	r20,r23,32
    5170:	bcc00704 	addi	r19,r23,28
    5174:	bf000504 	addi	fp,r23,20
    5178:	bc800404 	addi	r18,r23,16
    517c:	d8c00615 	stw	r3,24(sp)
    5180:	dc400515 	stw	r17,20(sp)
    5184:	b0800007 	ldb	r2,0(r22)
    5188:	00c01284 	movi	r3,74
    518c:	10c00e1e 	bne	r2,r3,51c8 <__tzcalc_limits+0x118>
    5190:	e0800017 	ldw	r2,0(fp)
    5194:	d8c00517 	ldw	r3,20(sp)
    5198:	808b883a 	add	r5,r16,r2
    519c:	1800021e 	bne	r3,zero,51a8 <__tzcalc_limits+0xf8>
    51a0:	d8c00117 	ldw	r3,4(sp)
    51a4:	1800021e 	bne	r3,zero,51b0 <__tzcalc_limits+0x100>
    51a8:	d8c00217 	ldw	r3,8(sp)
    51ac:	1800021e 	bne	r3,zero,51b8 <__tzcalc_limits+0x108>
    51b0:	10800f08 	cmpgei	r2,r2,60
    51b4:	00000106 	br	51bc <__tzcalc_limits+0x10c>
    51b8:	0005883a 	mov	r2,zero
    51bc:	1145883a 	add	r2,r2,r5
    51c0:	113fffc4 	addi	r4,r2,-1
    51c4:	00003e06 	br	52c0 <__tzcalc_limits+0x210>
    51c8:	00c01104 	movi	r3,68
    51cc:	10c0031e 	bne	r2,r3,51dc <__tzcalc_limits+0x12c>
    51d0:	e0800017 	ldw	r2,0(fp)
    51d4:	8089883a 	add	r4,r16,r2
    51d8:	00003906 	br	52c0 <__tzcalc_limits+0x210>
    51dc:	d8c00517 	ldw	r3,20(sp)
    51e0:	1800041e 	bne	r3,zero,51f4 <__tzcalc_limits+0x144>
    51e4:	d8c00117 	ldw	r3,4(sp)
    51e8:	18000226 	beq	r3,zero,51f4 <__tzcalc_limits+0x144>
    51ec:	01000044 	movi	r4,1
    51f0:	00000106 	br	51f8 <__tzcalc_limits+0x148>
    51f4:	d9000417 	ldw	r4,16(sp)
    51f8:	01400c04 	movi	r5,48
    51fc:	0005c8c0 	call	5c8c <__mulsi3>
    5200:	00c00034 	movhi	r3,0
    5204:	18d82204 	addi	r3,r3,24712
    5208:	1885883a 	add	r2,r3,r2
    520c:	d8c00017 	ldw	r3,0(sp)
    5210:	d8800315 	stw	r2,12(sp)
    5214:	8013883a 	mov	r9,r16
    5218:	19800017 	ldw	r6,0(r3)
    521c:	1007883a 	mov	r3,r2
    5220:	00800044 	movi	r2,1
    5224:	1180050e 	bge	r2,r6,523c <__tzcalc_limits+0x18c>
    5228:	19000017 	ldw	r4,0(r3)
    522c:	10800044 	addi	r2,r2,1
    5230:	18c00104 	addi	r3,r3,4
    5234:	4913883a 	add	r9,r9,r4
    5238:	003ffa06 	br	5224 <_gp+0xffff7018>
    523c:	3023883a 	mov	r17,r6
    5240:	01800116 	blt	zero,r6,5248 <__tzcalc_limits+0x198>
    5244:	04400044 	movi	r17,1
    5248:	49000104 	addi	r4,r9,4
    524c:	014001c4 	movi	r5,7
    5250:	da400815 	stw	r9,32(sp)
    5254:	00048940 	call	4894 <__modsi3>
    5258:	e0c00017 	ldw	r3,0(fp)
    525c:	da400817 	ldw	r9,32(sp)
    5260:	1887c83a 	sub	r3,r3,r2
    5264:	1800010e 	bge	r3,zero,526c <__tzcalc_limits+0x1bc>
    5268:	18c001c4 	addi	r3,r3,7
    526c:	91000017 	ldw	r4,0(r18)
    5270:	014001c4 	movi	r5,7
    5274:	d8c00715 	stw	r3,28(sp)
    5278:	213fffc4 	addi	r4,r4,-1
    527c:	da400815 	stw	r9,32(sp)
    5280:	0005c8c0 	call	5c8c <__mulsi3>
    5284:	d8c00717 	ldw	r3,28(sp)
    5288:	da400817 	ldw	r9,32(sp)
    528c:	10c5883a 	add	r2,r2,r3
    5290:	00d00034 	movhi	r3,16384
    5294:	18ffffc4 	addi	r3,r3,-1
    5298:	88cd883a 	add	r6,r17,r3
    529c:	d8c00317 	ldw	r3,12(sp)
    52a0:	318d883a 	add	r6,r6,r6
    52a4:	318d883a 	add	r6,r6,r6
    52a8:	19a3883a 	add	r17,r3,r6
    52ac:	88c00017 	ldw	r3,0(r17)
    52b0:	10c00216 	blt	r2,r3,52bc <__tzcalc_limits+0x20c>
    52b4:	10bffe44 	addi	r2,r2,-7
    52b8:	003ffd06 	br	52b0 <_gp+0xffff70a4>
    52bc:	4889883a 	add	r4,r9,r2
    52c0:	01400074 	movhi	r5,1
    52c4:	29546004 	addi	r5,r5,20864
    52c8:	0005c8c0 	call	5c8c <__mulsi3>
    52cc:	a8c00017 	ldw	r3,0(r21)
    52d0:	e7000704 	addi	fp,fp,28
    52d4:	b5800704 	addi	r22,r22,28
    52d8:	10c5883a 	add	r2,r2,r3
    52dc:	a0c00017 	ldw	r3,0(r20)
    52e0:	ad400704 	addi	r21,r21,28
    52e4:	a5000704 	addi	r20,r20,28
    52e8:	10c5883a 	add	r2,r2,r3
    52ec:	d8c00017 	ldw	r3,0(sp)
    52f0:	98800015 	stw	r2,0(r19)
    52f4:	94800704 	addi	r18,r18,28
    52f8:	18c00704 	addi	r3,r3,28
    52fc:	d8c00015 	stw	r3,0(sp)
    5300:	d8c00617 	ldw	r3,24(sp)
    5304:	9cc00704 	addi	r19,r19,28
    5308:	1f3f9e1e 	bne	r3,fp,5184 <_gp+0xffff6f78>
    530c:	b8800717 	ldw	r2,28(r23)
    5310:	b8c00e17 	ldw	r3,56(r23)
    5314:	10c4803a 	cmplt	r2,r2,r3
    5318:	b8800015 	stw	r2,0(r23)
    531c:	00800044 	movi	r2,1
    5320:	00000106 	br	5328 <__tzcalc_limits+0x278>
    5324:	0005883a 	mov	r2,zero
    5328:	dfc01217 	ldw	ra,72(sp)
    532c:	df001117 	ldw	fp,68(sp)
    5330:	ddc01017 	ldw	r23,64(sp)
    5334:	dd800f17 	ldw	r22,60(sp)
    5338:	dd400e17 	ldw	r21,56(sp)
    533c:	dd000d17 	ldw	r20,52(sp)
    5340:	dcc00c17 	ldw	r19,48(sp)
    5344:	dc800b17 	ldw	r18,44(sp)
    5348:	dc400a17 	ldw	r17,40(sp)
    534c:	dc000917 	ldw	r16,36(sp)
    5350:	dec01304 	addi	sp,sp,76
    5354:	f800283a 	ret

00005358 <__tz_lock>:
    5358:	f800283a 	ret

0000535c <__tz_unlock>:
    535c:	f800283a 	ret

00005360 <print_repeat>:
    5360:	defffb04 	addi	sp,sp,-20
    5364:	dc800315 	stw	r18,12(sp)
    5368:	dc400215 	stw	r17,8(sp)
    536c:	dc000115 	stw	r16,4(sp)
    5370:	dfc00415 	stw	ra,16(sp)
    5374:	2025883a 	mov	r18,r4
    5378:	2823883a 	mov	r17,r5
    537c:	d9800005 	stb	r6,0(sp)
    5380:	3821883a 	mov	r16,r7
    5384:	04000a0e 	bge	zero,r16,53b0 <print_repeat+0x50>
    5388:	88800117 	ldw	r2,4(r17)
    538c:	01c00044 	movi	r7,1
    5390:	d80d883a 	mov	r6,sp
    5394:	880b883a 	mov	r5,r17
    5398:	9009883a 	mov	r4,r18
    539c:	103ee83a 	callr	r2
    53a0:	843fffc4 	addi	r16,r16,-1
    53a4:	103ff726 	beq	r2,zero,5384 <_gp+0xffff7178>
    53a8:	00bfffc4 	movi	r2,-1
    53ac:	00000106 	br	53b4 <print_repeat+0x54>
    53b0:	0005883a 	mov	r2,zero
    53b4:	dfc00417 	ldw	ra,16(sp)
    53b8:	dc800317 	ldw	r18,12(sp)
    53bc:	dc400217 	ldw	r17,8(sp)
    53c0:	dc000117 	ldw	r16,4(sp)
    53c4:	dec00504 	addi	sp,sp,20
    53c8:	f800283a 	ret

000053cc <___vfprintf_internal_r>:
    53cc:	deffe504 	addi	sp,sp,-108
    53d0:	d8c00804 	addi	r3,sp,32
    53d4:	ddc01815 	stw	r23,96(sp)
    53d8:	dd801715 	stw	r22,92(sp)
    53dc:	dd401615 	stw	r21,88(sp)
    53e0:	dd001515 	stw	r20,84(sp)
    53e4:	dcc01415 	stw	r19,80(sp)
    53e8:	dc801315 	stw	r18,76(sp)
    53ec:	dc401215 	stw	r17,72(sp)
    53f0:	dc001115 	stw	r16,68(sp)
    53f4:	dfc01a15 	stw	ra,104(sp)
    53f8:	df001915 	stw	fp,100(sp)
    53fc:	2029883a 	mov	r20,r4
    5400:	2823883a 	mov	r17,r5
    5404:	382d883a 	mov	r22,r7
    5408:	d9800f15 	stw	r6,60(sp)
    540c:	0021883a 	mov	r16,zero
    5410:	d8000e15 	stw	zero,56(sp)
    5414:	d8000a15 	stw	zero,40(sp)
    5418:	002b883a 	mov	r21,zero
    541c:	0027883a 	mov	r19,zero
    5420:	0025883a 	mov	r18,zero
    5424:	d8000c15 	stw	zero,48(sp)
    5428:	d8000b15 	stw	zero,44(sp)
    542c:	002f883a 	mov	r23,zero
    5430:	d8c00915 	stw	r3,36(sp)
    5434:	d8c00f17 	ldw	r3,60(sp)
    5438:	19000003 	ldbu	r4,0(r3)
    543c:	20803fcc 	andi	r2,r4,255
    5440:	1080201c 	xori	r2,r2,128
    5444:	10bfe004 	addi	r2,r2,-128
    5448:	10011e26 	beq	r2,zero,58c4 <___vfprintf_internal_r+0x4f8>
    544c:	00c00044 	movi	r3,1
    5450:	b8c01426 	beq	r23,r3,54a4 <___vfprintf_internal_r+0xd8>
    5454:	1dc00216 	blt	r3,r23,5460 <___vfprintf_internal_r+0x94>
    5458:	b8000626 	beq	r23,zero,5474 <___vfprintf_internal_r+0xa8>
    545c:	00011506 	br	58b4 <___vfprintf_internal_r+0x4e8>
    5460:	01400084 	movi	r5,2
    5464:	b9401d26 	beq	r23,r5,54dc <___vfprintf_internal_r+0x110>
    5468:	014000c4 	movi	r5,3
    546c:	b9402b26 	beq	r23,r5,551c <___vfprintf_internal_r+0x150>
    5470:	00011006 	br	58b4 <___vfprintf_internal_r+0x4e8>
    5474:	01400944 	movi	r5,37
    5478:	1140fc26 	beq	r2,r5,586c <___vfprintf_internal_r+0x4a0>
    547c:	88800117 	ldw	r2,4(r17)
    5480:	d9000005 	stb	r4,0(sp)
    5484:	01c00044 	movi	r7,1
    5488:	d80d883a 	mov	r6,sp
    548c:	880b883a 	mov	r5,r17
    5490:	a009883a 	mov	r4,r20
    5494:	103ee83a 	callr	r2
    5498:	1000d81e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    549c:	84000044 	addi	r16,r16,1
    54a0:	00010406 	br	58b4 <___vfprintf_internal_r+0x4e8>
    54a4:	01400c04 	movi	r5,48
    54a8:	1140fa26 	beq	r2,r5,5894 <___vfprintf_internal_r+0x4c8>
    54ac:	01400944 	movi	r5,37
    54b0:	11400a1e 	bne	r2,r5,54dc <___vfprintf_internal_r+0x110>
    54b4:	d8800005 	stb	r2,0(sp)
    54b8:	88800117 	ldw	r2,4(r17)
    54bc:	b80f883a 	mov	r7,r23
    54c0:	d80d883a 	mov	r6,sp
    54c4:	880b883a 	mov	r5,r17
    54c8:	a009883a 	mov	r4,r20
    54cc:	103ee83a 	callr	r2
    54d0:	1000ca1e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    54d4:	84000044 	addi	r16,r16,1
    54d8:	0000f506 	br	58b0 <___vfprintf_internal_r+0x4e4>
    54dc:	25fff404 	addi	r23,r4,-48
    54e0:	bdc03fcc 	andi	r23,r23,255
    54e4:	00c00244 	movi	r3,9
    54e8:	1dc00936 	bltu	r3,r23,5510 <___vfprintf_internal_r+0x144>
    54ec:	00bfffc4 	movi	r2,-1
    54f0:	90800426 	beq	r18,r2,5504 <___vfprintf_internal_r+0x138>
    54f4:	01400284 	movi	r5,10
    54f8:	9009883a 	mov	r4,r18
    54fc:	0005c8c0 	call	5c8c <__mulsi3>
    5500:	00000106 	br	5508 <___vfprintf_internal_r+0x13c>
    5504:	0005883a 	mov	r2,zero
    5508:	b8a5883a 	add	r18,r23,r2
    550c:	0000e206 	br	5898 <___vfprintf_internal_r+0x4cc>
    5510:	01400b84 	movi	r5,46
    5514:	1140e426 	beq	r2,r5,58a8 <___vfprintf_internal_r+0x4dc>
    5518:	05c00084 	movi	r23,2
    551c:	213ff404 	addi	r4,r4,-48
    5520:	27003fcc 	andi	fp,r4,255
    5524:	00c00244 	movi	r3,9
    5528:	1f000936 	bltu	r3,fp,5550 <___vfprintf_internal_r+0x184>
    552c:	00bfffc4 	movi	r2,-1
    5530:	98800426 	beq	r19,r2,5544 <___vfprintf_internal_r+0x178>
    5534:	01400284 	movi	r5,10
    5538:	9809883a 	mov	r4,r19
    553c:	0005c8c0 	call	5c8c <__mulsi3>
    5540:	00000106 	br	5548 <___vfprintf_internal_r+0x17c>
    5544:	0005883a 	mov	r2,zero
    5548:	e0a7883a 	add	r19,fp,r2
    554c:	0000d906 	br	58b4 <___vfprintf_internal_r+0x4e8>
    5550:	00c01b04 	movi	r3,108
    5554:	10c0d226 	beq	r2,r3,58a0 <___vfprintf_internal_r+0x4d4>
    5558:	013fffc4 	movi	r4,-1
    555c:	99000226 	beq	r19,r4,5568 <___vfprintf_internal_r+0x19c>
    5560:	d8000b15 	stw	zero,44(sp)
    5564:	00000106 	br	556c <___vfprintf_internal_r+0x1a0>
    5568:	04c00044 	movi	r19,1
    556c:	01001a44 	movi	r4,105
    5570:	11001626 	beq	r2,r4,55cc <___vfprintf_internal_r+0x200>
    5574:	20800916 	blt	r4,r2,559c <___vfprintf_internal_r+0x1d0>
    5578:	010018c4 	movi	r4,99
    557c:	11008826 	beq	r2,r4,57a0 <___vfprintf_internal_r+0x3d4>
    5580:	01001904 	movi	r4,100
    5584:	11001126 	beq	r2,r4,55cc <___vfprintf_internal_r+0x200>
    5588:	01001604 	movi	r4,88
    558c:	1100c81e 	bne	r2,r4,58b0 <___vfprintf_internal_r+0x4e4>
    5590:	00c00044 	movi	r3,1
    5594:	d8c00e15 	stw	r3,56(sp)
    5598:	00001506 	br	55f0 <___vfprintf_internal_r+0x224>
    559c:	01001cc4 	movi	r4,115
    55a0:	11009826 	beq	r2,r4,5804 <___vfprintf_internal_r+0x438>
    55a4:	20800416 	blt	r4,r2,55b8 <___vfprintf_internal_r+0x1ec>
    55a8:	01001bc4 	movi	r4,111
    55ac:	1100c01e 	bne	r2,r4,58b0 <___vfprintf_internal_r+0x4e4>
    55b0:	05400204 	movi	r21,8
    55b4:	00000f06 	br	55f4 <___vfprintf_internal_r+0x228>
    55b8:	01001d44 	movi	r4,117
    55bc:	11000d26 	beq	r2,r4,55f4 <___vfprintf_internal_r+0x228>
    55c0:	01001e04 	movi	r4,120
    55c4:	11000a26 	beq	r2,r4,55f0 <___vfprintf_internal_r+0x224>
    55c8:	0000b906 	br	58b0 <___vfprintf_internal_r+0x4e4>
    55cc:	d8c00a17 	ldw	r3,40(sp)
    55d0:	b7000104 	addi	fp,r22,4
    55d4:	18000726 	beq	r3,zero,55f4 <___vfprintf_internal_r+0x228>
    55d8:	df000d15 	stw	fp,52(sp)
    55dc:	b5c00017 	ldw	r23,0(r22)
    55e0:	b800080e 	bge	r23,zero,5604 <___vfprintf_internal_r+0x238>
    55e4:	05efc83a 	sub	r23,zero,r23
    55e8:	02400044 	movi	r9,1
    55ec:	00000606 	br	5608 <___vfprintf_internal_r+0x23c>
    55f0:	05400404 	movi	r21,16
    55f4:	b0c00104 	addi	r3,r22,4
    55f8:	d8c00d15 	stw	r3,52(sp)
    55fc:	b5c00017 	ldw	r23,0(r22)
    5600:	d8000a15 	stw	zero,40(sp)
    5604:	0013883a 	mov	r9,zero
    5608:	d839883a 	mov	fp,sp
    560c:	b8001726 	beq	r23,zero,566c <___vfprintf_internal_r+0x2a0>
    5610:	a80b883a 	mov	r5,r21
    5614:	b809883a 	mov	r4,r23
    5618:	da401015 	stw	r9,64(sp)
    561c:	00049080 	call	4908 <__udivsi3>
    5620:	a80b883a 	mov	r5,r21
    5624:	1009883a 	mov	r4,r2
    5628:	102d883a 	mov	r22,r2
    562c:	0005c8c0 	call	5c8c <__mulsi3>
    5630:	b885c83a 	sub	r2,r23,r2
    5634:	00c00244 	movi	r3,9
    5638:	da401017 	ldw	r9,64(sp)
    563c:	18800216 	blt	r3,r2,5648 <___vfprintf_internal_r+0x27c>
    5640:	10800c04 	addi	r2,r2,48
    5644:	00000506 	br	565c <___vfprintf_internal_r+0x290>
    5648:	d8c00e17 	ldw	r3,56(sp)
    564c:	18000226 	beq	r3,zero,5658 <___vfprintf_internal_r+0x28c>
    5650:	10800dc4 	addi	r2,r2,55
    5654:	00000106 	br	565c <___vfprintf_internal_r+0x290>
    5658:	108015c4 	addi	r2,r2,87
    565c:	e0800005 	stb	r2,0(fp)
    5660:	b02f883a 	mov	r23,r22
    5664:	e7000044 	addi	fp,fp,1
    5668:	003fe806 	br	560c <_gp+0xffff7400>
    566c:	e6efc83a 	sub	r23,fp,sp
    5670:	9dc5c83a 	sub	r2,r19,r23
    5674:	0080090e 	bge	zero,r2,569c <___vfprintf_internal_r+0x2d0>
    5678:	e085883a 	add	r2,fp,r2
    567c:	01400c04 	movi	r5,48
    5680:	d8c00917 	ldw	r3,36(sp)
    5684:	e009883a 	mov	r4,fp
    5688:	e0c0032e 	bgeu	fp,r3,5698 <___vfprintf_internal_r+0x2cc>
    568c:	e7000044 	addi	fp,fp,1
    5690:	21400005 	stb	r5,0(r4)
    5694:	e0bffa1e 	bne	fp,r2,5680 <_gp+0xffff7474>
    5698:	e6efc83a 	sub	r23,fp,sp
    569c:	d8c00b17 	ldw	r3,44(sp)
    56a0:	4dd1883a 	add	r8,r9,r23
    56a4:	922dc83a 	sub	r22,r18,r8
    56a8:	18001626 	beq	r3,zero,5704 <___vfprintf_internal_r+0x338>
    56ac:	48000a26 	beq	r9,zero,56d8 <___vfprintf_internal_r+0x30c>
    56b0:	00800b44 	movi	r2,45
    56b4:	d8800805 	stb	r2,32(sp)
    56b8:	88800117 	ldw	r2,4(r17)
    56bc:	01c00044 	movi	r7,1
    56c0:	d9800804 	addi	r6,sp,32
    56c4:	880b883a 	mov	r5,r17
    56c8:	a009883a 	mov	r4,r20
    56cc:	103ee83a 	callr	r2
    56d0:	10004a1e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    56d4:	84000044 	addi	r16,r16,1
    56d8:	0580070e 	bge	zero,r22,56f8 <___vfprintf_internal_r+0x32c>
    56dc:	b00f883a 	mov	r7,r22
    56e0:	01800c04 	movi	r6,48
    56e4:	880b883a 	mov	r5,r17
    56e8:	a009883a 	mov	r4,r20
    56ec:	00053600 	call	5360 <print_repeat>
    56f0:	1000421e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    56f4:	85a1883a 	add	r16,r16,r22
    56f8:	e02d883a 	mov	r22,fp
    56fc:	bf2fc83a 	sub	r23,r23,fp
    5700:	00002006 	br	5784 <___vfprintf_internal_r+0x3b8>
    5704:	0580090e 	bge	zero,r22,572c <___vfprintf_internal_r+0x360>
    5708:	b00f883a 	mov	r7,r22
    570c:	01800804 	movi	r6,32
    5710:	880b883a 	mov	r5,r17
    5714:	a009883a 	mov	r4,r20
    5718:	da401015 	stw	r9,64(sp)
    571c:	00053600 	call	5360 <print_repeat>
    5720:	da401017 	ldw	r9,64(sp)
    5724:	1000351e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    5728:	85a1883a 	add	r16,r16,r22
    572c:	483ff226 	beq	r9,zero,56f8 <_gp+0xffff74ec>
    5730:	00800b44 	movi	r2,45
    5734:	d8800805 	stb	r2,32(sp)
    5738:	88800117 	ldw	r2,4(r17)
    573c:	01c00044 	movi	r7,1
    5740:	d9800804 	addi	r6,sp,32
    5744:	880b883a 	mov	r5,r17
    5748:	a009883a 	mov	r4,r20
    574c:	103ee83a 	callr	r2
    5750:	10002a1e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    5754:	84000044 	addi	r16,r16,1
    5758:	003fe706 	br	56f8 <_gp+0xffff74ec>
    575c:	b5bfffc4 	addi	r22,r22,-1
    5760:	b0800003 	ldbu	r2,0(r22)
    5764:	01c00044 	movi	r7,1
    5768:	d9800804 	addi	r6,sp,32
    576c:	d8800805 	stb	r2,32(sp)
    5770:	88800117 	ldw	r2,4(r17)
    5774:	880b883a 	mov	r5,r17
    5778:	a009883a 	mov	r4,r20
    577c:	103ee83a 	callr	r2
    5780:	10001e1e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    5784:	8585c83a 	sub	r2,r16,r22
    5788:	b5c9883a 	add	r4,r22,r23
    578c:	e085883a 	add	r2,fp,r2
    5790:	013ff216 	blt	zero,r4,575c <_gp+0xffff7550>
    5794:	1021883a 	mov	r16,r2
    5798:	dd800d17 	ldw	r22,52(sp)
    579c:	00004406 	br	58b0 <___vfprintf_internal_r+0x4e4>
    57a0:	00800044 	movi	r2,1
    57a4:	1480080e 	bge	r2,r18,57c8 <___vfprintf_internal_r+0x3fc>
    57a8:	95ffffc4 	addi	r23,r18,-1
    57ac:	b80f883a 	mov	r7,r23
    57b0:	01800804 	movi	r6,32
    57b4:	880b883a 	mov	r5,r17
    57b8:	a009883a 	mov	r4,r20
    57bc:	00053600 	call	5360 <print_repeat>
    57c0:	10000e1e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    57c4:	85e1883a 	add	r16,r16,r23
    57c8:	b0800017 	ldw	r2,0(r22)
    57cc:	01c00044 	movi	r7,1
    57d0:	d80d883a 	mov	r6,sp
    57d4:	d8800005 	stb	r2,0(sp)
    57d8:	88800117 	ldw	r2,4(r17)
    57dc:	880b883a 	mov	r5,r17
    57e0:	a009883a 	mov	r4,r20
    57e4:	b5c00104 	addi	r23,r22,4
    57e8:	103ee83a 	callr	r2
    57ec:	1000031e 	bne	r2,zero,57fc <___vfprintf_internal_r+0x430>
    57f0:	84000044 	addi	r16,r16,1
    57f4:	b82d883a 	mov	r22,r23
    57f8:	00002d06 	br	58b0 <___vfprintf_internal_r+0x4e4>
    57fc:	00bfffc4 	movi	r2,-1
    5800:	00003106 	br	58c8 <___vfprintf_internal_r+0x4fc>
    5804:	b5c00017 	ldw	r23,0(r22)
    5808:	b7000104 	addi	fp,r22,4
    580c:	b809883a 	mov	r4,r23
    5810:	0005c180 	call	5c18 <strlen>
    5814:	9091c83a 	sub	r8,r18,r2
    5818:	102d883a 	mov	r22,r2
    581c:	0200090e 	bge	zero,r8,5844 <___vfprintf_internal_r+0x478>
    5820:	400f883a 	mov	r7,r8
    5824:	01800804 	movi	r6,32
    5828:	880b883a 	mov	r5,r17
    582c:	a009883a 	mov	r4,r20
    5830:	da001015 	stw	r8,64(sp)
    5834:	00053600 	call	5360 <print_repeat>
    5838:	da001017 	ldw	r8,64(sp)
    583c:	103fef1e 	bne	r2,zero,57fc <_gp+0xffff75f0>
    5840:	8221883a 	add	r16,r16,r8
    5844:	88800117 	ldw	r2,4(r17)
    5848:	b00f883a 	mov	r7,r22
    584c:	b80d883a 	mov	r6,r23
    5850:	880b883a 	mov	r5,r17
    5854:	a009883a 	mov	r4,r20
    5858:	103ee83a 	callr	r2
    585c:	103fe71e 	bne	r2,zero,57fc <_gp+0xffff75f0>
    5860:	85a1883a 	add	r16,r16,r22
    5864:	e02d883a 	mov	r22,fp
    5868:	00001106 	br	58b0 <___vfprintf_internal_r+0x4e4>
    586c:	00c00044 	movi	r3,1
    5870:	04ffffc4 	movi	r19,-1
    5874:	d8000e15 	stw	zero,56(sp)
    5878:	d8c00a15 	stw	r3,40(sp)
    587c:	05400284 	movi	r21,10
    5880:	9825883a 	mov	r18,r19
    5884:	d8000c15 	stw	zero,48(sp)
    5888:	d8000b15 	stw	zero,44(sp)
    588c:	182f883a 	mov	r23,r3
    5890:	00000806 	br	58b4 <___vfprintf_internal_r+0x4e8>
    5894:	ddc00b15 	stw	r23,44(sp)
    5898:	05c00084 	movi	r23,2
    589c:	00000506 	br	58b4 <___vfprintf_internal_r+0x4e8>
    58a0:	00c00044 	movi	r3,1
    58a4:	d8c00c15 	stw	r3,48(sp)
    58a8:	05c000c4 	movi	r23,3
    58ac:	00000106 	br	58b4 <___vfprintf_internal_r+0x4e8>
    58b0:	002f883a 	mov	r23,zero
    58b4:	d8c00f17 	ldw	r3,60(sp)
    58b8:	18c00044 	addi	r3,r3,1
    58bc:	d8c00f15 	stw	r3,60(sp)
    58c0:	003edc06 	br	5434 <_gp+0xffff7228>
    58c4:	8005883a 	mov	r2,r16
    58c8:	dfc01a17 	ldw	ra,104(sp)
    58cc:	df001917 	ldw	fp,100(sp)
    58d0:	ddc01817 	ldw	r23,96(sp)
    58d4:	dd801717 	ldw	r22,92(sp)
    58d8:	dd401617 	ldw	r21,88(sp)
    58dc:	dd001517 	ldw	r20,84(sp)
    58e0:	dcc01417 	ldw	r19,80(sp)
    58e4:	dc801317 	ldw	r18,76(sp)
    58e8:	dc401217 	ldw	r17,72(sp)
    58ec:	dc001117 	ldw	r16,68(sp)
    58f0:	dec01b04 	addi	sp,sp,108
    58f4:	f800283a 	ret

000058f8 <__vfprintf_internal>:
    58f8:	00800034 	movhi	r2,0
    58fc:	10989804 	addi	r2,r2,25184
    5900:	300f883a 	mov	r7,r6
    5904:	280d883a 	mov	r6,r5
    5908:	200b883a 	mov	r5,r4
    590c:	11000017 	ldw	r4,0(r2)
    5910:	00053cc1 	jmpi	53cc <___vfprintf_internal_r>

00005914 <__sfvwrite_small_dev>:
    5914:	2880000b 	ldhu	r2,0(r5)
    5918:	1080020c 	andi	r2,r2,8
    591c:	10002126 	beq	r2,zero,59a4 <__sfvwrite_small_dev+0x90>
    5920:	2880008f 	ldh	r2,2(r5)
    5924:	defffa04 	addi	sp,sp,-24
    5928:	dc000015 	stw	r16,0(sp)
    592c:	dfc00515 	stw	ra,20(sp)
    5930:	dd000415 	stw	r20,16(sp)
    5934:	dcc00315 	stw	r19,12(sp)
    5938:	dc800215 	stw	r18,8(sp)
    593c:	dc400115 	stw	r17,4(sp)
    5940:	2821883a 	mov	r16,r5
    5944:	10001216 	blt	r2,zero,5990 <__sfvwrite_small_dev+0x7c>
    5948:	2027883a 	mov	r19,r4
    594c:	3025883a 	mov	r18,r6
    5950:	3823883a 	mov	r17,r7
    5954:	05010004 	movi	r20,1024
    5958:	04400b0e 	bge	zero,r17,5988 <__sfvwrite_small_dev+0x74>
    595c:	880f883a 	mov	r7,r17
    5960:	a440010e 	bge	r20,r17,5968 <__sfvwrite_small_dev+0x54>
    5964:	01c10004 	movi	r7,1024
    5968:	8140008f 	ldh	r5,2(r16)
    596c:	900d883a 	mov	r6,r18
    5970:	9809883a 	mov	r4,r19
    5974:	0005c340 	call	5c34 <_write_r>
    5978:	0080050e 	bge	zero,r2,5990 <__sfvwrite_small_dev+0x7c>
    597c:	88a3c83a 	sub	r17,r17,r2
    5980:	90a5883a 	add	r18,r18,r2
    5984:	003ff406 	br	5958 <_gp+0xffff774c>
    5988:	0005883a 	mov	r2,zero
    598c:	00000706 	br	59ac <__sfvwrite_small_dev+0x98>
    5990:	8080000b 	ldhu	r2,0(r16)
    5994:	10801014 	ori	r2,r2,64
    5998:	8080000d 	sth	r2,0(r16)
    599c:	00bfffc4 	movi	r2,-1
    59a0:	00000206 	br	59ac <__sfvwrite_small_dev+0x98>
    59a4:	00bfffc4 	movi	r2,-1
    59a8:	f800283a 	ret
    59ac:	dfc00517 	ldw	ra,20(sp)
    59b0:	dd000417 	ldw	r20,16(sp)
    59b4:	dcc00317 	ldw	r19,12(sp)
    59b8:	dc800217 	ldw	r18,8(sp)
    59bc:	dc400117 	ldw	r17,4(sp)
    59c0:	dc000017 	ldw	r16,0(sp)
    59c4:	dec00604 	addi	sp,sp,24
    59c8:	f800283a 	ret

000059cc <__gettzinfo>:
    59cc:	00800034 	movhi	r2,0
    59d0:	10983b04 	addi	r2,r2,24812
    59d4:	f800283a 	ret

000059d8 <gmtime_r>:
    59d8:	defff904 	addi	sp,sp,-28
    59dc:	dc400115 	stw	r17,4(sp)
    59e0:	24400017 	ldw	r17,0(r4)
    59e4:	dc800215 	stw	r18,8(sp)
    59e8:	2825883a 	mov	r18,r5
    59ec:	01400074 	movhi	r5,1
    59f0:	8809883a 	mov	r4,r17
    59f4:	29546004 	addi	r5,r5,20864
    59f8:	dfc00615 	stw	ra,24(sp)
    59fc:	dc000015 	stw	r16,0(sp)
    5a00:	dd400515 	stw	r21,20(sp)
    5a04:	dd000415 	stw	r20,16(sp)
    5a08:	dcc00315 	stw	r19,12(sp)
    5a0c:	00048100 	call	4810 <__divsi3>
    5a10:	01400074 	movhi	r5,1
    5a14:	8809883a 	mov	r4,r17
    5a18:	29546004 	addi	r5,r5,20864
    5a1c:	1021883a 	mov	r16,r2
    5a20:	00048940 	call	4894 <__modsi3>
    5a24:	1023883a 	mov	r17,r2
    5a28:	10000216 	blt	r2,zero,5a34 <gmtime_r+0x5c>
    5a2c:	84353dc4 	addi	r16,r16,-11017
    5a30:	00000406 	br	5a44 <gmtime_r+0x6c>
    5a34:	00800074 	movhi	r2,1
    5a38:	10946004 	addi	r2,r2,20864
    5a3c:	88a3883a 	add	r17,r17,r2
    5a40:	84353d84 	addi	r16,r16,-11018
    5a44:	8809883a 	mov	r4,r17
    5a48:	01438404 	movi	r5,3600
    5a4c:	00048100 	call	4810 <__divsi3>
    5a50:	8809883a 	mov	r4,r17
    5a54:	01438404 	movi	r5,3600
    5a58:	90800215 	stw	r2,8(r18)
    5a5c:	00048940 	call	4894 <__modsi3>
    5a60:	01400f04 	movi	r5,60
    5a64:	1009883a 	mov	r4,r2
    5a68:	1023883a 	mov	r17,r2
    5a6c:	00048100 	call	4810 <__divsi3>
    5a70:	01400f04 	movi	r5,60
    5a74:	8809883a 	mov	r4,r17
    5a78:	90800115 	stw	r2,4(r18)
    5a7c:	00048940 	call	4894 <__modsi3>
    5a80:	90800015 	stw	r2,0(r18)
    5a84:	014001c4 	movi	r5,7
    5a88:	810000c4 	addi	r4,r16,3
    5a8c:	00048940 	call	4894 <__modsi3>
    5a90:	1000010e 	bge	r2,zero,5a98 <gmtime_r+0xc0>
    5a94:	108001c4 	addi	r2,r2,7
    5a98:	90800615 	stw	r2,24(r18)
    5a9c:	8000050e 	bge	r16,zero,5ab4 <gmtime_r+0xdc>
    5aa0:	008000b4 	movhi	r2,2
    5aa4:	108eac44 	addi	r2,r2,15025
    5aa8:	80a1883a 	add	r16,r16,r2
    5aac:	057fffc4 	movi	r21,-1
    5ab0:	00000106 	br	5ab8 <gmtime_r+0xe0>
    5ab4:	002b883a 	mov	r21,zero
    5ab8:	0163ab14 	movui	r5,36524
    5abc:	8009883a 	mov	r4,r16
    5ac0:	00048100 	call	4810 <__divsi3>
    5ac4:	1023883a 	mov	r17,r2
    5ac8:	00800104 	movi	r2,4
    5acc:	8880011e 	bne	r17,r2,5ad4 <gmtime_r+0xfc>
    5ad0:	044000c4 	movi	r17,3
    5ad4:	017ffff4 	movhi	r5,65535
    5ad8:	295c5504 	addi	r5,r5,29012
    5adc:	8809883a 	mov	r4,r17
    5ae0:	0005c8c0 	call	5c8c <__mulsi3>
    5ae4:	1421883a 	add	r16,r2,r16
    5ae8:	8009883a 	mov	r4,r16
    5aec:	01416d44 	movi	r5,1461
    5af0:	00048100 	call	4810 <__divsi3>
    5af4:	017e92c4 	movi	r5,-1461
    5af8:	1009883a 	mov	r4,r2
    5afc:	1029883a 	mov	r20,r2
    5b00:	0005c8c0 	call	5c8c <__mulsi3>
    5b04:	1421883a 	add	r16,r2,r16
    5b08:	01405b44 	movi	r5,365
    5b0c:	8009883a 	mov	r4,r16
    5b10:	00048100 	call	4810 <__divsi3>
    5b14:	1027883a 	mov	r19,r2
    5b18:	00800104 	movi	r2,4
    5b1c:	9880011e 	bne	r19,r2,5b24 <gmtime_r+0x14c>
    5b20:	04c000c4 	movi	r19,3
    5b24:	017fa4c4 	movi	r5,-365
    5b28:	9809883a 	mov	r4,r19
    5b2c:	0005c8c0 	call	5c8c <__mulsi3>
    5b30:	a809883a 	mov	r4,r21
    5b34:	01406404 	movi	r5,400
    5b38:	1421883a 	add	r16,r2,r16
    5b3c:	0005c8c0 	call	5c8c <__mulsi3>
    5b40:	01401904 	movi	r5,100
    5b44:	8809883a 	mov	r4,r17
    5b48:	1541f404 	addi	r21,r2,2000
    5b4c:	0005c8c0 	call	5c8c <__mulsi3>
    5b50:	a507883a 	add	r3,r20,r20
    5b54:	a885883a 	add	r2,r21,r2
    5b58:	18c7883a 	add	r3,r3,r3
    5b5c:	10c5883a 	add	r2,r2,r3
    5b60:	14c5883a 	add	r2,r2,r19
    5b64:	9800031e 	bne	r19,zero,5b74 <gmtime_r+0x19c>
    5b68:	a000041e 	bne	r20,zero,5b7c <gmtime_r+0x1a4>
    5b6c:	8823003a 	cmpeq	r17,r17,zero
    5b70:	00000306 	br	5b80 <gmtime_r+0x1a8>
    5b74:	0023883a 	mov	r17,zero
    5b78:	00000106 	br	5b80 <gmtime_r+0x1a8>
    5b7c:	04400044 	movi	r17,1
    5b80:	80c00ec4 	addi	r3,r16,59
    5b84:	1c47883a 	add	r3,r3,r17
    5b88:	89005b04 	addi	r4,r17,364
    5b8c:	20c0030e 	bge	r4,r3,5b9c <gmtime_r+0x1c4>
    5b90:	8c405b44 	addi	r17,r17,365
    5b94:	1c47c83a 	sub	r3,r3,r17
    5b98:	10800044 	addi	r2,r2,1
    5b9c:	10be2504 	addi	r2,r2,-1900
    5ba0:	01000034 	movhi	r4,0
    5ba4:	90800515 	stw	r2,20(r18)
    5ba8:	90c00715 	stw	r3,28(r18)
    5bac:	00800084 	movi	r2,2
    5bb0:	21182e04 	addi	r4,r4,24760
    5bb4:	014002c4 	movi	r5,11
    5bb8:	1087883a 	add	r3,r2,r2
    5bbc:	18c7883a 	add	r3,r3,r3
    5bc0:	1907883a 	add	r3,r3,r4
    5bc4:	18c00017 	ldw	r3,0(r3)
    5bc8:	80c00516 	blt	r16,r3,5be0 <gmtime_r+0x208>
    5bcc:	10800044 	addi	r2,r2,1
    5bd0:	80e1c83a 	sub	r16,r16,r3
    5bd4:	28bff80e 	bge	r5,r2,5bb8 <_gp+0xffff79ac>
    5bd8:	0005883a 	mov	r2,zero
    5bdc:	003ff606 	br	5bb8 <_gp+0xffff79ac>
    5be0:	90800415 	stw	r2,16(r18)
    5be4:	84000044 	addi	r16,r16,1
    5be8:	9005883a 	mov	r2,r18
    5bec:	94000315 	stw	r16,12(r18)
    5bf0:	90000815 	stw	zero,32(r18)
    5bf4:	dfc00617 	ldw	ra,24(sp)
    5bf8:	dd400517 	ldw	r21,20(sp)
    5bfc:	dd000417 	ldw	r20,16(sp)
    5c00:	dcc00317 	ldw	r19,12(sp)
    5c04:	dc800217 	ldw	r18,8(sp)
    5c08:	dc400117 	ldw	r17,4(sp)
    5c0c:	dc000017 	ldw	r16,0(sp)
    5c10:	dec00704 	addi	sp,sp,28
    5c14:	f800283a 	ret

00005c18 <strlen>:
    5c18:	2005883a 	mov	r2,r4
    5c1c:	10c00007 	ldb	r3,0(r2)
    5c20:	18000226 	beq	r3,zero,5c2c <strlen+0x14>
    5c24:	10800044 	addi	r2,r2,1
    5c28:	003ffc06 	br	5c1c <_gp+0xffff7a10>
    5c2c:	1105c83a 	sub	r2,r2,r4
    5c30:	f800283a 	ret

00005c34 <_write_r>:
    5c34:	defffd04 	addi	sp,sp,-12
    5c38:	dc000015 	stw	r16,0(sp)
    5c3c:	04000034 	movhi	r16,0
    5c40:	dc400115 	stw	r17,4(sp)
    5c44:	84190d04 	addi	r16,r16,25652
    5c48:	2023883a 	mov	r17,r4
    5c4c:	2809883a 	mov	r4,r5
    5c50:	300b883a 	mov	r5,r6
    5c54:	380d883a 	mov	r6,r7
    5c58:	dfc00215 	stw	ra,8(sp)
    5c5c:	80000015 	stw	zero,0(r16)
    5c60:	0005f380 	call	5f38 <write>
    5c64:	00ffffc4 	movi	r3,-1
    5c68:	10c0031e 	bne	r2,r3,5c78 <_write_r+0x44>
    5c6c:	80c00017 	ldw	r3,0(r16)
    5c70:	18000126 	beq	r3,zero,5c78 <_write_r+0x44>
    5c74:	88c00015 	stw	r3,0(r17)
    5c78:	dfc00217 	ldw	ra,8(sp)
    5c7c:	dc400117 	ldw	r17,4(sp)
    5c80:	dc000017 	ldw	r16,0(sp)
    5c84:	dec00304 	addi	sp,sp,12
    5c88:	f800283a 	ret

00005c8c <__mulsi3>:
    5c8c:	0005883a 	mov	r2,zero
    5c90:	20000726 	beq	r4,zero,5cb0 <__mulsi3+0x24>
    5c94:	20c0004c 	andi	r3,r4,1
    5c98:	2008d07a 	srli	r4,r4,1
    5c9c:	18000126 	beq	r3,zero,5ca4 <__mulsi3+0x18>
    5ca0:	1145883a 	add	r2,r2,r5
    5ca4:	294b883a 	add	r5,r5,r5
    5ca8:	203ffa1e 	bne	r4,zero,5c94 <_gp+0xffff7a88>
    5cac:	f800283a 	ret
    5cb0:	f800283a 	ret

00005cb4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5cb4:	0005d401 	jmpi	5d40 <alt_iic_isr_register>

00005cb8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5cb8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5cbc:	00bfff84 	movi	r2,-2
    5cc0:	2084703a 	and	r2,r4,r2
    5cc4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    5cc8:	00c00044 	movi	r3,1
    5ccc:	d0a08b17 	ldw	r2,-32212(gp)
    5cd0:	194a983a 	sll	r5,r3,r5
    5cd4:	288ab03a 	or	r5,r5,r2
    5cd8:	d1608b15 	stw	r5,-32212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5cdc:	d0a08b17 	ldw	r2,-32212(gp)
    5ce0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ce4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    5ce8:	0005883a 	mov	r2,zero
    5cec:	f800283a 	ret

00005cf0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5cf0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5cf4:	00bfff84 	movi	r2,-2
    5cf8:	2084703a 	and	r2,r4,r2
    5cfc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    5d00:	00ffff84 	movi	r3,-2
    5d04:	d0a08b17 	ldw	r2,-32212(gp)
    5d08:	194a183a 	rol	r5,r3,r5
    5d0c:	288a703a 	and	r5,r5,r2
    5d10:	d1608b15 	stw	r5,-32212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5d14:	d0a08b17 	ldw	r2,-32212(gp)
    5d18:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d1c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    5d20:	0005883a 	mov	r2,zero
    5d24:	f800283a 	ret

00005d28 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5d28:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5d2c:	00800044 	movi	r2,1
    5d30:	1144983a 	sll	r2,r2,r5
    5d34:	10c4703a 	and	r2,r2,r3
}
    5d38:	1004c03a 	cmpne	r2,r2,zero
    5d3c:	f800283a 	ret

00005d40 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5d40:	00c007c4 	movi	r3,31
    5d44:	19401616 	blt	r3,r5,5da0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5d48:	defffe04 	addi	sp,sp,-8
    5d4c:	dfc00115 	stw	ra,4(sp)
    5d50:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d54:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d58:	00ffff84 	movi	r3,-2
    5d5c:	80c6703a 	and	r3,r16,r3
    5d60:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    5d64:	280490fa 	slli	r2,r5,3
    5d68:	00c00034 	movhi	r3,0
    5d6c:	18d92904 	addi	r3,r3,25764
    5d70:	1885883a 	add	r2,r3,r2
    5d74:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    5d78:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5d7c:	30000226 	beq	r6,zero,5d88 <alt_iic_isr_register+0x48>
    5d80:	0005cb80 	call	5cb8 <alt_ic_irq_enable>
    5d84:	00000106 	br	5d8c <alt_iic_isr_register+0x4c>
    5d88:	0005cf00 	call	5cf0 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d8c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    5d90:	dfc00117 	ldw	ra,4(sp)
    5d94:	dc000017 	ldw	r16,0(sp)
    5d98:	dec00204 	addi	sp,sp,8
    5d9c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    5da0:	00bffa84 	movi	r2,-22
    5da4:	f800283a 	ret

00005da8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5da8:	deffff04 	addi	sp,sp,-4
    5dac:	01000034 	movhi	r4,0
    5db0:	01400034 	movhi	r5,0
    5db4:	dfc00015 	stw	ra,0(sp)
    5db8:	21183b04 	addi	r4,r4,24812
    5dbc:	29589e04 	addi	r5,r5,25208

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5dc0:	2140061e 	bne	r4,r5,5ddc <alt_load+0x34>
    5dc4:	01000034 	movhi	r4,0
    5dc8:	01400034 	movhi	r5,0
    5dcc:	21100804 	addi	r4,r4,16416
    5dd0:	29500804 	addi	r5,r5,16416
    5dd4:	2140121e 	bne	r4,r5,5e20 <alt_load+0x78>
    5dd8:	00000b06 	br	5e08 <alt_load+0x60>
    5ddc:	00c00034 	movhi	r3,0
    5de0:	18d89e04 	addi	r3,r3,25208
    5de4:	1907c83a 	sub	r3,r3,r4
    5de8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5dec:	10fff526 	beq	r2,r3,5dc4 <_gp+0xffff7bb8>
    {
      *to++ = *from++;
    5df0:	114f883a 	add	r7,r2,r5
    5df4:	39c00017 	ldw	r7,0(r7)
    5df8:	110d883a 	add	r6,r2,r4
    5dfc:	10800104 	addi	r2,r2,4
    5e00:	31c00015 	stw	r7,0(r6)
    5e04:	003ff906 	br	5dec <_gp+0xffff7be0>
    5e08:	01000034 	movhi	r4,0
    5e0c:	01400034 	movhi	r5,0
    5e10:	21181d04 	addi	r4,r4,24692
    5e14:	29581d04 	addi	r5,r5,24692

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5e18:	2140101e 	bne	r4,r5,5e5c <alt_load+0xb4>
    5e1c:	00000b06 	br	5e4c <alt_load+0xa4>
    5e20:	00c00034 	movhi	r3,0
    5e24:	18d06004 	addi	r3,r3,16768
    5e28:	1907c83a 	sub	r3,r3,r4
    5e2c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5e30:	10fff526 	beq	r2,r3,5e08 <_gp+0xffff7bfc>
    {
      *to++ = *from++;
    5e34:	114f883a 	add	r7,r2,r5
    5e38:	39c00017 	ldw	r7,0(r7)
    5e3c:	110d883a 	add	r6,r2,r4
    5e40:	10800104 	addi	r2,r2,4
    5e44:	31c00015 	stw	r7,0(r6)
    5e48:	003ff906 	br	5e30 <_gp+0xffff7c24>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5e4c:	0005ff00 	call	5ff0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5e50:	dfc00017 	ldw	ra,0(sp)
    5e54:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5e58:	0005ff41 	jmpi	5ff4 <alt_icache_flush_all>
    5e5c:	00c00034 	movhi	r3,0
    5e60:	18d83b04 	addi	r3,r3,24812
    5e64:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5e68:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5e6c:	18bff726 	beq	r3,r2,5e4c <_gp+0xffff7c40>
    {
      *to++ = *from++;
    5e70:	114f883a 	add	r7,r2,r5
    5e74:	39c00017 	ldw	r7,0(r7)
    5e78:	110d883a 	add	r6,r2,r4
    5e7c:	10800104 	addi	r2,r2,4
    5e80:	31c00015 	stw	r7,0(r6)
    5e84:	003ff906 	br	5e6c <_gp+0xffff7c60>

00005e88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5e88:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5e8c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5e90:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5e94:	0005f980 	call	5f98 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5e98:	0005fb80 	call	5fb8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5e9c:	d1a08c17 	ldw	r6,-32208(gp)
    5ea0:	d1608d17 	ldw	r5,-32204(gp)
    5ea4:	d1208e17 	ldw	r4,-32200(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5ea8:	dfc00017 	ldw	ra,0(sp)
    5eac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5eb0:	00047841 	jmpi	4784 <main>

00005eb4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    5eb4:	defffe04 	addi	sp,sp,-8
    5eb8:	dc000015 	stw	r16,0(sp)
    5ebc:	dfc00115 	stw	ra,4(sp)
    5ec0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5ec4:	0005c180 	call	5c18 <strlen>
    5ec8:	01000034 	movhi	r4,0
    5ecc:	000f883a 	mov	r7,zero
    5ed0:	100d883a 	mov	r6,r2
    5ed4:	800b883a 	mov	r5,r16
    5ed8:	21189c04 	addi	r4,r4,25200
#else
    return fputs(str, stdout);
#endif
#endif
}
    5edc:	dfc00117 	ldw	ra,4(sp)
    5ee0:	dc000017 	ldw	r16,0(sp)
    5ee4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5ee8:	0005fbc1 	jmpi	5fbc <altera_avalon_jtag_uart_write>

00005eec <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5eec:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ef0:	00bfff84 	movi	r2,-2
    5ef4:	2884703a 	and	r2,r5,r2
    5ef8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5efc:	d0a01717 	ldw	r2,-32676(gp)
    5f00:	00ffff04 	movi	r3,-4
    5f04:	108000c4 	addi	r2,r2,3
    5f08:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5f0c:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5f10:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5f14:	1109883a 	add	r4,r2,r4
    5f18:	18dc0004 	addi	r3,r3,28672
    5f1c:	1900032e 	bgeu	r3,r4,5f2c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f20:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5f24:	00bfffc4 	movi	r2,-1
    5f28:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    5f2c:	d1201715 	stw	r4,-32676(gp)
    5f30:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    5f34:	f800283a 	ret

00005f38 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5f38:	00800044 	movi	r2,1
    5f3c:	20800226 	beq	r4,r2,5f48 <write+0x10>
    5f40:	00800084 	movi	r2,2
    5f44:	2080041e 	bne	r4,r2,5f58 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5f48:	01000034 	movhi	r4,0
    5f4c:	000f883a 	mov	r7,zero
    5f50:	21189c04 	addi	r4,r4,25200
    5f54:	0005fbc1 	jmpi	5fbc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5f58:	d0a01a17 	ldw	r2,-32664(gp)
    5f5c:	10000926 	beq	r2,zero,5f84 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5f60:	deffff04 	addi	sp,sp,-4
    5f64:	dfc00015 	stw	ra,0(sp)
    5f68:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5f6c:	00c01444 	movi	r3,81
    5f70:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5f74:	00bfffc4 	movi	r2,-1
    5f78:	dfc00017 	ldw	ra,0(sp)
    5f7c:	dec00104 	addi	sp,sp,4
    5f80:	f800283a 	ret
    5f84:	d0a08a04 	addi	r2,gp,-32216
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5f88:	00c01444 	movi	r3,81
    5f8c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5f90:	00bfffc4 	movi	r2,-1
    5f94:	f800283a 	ret

00005f98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5f98:	deffff04 	addi	sp,sp,-4
    5f9c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
    5fa0:	000606c0 	call	606c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5fa4:	00800044 	movi	r2,1
    5fa8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5fac:	dfc00017 	ldw	ra,0(sp)
    5fb0:	dec00104 	addi	sp,sp,4
    5fb4:	f800283a 	ret

00005fb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5fb8:	f800283a 	ret

00005fbc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    5fbc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5fc0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    5fc4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5fc8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5fcc:	2980072e 	bgeu	r5,r6,5fec <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5fd0:	38c00037 	ldwio	r3,0(r7)
    5fd4:	18ffffec 	andhi	r3,r3,65535
    5fd8:	183ffc26 	beq	r3,zero,5fcc <_gp+0xffff7dc0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5fdc:	28c00007 	ldb	r3,0(r5)
    5fe0:	20c00035 	stwio	r3,0(r4)
    5fe4:	29400044 	addi	r5,r5,1
    5fe8:	003ff806 	br	5fcc <_gp+0xffff7dc0>

  return count;
}
    5fec:	f800283a 	ret

00005ff0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5ff0:	f800283a 	ret

00005ff4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5ff4:	f800283a 	ret

00005ff8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    5ff8:	213ffe84 	addi	r4,r4,-6
    5ffc:	008003c4 	movi	r2,15
    6000:	11001636 	bltu	r2,r4,605c <alt_exception_cause_generated_bad_addr+0x64>
    6004:	200890ba 	slli	r4,r4,2
    6008:	00800034 	movhi	r2,0
    600c:	10980704 	addi	r2,r2,24604
    6010:	2089883a 	add	r4,r4,r2
    6014:	20800017 	ldw	r2,0(r4)
    6018:	1000683a 	jmp	r2
    601c:	00006064 	muli	zero,zero,385
    6020:	00006064 	muli	zero,zero,385
    6024:	0000605c 	xori	zero,zero,385
    6028:	0000605c 	xori	zero,zero,385
    602c:	0000605c 	xori	zero,zero,385
    6030:	00006064 	muli	zero,zero,385
    6034:	0000605c 	xori	zero,zero,385
    6038:	0000605c 	xori	zero,zero,385
    603c:	00006064 	muli	zero,zero,385
    6040:	00006064 	muli	zero,zero,385
    6044:	0000605c 	xori	zero,zero,385
    6048:	00006064 	muli	zero,zero,385
    604c:	0000605c 	xori	zero,zero,385
    6050:	0000605c 	xori	zero,zero,385
    6054:	0000605c 	xori	zero,zero,385
    6058:	00006064 	muli	zero,zero,385
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    605c:	0005883a 	mov	r2,zero
    6060:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    6064:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    6068:	f800283a 	ret

0000606c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    606c:	000170fa 	wrctl	ienable,zero
    6070:	f800283a 	ret
