
MyAlarmClock.elf:     file format elf32-littlenios2
MyAlarmClock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001ee8 memsz 0x00001ee8 flags r-x
    LOAD off    0x00002f08 vaddr 0x00005f08 paddr 0x0000610c align 2**12
         filesz 0x00000204 memsz 0x00000204 flags rw-
    LOAD off    0x00003310 vaddr 0x00006310 paddr 0x00006310 align 2**12
         filesz 0x00000000 memsz 0x000001b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001d10  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  00005e90  00005e90  00002e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000204  00005f08  0000610c  00002f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001b0  00006310  00006310  00003310  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  000064c0  000064c0  0000310c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005e8  00000000  00000000  00003130  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000081ca  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ea7  00000000  00000000  0000b8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003384  00000000  00000000  0000e789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000934  00000000  00000000  00011b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002061  00000000  00000000  00012444  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000210c  00000000  00000000  000144a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000165b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003c0  00000000  00000000  000165c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00018822  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00018825  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001882d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001882e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001882f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001883a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00018845  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  00018850  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000f  00000000  00000000  0001885c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004d65  00000000  00000000  0001886b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00069a0c  00000000  00000000  0001d5d0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00005e90 l    d  .rodata	00000000 .rodata
00005f08 l    d  .rwdata	00000000 .rwdata
00006310 l    d  .bss	00000000 .bss
000064c0 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MyAlarmClock_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00006080 l     O .rwdata	00000008 CSWTCH.60
000044d4 l     F .text	000001a8 buttons_handler
000047b0 l     F .text	0000020c timer_handler
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 lcltime.c
00000000 l    df *ABS*	00000000 lcltime_r.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 month_lengths.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 tzcalc_limits.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 gettzinfo.c
00005f08 l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 gmtime_r.c
00000000 l    df *ABS*	00000000 impure.c
00005f48 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005a08 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000060fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00006364 g     O .bss	00000004 alt_instruction_exception_handler
000052e4 g     F .text	0000001c putchar
00005c58 g     F .text	0000002c alt_main
000063c0 g     O .bss	00000100 alt_irq
0000610c g       *ABS*	00000000 __flash_rwdata_start
00006368 g     O .bss	0000002c alarm_timestamp
00006100 g     O .rwdata	00000004 UART
000064c0 g       *ABS*	00000000 __alt_heap_start
000049e8 g     F .text	00000050 print_data
0000634c g     O .bss	00000004 _daylight
00004280 g     F .text	00000070 alt_up_rs232_read_fd
0000631c g     O .bss	00000004 actual_time
00005c84 g     F .text	00000038 alt_putstr
00005e3c g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
000060a0 g     O .rwdata	00000004 hex0
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006350 g     O .bss	00000004 errno
00006394 g     O .bss	0000002c timestamp
0000635c g     O .bss	00000004 alt_argv
0000e080 g       *ABS*	00000000 _gp
000060c0 g     O .rwdata	00000004 btn_direction_ptr
00006320 g     O .bss	00000004 edge_capture_time
00006028 g     O .rwdata	00000030 alt_fd_list
000052dc g     F .text	00000008 _putchar_r
00005a10 g     F .text	00000074 alt_find_dev
00005078 g     F .text	00000028 memcpy
000060c4 g     O .rwdata	00000004 timer_edge_cap_ptr
00004234 g     F .text	0000004c alt_up_rs232_read_data
00005dc8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00006088 g     O .rwdata	00000001 button_data
00006324 g     O .bss	00000004 decs
00005050 g     F .text	00000014 malloc
00004be4 g     F .text	00000064 .hidden __udivsi3
000060c8 g     O .rwdata	00000004 timer_mask_ptr
000060b0 g     O .rwdata	00000004 uart_status_ptr
00004000 g       *ABS*	00000000 __alt_mem_ram
00005300 g     F .text	00000050 _sbrk_r
000060e4 g     O .rwdata	00000004 alt_max_fd
00004210 g     F .text	0000000c alt_up_rs232_check_parity
000060bc g     O .rwdata	00000004 btn_mask_ptr
000060dc g     O .rwdata	00000004 _global_impure_ptr
000064c0 g       *ABS*	00000000 __bss_end
00005b10 g     F .text	00000068 alt_iic_isr_register
0000560c g     F .text	00000240 gmtime_r
00005af8 g     F .text	00000018 alt_ic_irq_enabled
00006318 g     O .bss	00000004 alarm
00006354 g     O .bss	00000004 alt_irq_active
00006328 g     O .bss	00000004 new_time
000040fc g     F .exceptions	00000060 alt_irq_handler
00006058 g     O .rwdata	00000028 alt_dev_null
00006098 g     O .rwdata	00000004 hex2
000055fc g     F .text	00000004 __tz_unlock
00005dc0 g     F .text	00000004 alt_dcache_flush_all
0000610c g       *ABS*	00000000 __ram_rwdata_end
000060e8 g     O .rwdata	00000008 alt_dev_list
00005d08 g     F .text	00000060 write
000058a0 g     F .text	00000058 _putc_r
000060d4 g     O .rwdata	00000008 _tzname
00005f08 g       *ABS*	00000000 __ram_rodata_end
00006104 g     O .rwdata	00000004 jtag_uart_0
000042f0 g     F .text	0000002c alt_up_rs232_write_fd
0000632c g     O .bss	00000004 edge_capture_button
00004c48 g     F .text	00000058 .hidden __umodsi3
000064c0 g       *ABS*	00000000 end
000060a4 g     O .rwdata	00000004 leds
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
0000609c g     O .rwdata	00000004 hex1
00007000 g       *ABS*	00000000 __alt_stack_pointer
00005d8c g     F .text	00000034 altera_avalon_jtag_uart_write
000050a0 g     F .text	000000e4 _free_r
00004180 g     F .text	0000003c _start
00005d88 g     F .text	00000004 alt_sys_init
00004200 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
0000608c g     O .rwdata	00000004 hex5
00004ca0 g     F .text	00000028 .hidden __mulsi3
00005f08 g       *ABS*	00000000 __ram_rwdata_start
00005e90 g       *ABS*	00000000 __ram_rodata_start
00005e98 g     O .rodata	00000060 __month_lengths
00004404 g     F .text	000000a8 convert_to_7seg
000060cc g     O .rwdata	00000004 timer_control_ptr
000060d0 g     O .rwdata	00000004 timer_status_ptr
00005e44 g     F .text	00000030 memcmp
000064c0 g       *ABS*	00000000 __alt_stack_base
000041d4 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00005cbc g     F .text	0000004c sbrk
000044ac g     F .text	00000028 get_time_diff
000055f8 g     F .text	00000004 __tz_lock
000058f8 g     F .text	000000b8 __sfvwrite_small_dev
00006310 g       *ABS*	00000000 __bss_start
00004cc8 g     F .text	00000050 localtime
00004a38 g     F .text	000000b4 main
00006358 g     O .bss	00000004 alt_envp
000060a8 g     O .rwdata	00000004 buttons
00007000 g       *ABS*	00000000 __alt_heap_limit
00005184 g     F .text	00000158 _malloc_r
000060ac g     O .rwdata	00000004 uart_control_ptr
00006108 g     O .rwdata	00000004 alt_errno
0000584c g     F .text	00000054 putc
00004aec g     F .text	00000084 .hidden __divsi3
00005e90 g       *ABS*	00000000 __flash_rodata_start
000046f8 g     F .text	000000b8 show_time
000060b4 g     O .rwdata	00000004 uart_rxdata_ptr
0000431c g     F .text	00000008 alt_up_rs232_open_dev
00006094 g     O .rwdata	00000004 hex3
00005d68 g     F .text	00000020 alt_irq_init
000059b0 g     F .text	00000058 _write_r
000060e0 g     O .rwdata	00000004 _impure_ptr
00006360 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
000060f0 g     O .rwdata	00000008 alt_fs_list
000041bc g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0000421c g     F .text	00000018 alt_up_rs232_write_data
00006348 g     O .bss	00000004 _timezone
00004d18 g     F .text	00000338 localtime_r
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005a84 g     F .text	00000004 alt_ic_isr_register
00006312 g     O .bss	00000002 pos_ptr
0000610c g       *ABS*	00000000 _edata
00004324 g     F .text	000000e0 uart_handler
000064c0 g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
00006330 g     O .bss	00000005 rcv_data
00005ac0 g     F .text	00000038 alt_ic_irq_disable
00004b70 g     F .text	00000074 .hidden __modsi3
00007000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00006310 g     O .bss	00000001 data_pos
0000400c g       .entry	00000000 _exit
00006338 g     O .bss	00000004 edge_capture_uart
000060b8 g     O .rwdata	00000004 btn_edge_ptr
00005e74 g     F .text	0000001c strlen
00006090 g     O .rwdata	00000004 hex4
00006340 g     O .bss	00000004 __malloc_sbrk_start
0000633c g     O .bss	00000004 units
00005dc4 g     F .text	00000004 alt_icache_flush_all
000060f8 g     O .rwdata	00000004 alt_priority_mask
00006344 g     O .bss	00000004 __malloc_free_list
00005a88 g     F .text	00000038 alt_ic_irq_enable
00005350 g     F .text	000002a8 __tzcalc_limits
00006314 g     O .bss	00000002 status
000041f0 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
000049bc g     F .text	0000002c concatenate_nums
0000467c g     F .text	0000007c split_time
00005b78 g     F .text	000000e0 alt_load
00005600 g     F .text	0000000c __gettzinfo
00005064 g     F .text	00000014 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	8418f004 	addi	r16,r16,25536

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <_gp+0xffff6094>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <_gp+0xffff609c>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a0b917 	ldw	r2,-32028(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b82014 	ori	gp,gp,57472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	1098c414 	ori	r2,r2,25360

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d93014 	ori	r3,r3,25792

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_gp+0xffff6124>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	0005b780 	call	5b78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	0005c580 	call	5c58 <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <_gp+0xffff6138>

000041bc <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base);
    41bc:	20800a17 	ldw	r2,40(r4)
    41c0:	10800104 	addi	r2,r2,4
    41c4:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    41c8:	18c00054 	ori	r3,r3,1
    41cc:	10c00035 	stwio	r3,0(r2)
    41d0:	f800283a 	ret

000041d4 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base);
    41d4:	20800a17 	ldw	r2,40(r4)
    41d8:	10800104 	addi	r2,r2,4
    41dc:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    41e0:	00ffff84 	movi	r3,-2
    41e4:	20c6703a 	and	r3,r4,r3
    41e8:	10c00035 	stwio	r3,0(r2)
    41ec:	f800283a 	ret

000041f0 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2);
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base);
    41f0:	20800a17 	ldw	r2,40(r4)
    41f4:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    41f8:	10bfffcc 	andi	r2,r2,65535
    41fc:	f800283a 	ret

00004200 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base);
    4200:	20800a17 	ldw	r2,40(r4)
    4204:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    4208:	1004d43a 	srli	r2,r2,16
    420c:	f800283a 	ret

00004210 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
    4210:	200495ba 	slli	r2,r4,22
}
    4214:	1005d7fa 	srai	r2,r2,31
    4218:	f800283a 	ret

0000421c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    421c:	20800a17 	ldw	r2,40(r4)
    4220:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    4224:	29403fcc 	andi	r5,r5,255
    4228:	11400035 	stwio	r5,0(r2)
	return 0;
}
    422c:	0005883a 	mov	r2,zero
    4230:	f800283a 	ret

00004234 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4234:	20800a17 	ldw	r2,40(r4)
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    4238:	defffd04 	addi	sp,sp,-12
    423c:	dc400115 	stw	r17,4(sp)
    4240:	3023883a 	mov	r17,r6
    4244:	dfc00215 	stw	ra,8(sp)
    4248:	dc000015 	stw	r16,0(sp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    424c:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    4250:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    4254:	8009883a 	mov	r4,r16
    4258:	00042100 	call	4210 <alt_up_rs232_check_parity>
    425c:	88800005 	stb	r2,0(r17)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    4260:	80a0000c 	andi	r2,r16,32768
    4264:	1004d3fa 	srli	r2,r2,15
}
    4268:	10bfffc4 	addi	r2,r2,-1
    426c:	dfc00217 	ldw	ra,8(sp)
    4270:	dc400117 	ldw	r17,4(sp)
    4274:	dc000017 	ldw	r16,0(sp)
    4278:	dec00304 	addi	sp,sp,12
    427c:	f800283a 	ret

00004280 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    4280:	defff904 	addi	sp,sp,-28
    4284:	dcc00415 	stw	r19,16(sp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    4288:	24c00017 	ldw	r19,0(r4)
	*parity_error = alt_up_rs232_check_parity(data_reg);
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    428c:	dc800315 	stw	r18,12(sp)
    4290:	dc000115 	stw	r16,4(sp)
    4294:	dfc00615 	stw	ra,24(sp)
    4298:	dd000515 	stw	r20,20(sp)
    429c:	dc400215 	stw	r17,8(sp)
    42a0:	2821883a 	mov	r16,r5
    42a4:	29a5883a 	add	r18,r5,r6
    42a8:	2c23c83a 	sub	r17,r5,r16
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    42ac:	2c800726 	beq	r5,r18,42cc <alt_up_rs232_read_fd+0x4c>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    42b0:	d80d883a 	mov	r6,sp
    42b4:	9809883a 	mov	r4,r19
    42b8:	2d000044 	addi	r20,r5,1
    42bc:	00042340 	call	4234 <alt_up_rs232_read_data>
    42c0:	1000021e 	bne	r2,zero,42cc <alt_up_rs232_read_fd+0x4c>
    42c4:	a00b883a 	mov	r5,r20
    42c8:	003ff706 	br	42a8 <_gp+0xffff6228>
			count++;
		else
			break;
	}
	return count;
}
    42cc:	8805883a 	mov	r2,r17
    42d0:	dfc00617 	ldw	ra,24(sp)
    42d4:	dd000517 	ldw	r20,20(sp)
    42d8:	dcc00417 	ldw	r19,16(sp)
    42dc:	dc800317 	ldw	r18,12(sp)
    42e0:	dc400217 	ldw	r17,8(sp)
    42e4:	dc000117 	ldw	r16,4(sp)
    42e8:	dec00704 	addi	sp,sp,28
    42ec:	f800283a 	ret

000042f0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    42f0:	21c00017 	ldw	r7,0(r4)
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    42f4:	3005883a 	mov	r2,r6
    42f8:	298d883a 	add	r6,r5,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    42fc:	29800626 	beq	r5,r6,4318 <alt_up_rs232_write_fd+0x28>
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4300:	39000a17 	ldw	r4,40(r7)
    4304:	20c00037 	ldwio	r3,0(r4)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    4308:	28c00003 	ldbu	r3,0(r5)
    430c:	20c00035 	stwio	r3,0(r4)
	while(len--)
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
		{
			count++;
			ptr++;
    4310:	29400044 	addi	r5,r5,1
    4314:	003ff906 	br	42fc <_gp+0xffff627c>
		}
		else
			break;
	}
	return count;
}
    4318:	f800283a 	ret

0000431c <alt_up_rs232_open_dev>:
{
  // find the device from the device list
  // (see altera_hal/HAL/inc/priv/alt_file.h
  // and altera_hal/HAL/src/alt_find_dev.c
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    431c:	d1601a04 	addi	r5,gp,-32664
    4320:	0005a101 	jmpi	5a10 <alt_find_dev>

00004324 <uart_handler>:

void uart_handler(void* context)
{
	unsigned int flag = 0;

	if (*uart_rxdata_ptr == 's') {
    4324:	d0a00d17 	ldw	r2,-32716(gp)
    4328:	00c01cc4 	movi	r3,115
    432c:	10800003 	ldbu	r2,0(r2)
    4330:	10803fcc 	andi	r2,r2,255
    4334:	1080201c 	xori	r2,r2,128
    4338:	10bfe004 	addi	r2,r2,-128
    433c:	10c03026 	beq	r2,r3,4400 <uart_handler+0xdc>
	*hex0 = units;
}

int concatenate_nums(int a, int b)
{
	return (a * 10) + b;
    4340:	d120ac47 	ldb	r4,-32079(gp)
	}
	printf("\n");
}

void uart_handler(void* context)
{
    4344:	defffd04 	addi	sp,sp,-12
	*hex0 = units;
}

int concatenate_nums(int a, int b)
{
	return (a * 10) + b;
    4348:	01400284 	movi	r5,10
    434c:	213ff404 	addi	r4,r4,-48
	}
	printf("\n");
}

void uart_handler(void* context)
{
    4350:	dfc00215 	stw	ra,8(sp)
    4354:	dc400115 	stw	r17,4(sp)
    4358:	dc000015 	stw	r16,0(sp)
			rcv_data[data_pos] = *uart_rxdata_ptr;
			data_pos++;
		}
	}
	else {
		data_pos = 0;
    435c:	d020a405 	stb	zero,-32112(gp)
	*hex0 = units;
}

int concatenate_nums(int a, int b)
{
	return (a * 10) + b;
    4360:	0004ca00 	call	4ca0 <__mulsi3>
    4364:	d120acc7 	ldb	r4,-32077(gp)
    4368:	d460ac87 	ldb	r17,-32078(gp)
    436c:	01400284 	movi	r5,10
    4370:	213ff404 	addi	r4,r4,-48
    4374:	8c7ff404 	addi	r17,r17,-48
    4378:	1463883a 	add	r17,r2,r17
    437c:	0004ca00 	call	4ca0 <__mulsi3>
    4380:	d420ad07 	ldb	r16,-32076(gp)
	else {
		data_pos = 0;
		int res_h = concatenate_nums(rcv_data[1] - '0', rcv_data[2] - '0');
		int res_m = concatenate_nums(rcv_data[3] - '0', rcv_data[4] - '0');

		if (rcv_data[0] == 't')
    4384:	00c01d04 	movi	r3,116
	*hex0 = units;
}

int concatenate_nums(int a, int b)
{
	return (a * 10) + b;
    4388:	843ff404 	addi	r16,r16,-48
    438c:	1421883a 	add	r16,r2,r16
	else {
		data_pos = 0;
		int res_h = concatenate_nums(rcv_data[1] - '0', rcv_data[2] - '0');
		int res_m = concatenate_nums(rcv_data[3] - '0', rcv_data[4] - '0');

		if (rcv_data[0] == 't')
    4390:	d0a0ac07 	ldb	r2,-32080(gp)
    4394:	10c00b1e 	bne	r2,r3,43c4 <uart_handler+0xa0>
		{
			actual_time = res_h * 3600 + res_m * 60;
    4398:	8809883a 	mov	r4,r17
    439c:	01438404 	movi	r5,3600
    43a0:	0004ca00 	call	4ca0 <__mulsi3>
    43a4:	01400f04 	movi	r5,60
    43a8:	8009883a 	mov	r4,r16
    43ac:	1023883a 	mov	r17,r2
    43b0:	0004ca00 	call	4ca0 <__mulsi3>
    43b4:	8885883a 	add	r2,r17,r2
    43b8:	d0a0a715 	stw	r2,-32100(gp)
			new_time = actual_time;
    43bc:	d0a0aa15 	stw	r2,-32088(gp)
    43c0:	00000b06 	br	43f0 <uart_handler+0xcc>
		}
		else if (rcv_data[0] == 'a')
    43c4:	00c01844 	movi	r3,97
    43c8:	10c0091e 	bne	r2,r3,43f0 <uart_handler+0xcc>
		{
			alarm = res_h * 3600 + res_m * 60;
    43cc:	8809883a 	mov	r4,r17
    43d0:	01438404 	movi	r5,3600
    43d4:	0004ca00 	call	4ca0 <__mulsi3>
    43d8:	01400f04 	movi	r5,60
    43dc:	8009883a 	mov	r4,r16
    43e0:	1023883a 	mov	r17,r2
    43e4:	0004ca00 	call	4ca0 <__mulsi3>
    43e8:	8885883a 	add	r2,r17,r2
    43ec:	d0a0a615 	stw	r2,-32104(gp)
		}
	}
}
    43f0:	dfc00217 	ldw	ra,8(sp)
    43f4:	dc400117 	ldw	r17,4(sp)
    43f8:	dc000017 	ldw	r16,0(sp)
    43fc:	dec00304 	addi	sp,sp,12
    4400:	f800283a 	ret

00004404 <convert_to_7seg>:
unsigned char data_pos = 0;

char convert_to_7seg(int num)
{
	unsigned int result = 0;
	if (num == 0) { result = 0x7F - 0x40; }
    4404:	20001426 	beq	r4,zero,4458 <convert_to_7seg+0x54>
	else if (num == 1) { result = 0x7F - 0x79; }
    4408:	00800044 	movi	r2,1
    440c:	20801426 	beq	r4,r2,4460 <convert_to_7seg+0x5c>
	else if (num == 2) { result = 0x7F - 0x24; }
    4410:	00800084 	movi	r2,2
    4414:	20801426 	beq	r4,r2,4468 <convert_to_7seg+0x64>
	else if (num == 3) { result = 0x7F - 0x30; }
    4418:	008000c4 	movi	r2,3
    441c:	20801426 	beq	r4,r2,4470 <convert_to_7seg+0x6c>
	else if (num == 4) { result = 0x7F - 0x19; }
    4420:	00800104 	movi	r2,4
    4424:	20801426 	beq	r4,r2,4478 <convert_to_7seg+0x74>
	else if (num == 5) { result = 0x7F - 0x12; }
    4428:	00800144 	movi	r2,5
    442c:	20801426 	beq	r4,r2,4480 <convert_to_7seg+0x7c>
	else if (num == 6) { result = 0x7F - 0x02; }
    4430:	00800184 	movi	r2,6
    4434:	20801426 	beq	r4,r2,4488 <convert_to_7seg+0x84>
	else if (num == 7) { result = 0x7F - 0x78; }
    4438:	008001c4 	movi	r2,7
    443c:	20801426 	beq	r4,r2,4490 <convert_to_7seg+0x8c>
	else if (num == 8) { result = 0x7F - 0x00; }
    4440:	00800204 	movi	r2,8
    4444:	20801426 	beq	r4,r2,4498 <convert_to_7seg+0x94>
	else if (num == 9) { result = 0x7F - 0x10; }
    4448:	00800244 	movi	r2,9
    444c:	2080141e 	bne	r4,r2,44a0 <convert_to_7seg+0x9c>
    4450:	00801bc4 	movi	r2,111
    4454:	00001306 	br	44a4 <convert_to_7seg+0xa0>
unsigned char data_pos = 0;

char convert_to_7seg(int num)
{
	unsigned int result = 0;
	if (num == 0) { result = 0x7F - 0x40; }
    4458:	00800fc4 	movi	r2,63
    445c:	00001106 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 1) { result = 0x7F - 0x79; }
    4460:	00800184 	movi	r2,6
    4464:	00000f06 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 2) { result = 0x7F - 0x24; }
    4468:	008016c4 	movi	r2,91
    446c:	00000d06 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 3) { result = 0x7F - 0x30; }
    4470:	008013c4 	movi	r2,79
    4474:	00000b06 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 4) { result = 0x7F - 0x19; }
    4478:	00801984 	movi	r2,102
    447c:	00000906 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 5) { result = 0x7F - 0x12; }
    4480:	00801b44 	movi	r2,109
    4484:	00000706 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 6) { result = 0x7F - 0x02; }
    4488:	00801f44 	movi	r2,125
    448c:	00000506 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 7) { result = 0x7F - 0x78; }
    4490:	2005883a 	mov	r2,r4
    4494:	00000306 	br	44a4 <convert_to_7seg+0xa0>
	else if (num == 8) { result = 0x7F - 0x00; }
    4498:	00801fc4 	movi	r2,127
    449c:	00000106 	br	44a4 <convert_to_7seg+0xa0>
char rcv_data[MSG_DATA];
unsigned char data_pos = 0;

char convert_to_7seg(int num)
{
	unsigned int result = 0;
    44a0:	0005883a 	mov	r2,zero
	else if (num == 7) { result = 0x7F - 0x78; }
	else if (num == 8) { result = 0x7F - 0x00; }
	else if (num == 9) { result = 0x7F - 0x10; }

	return ~result;
}
    44a4:	0084303a 	nor	r2,zero,r2
    44a8:	f800283a 	ret

000044ac <get_time_diff>:

int get_time_diff()
{
    44ac:	d0a0a48b 	ldhu	r2,-32110(gp)
    44b0:	00c000c4 	movi	r3,3
    44b4:	18800536 	bltu	r3,r2,44cc <get_time_diff+0x20>
    44b8:	d0e00004 	addi	r3,gp,-32768
    44bc:	1085883a 	add	r2,r2,r2
    44c0:	1885883a 	add	r2,r3,r2
    44c4:	1080000b 	ldhu	r2,0(r2)
    44c8:	f800283a 	ret
	switch (pos_ptr){
    44cc:	0005883a 	mov	r2,zero
			break;
		default:
			return 0;
			break;
		}
}
    44d0:	f800283a 	ret

000044d4 <buttons_handler>:
}

static void buttons_handler(void * context)
{
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 0xC);
    44d4:	00a43314 	movui	r2,37068
    44d8:	10800017 	ldw	r2,0(r2)
		}
	}
}

static void buttons_handler(void * context)
{
    44dc:	defffc04 	addi	sp,sp,-16
    44e0:	dc800215 	stw	r18,8(sp)
    44e4:	dc400115 	stw	r17,4(sp)
    44e8:	dc000015 	stw	r16,0(sp)
    44ec:	dfc00315 	stw	ra,12(sp)
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 0xC);
    44f0:	20800015 	stw	r2,0(r4)
	*btn_mask_ptr = 0xF;
    44f4:	d0a00f17 	ldw	r2,-32708(gp)
    44f8:	00c003c4 	movi	r3,15
	*btn_edge_ptr = *edge_capture_ptr;

	switch (*edge_capture_ptr) {
    44fc:	04800084 	movi	r18,2

static void buttons_handler(void * context)
{
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 0xC);
	*btn_mask_ptr = 0xF;
    4500:	10c00005 	stb	r3,0(r2)
	*btn_edge_ptr = *edge_capture_ptr;
    4504:	20c00017 	ldw	r3,0(r4)
    4508:	d0a00e17 	ldw	r2,-32712(gp)
		}
	}
}

static void buttons_handler(void * context)
{
    450c:	2023883a 	mov	r17,r4
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BUTTONS_BASE + 0xC);
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = *edge_capture_ptr;
    4510:	10c00005 	stb	r3,0(r2)

	switch (*edge_capture_ptr) {
    4514:	24000017 	ldw	r16,0(r4)
    4518:	84802f26 	beq	r16,r18,45d8 <buttons_handler+0x104>
    451c:	94000316 	blt	r18,r16,452c <buttons_handler+0x58>
    4520:	00800044 	movi	r2,1
    4524:	80803b26 	beq	r16,r2,4614 <buttons_handler+0x140>
    4528:	00004e06 	br	4664 <buttons_handler+0x190>
    452c:	01000104 	movi	r4,4
    4530:	81001b26 	beq	r16,r4,45a0 <buttons_handler+0xcc>
    4534:	00800204 	movi	r2,8
    4538:	80804a1e 	bne	r16,r2,4664 <buttons_handler+0x190>

		/* Change mode */
		case 8:
			if(button_data != *edge_capture_ptr)
    453c:	88800017 	ldw	r2,0(r17)
    4540:	d0e00207 	ldb	r3,-32760(gp)
    4544:	18804726 	beq	r3,r2,4664 <buttons_handler+0x190>
			{
				if (status == 0)  				 	/* Show time */
    4548:	d0a0a50f 	ldh	r2,-32108(gp)
    454c:	00c00044 	movi	r3,1
    4550:	1000061e 	bne	r2,zero,456c <buttons_handler+0x98>
				{
					status = 1;
					new_time = actual_time;
    4554:	d0a0a717 	ldw	r2,-32100(gp)
		case 8:
			if(button_data != *edge_capture_ptr)
			{
				if (status == 0)  				 	/* Show time */
				{
					status = 1;
    4558:	d0e0a50d 	sth	r3,-32108(gp)
					new_time = actual_time;
    455c:	d0a0aa15 	stw	r2,-32088(gp)
					*leds = 2;
    4560:	d0a00917 	ldw	r2,-32732(gp)
    4564:	14800005 	stb	r18,0(r2)
    4568:	00003e06 	br	4664 <buttons_handler+0x190>
				}
				else if (status == 1)  				/* Set time */
    456c:	01400044 	movi	r5,1
    4570:	1140061e 	bne	r2,r5,458c <buttons_handler+0xb8>
				{
					status = 2;
					actual_time = new_time;
    4574:	d0a0aa17 	ldw	r2,-32088(gp)
					new_time = actual_time;
					*leds = 2;
				}
				else if (status == 1)  				/* Set time */
				{
					status = 2;
    4578:	d4a0a50d 	sth	r18,-32108(gp)
					actual_time = new_time;
    457c:	d0a0a715 	stw	r2,-32100(gp)
					*leds = 4;
    4580:	d0a00917 	ldw	r2,-32732(gp)
    4584:	11000005 	stb	r4,0(r2)
    4588:	00003606 	br	4664 <buttons_handler+0x190>
				}
				else if (status == 2)  				/* Set alarm */
    458c:	1480351e 	bne	r2,r18,4664 <buttons_handler+0x190>
				{
					status = 0;
					*leds = 1;
    4590:	d0a00917 	ldw	r2,-32732(gp)
					actual_time = new_time;
					*leds = 4;
				}
				else if (status == 2)  				/* Set alarm */
				{
					status = 0;
    4594:	d020a50d 	sth	zero,-32108(gp)
					*leds = 1;
    4598:	10c00005 	stb	r3,0(r2)
    459c:	00003106 	br	4664 <buttons_handler+0x190>
			break;

		/* Change pointer position in 7segs */
		case 4:

			if(button_data != *edge_capture_ptr)
    45a0:	88800017 	ldw	r2,0(r17)
    45a4:	d0e00207 	ldb	r3,-32760(gp)
    45a8:	18802e26 	beq	r3,r2,4664 <buttons_handler+0x190>
			{
				pos_ptr++;
    45ac:	d0a0a48b 	ldhu	r2,-32110(gp)
				if (pos_ptr > 3) { pos_ptr = 0; }
    45b0:	010000c4 	movi	r4,3
		/* Change pointer position in 7segs */
		case 4:

			if(button_data != *edge_capture_ptr)
			{
				pos_ptr++;
    45b4:	10800044 	addi	r2,r2,1
				if (pos_ptr > 3) { pos_ptr = 0; }
    45b8:	10ffffcc 	andi	r3,r2,65535
    45bc:	18e0001c 	xori	r3,r3,32768
    45c0:	18e00004 	addi	r3,r3,-32768
    45c4:	20c00216 	blt	r4,r3,45d0 <buttons_handler+0xfc>
		/* Change pointer position in 7segs */
		case 4:

			if(button_data != *edge_capture_ptr)
			{
				pos_ptr++;
    45c8:	d0a0a48d 	sth	r2,-32110(gp)
    45cc:	00002506 	br	4664 <buttons_handler+0x190>
				if (pos_ptr > 3) { pos_ptr = 0; }
    45d0:	d020a48d 	sth	zero,-32110(gp)
    45d4:	00002306 	br	4664 <buttons_handler+0x190>
			}
			break;

		/* Increase digit in 7seg  */
		case 2:
			if(button_data != *edge_capture_ptr){
    45d8:	20800017 	ldw	r2,0(r4)
    45dc:	d0e00207 	ldb	r3,-32760(gp)
    45e0:	18802026 	beq	r3,r2,4664 <buttons_handler+0x190>
				if (status == 1)
    45e4:	d0a0a50f 	ldh	r2,-32108(gp)
    45e8:	00c00044 	movi	r3,1
    45ec:	10c0041e 	bne	r2,r3,4600 <buttons_handler+0x12c>
				{
					new_time += get_time_diff();
    45f0:	00044ac0 	call	44ac <get_time_diff>
    45f4:	d0e0aa17 	ldw	r3,-32088(gp)
    45f8:	1885883a 	add	r2,r3,r2
    45fc:	00001106 	br	4644 <buttons_handler+0x170>
				}
				else if (status == 2)
    4600:	1400181e 	bne	r2,r16,4664 <buttons_handler+0x190>
				{
					alarm += get_time_diff();
    4604:	00044ac0 	call	44ac <get_time_diff>
    4608:	d0e0a617 	ldw	r3,-32104(gp)
    460c:	1885883a 	add	r2,r3,r2
    4610:	00001306 	br	4660 <buttons_handler+0x18c>
			}
			break;

		/* Decrease digit in 7seg  */
		case 1:
			alt_putstr("DOWN");
    4614:	01000034 	movhi	r4,0
    4618:	2117a404 	addi	r4,r4,24208
    461c:	0005c840 	call	5c84 <alt_putstr>
			if(button_data != *edge_capture_ptr) {
    4620:	88800017 	ldw	r2,0(r17)
    4624:	d0e00207 	ldb	r3,-32760(gp)
    4628:	18800e26 	beq	r3,r2,4664 <buttons_handler+0x190>
				if (status == 1)
    462c:	d0a0a50f 	ldh	r2,-32108(gp)
    4630:	1400061e 	bne	r2,r16,464c <buttons_handler+0x178>
				{
					if(new_time != 0) (new_time -= get_time_diff());
    4634:	d420aa17 	ldw	r16,-32088(gp)
    4638:	80000a26 	beq	r16,zero,4664 <buttons_handler+0x190>
    463c:	00044ac0 	call	44ac <get_time_diff>
    4640:	8085c83a 	sub	r2,r16,r2
    4644:	d0a0aa15 	stw	r2,-32088(gp)
    4648:	00000606 	br	4664 <buttons_handler+0x190>
				}
				else if (status == 2)
    464c:	1480051e 	bne	r2,r18,4664 <buttons_handler+0x190>
				{
					if(alarm != 0) (alarm -= get_time_diff());
    4650:	d420a617 	ldw	r16,-32104(gp)
    4654:	80000326 	beq	r16,zero,4664 <buttons_handler+0x190>
    4658:	00044ac0 	call	44ac <get_time_diff>
    465c:	8085c83a 	sub	r2,r16,r2
    4660:	d0a0a615 	stw	r2,-32104(gp)
			break;

		default:
			break;
	}
}
    4664:	dfc00317 	ldw	ra,12(sp)
    4668:	dc800217 	ldw	r18,8(sp)
    466c:	dc400117 	ldw	r17,4(sp)
    4670:	dc000017 	ldw	r16,0(sp)
    4674:	dec00404 	addi	sp,sp,16
    4678:	f800283a 	ret

0000467c <split_time>:
			break;
		}
}

void split_time(const int digit, int* dec, int* unit)
{
    467c:	defffc04 	addi	sp,sp,-16
    4680:	dc800215 	stw	r18,8(sp)
    4684:	2825883a 	mov	r18,r5
	*dec = convert_to_7seg(digit / 10);
    4688:	01400284 	movi	r5,10
			break;
		}
}

void split_time(const int digit, int* dec, int* unit)
{
    468c:	dfc00315 	stw	ra,12(sp)
    4690:	dc400115 	stw	r17,4(sp)
    4694:	dc000015 	stw	r16,0(sp)
    4698:	2023883a 	mov	r17,r4
    469c:	3021883a 	mov	r16,r6
	*dec = convert_to_7seg(digit / 10);
    46a0:	0004aec0 	call	4aec <__divsi3>
    46a4:	1009883a 	mov	r4,r2
    46a8:	00044040 	call	4404 <convert_to_7seg>
    46ac:	10803fcc 	andi	r2,r2,255
    46b0:	1080201c 	xori	r2,r2,128
    46b4:	10bfe004 	addi	r2,r2,-128
	*unit = convert_to_7seg(digit % 10);
    46b8:	01400284 	movi	r5,10
    46bc:	8809883a 	mov	r4,r17
		}
}

void split_time(const int digit, int* dec, int* unit)
{
	*dec = convert_to_7seg(digit / 10);
    46c0:	90800015 	stw	r2,0(r18)
	*unit = convert_to_7seg(digit % 10);
    46c4:	0004b700 	call	4b70 <__modsi3>
    46c8:	1009883a 	mov	r4,r2
    46cc:	00044040 	call	4404 <convert_to_7seg>
    46d0:	10803fcc 	andi	r2,r2,255
    46d4:	1080201c 	xori	r2,r2,128
    46d8:	10bfe004 	addi	r2,r2,-128
    46dc:	80800015 	stw	r2,0(r16)
}
    46e0:	dfc00317 	ldw	ra,12(sp)
    46e4:	dc800217 	ldw	r18,8(sp)
    46e8:	dc400117 	ldw	r17,4(sp)
    46ec:	dc000017 	ldw	r16,0(sp)
    46f0:	dec00404 	addi	sp,sp,16
    46f4:	f800283a 	ret

000046f8 <show_time>:

void show_time(int hours, int minutes, int seconds)
{
    46f8:	defffb04 	addi	sp,sp,-20
    46fc:	dc400115 	stw	r17,4(sp)
    4700:	dc000015 	stw	r16,0(sp)
	split_time(hours, &decs, &units);
    4704:	d460af04 	addi	r17,gp,-32068
    4708:	d420a904 	addi	r16,gp,-32092
	*dec = convert_to_7seg(digit / 10);
	*unit = convert_to_7seg(digit % 10);
}

void show_time(int hours, int minutes, int seconds)
{
    470c:	dcc00315 	stw	r19,12(sp)
    4710:	dc800215 	stw	r18,8(sp)
    4714:	2827883a 	mov	r19,r5
    4718:	3025883a 	mov	r18,r6
	split_time(hours, &decs, &units);
    471c:	800b883a 	mov	r5,r16
    4720:	880d883a 	mov	r6,r17
	*dec = convert_to_7seg(digit / 10);
	*unit = convert_to_7seg(digit % 10);
}

void show_time(int hours, int minutes, int seconds)
{
    4724:	dfc00415 	stw	ra,16(sp)
	split_time(hours, &decs, &units);
    4728:	000467c0 	call	467c <split_time>
	*hex5 = decs;
    472c:	d0e0a917 	ldw	r3,-32092(gp)
    4730:	d0a00317 	ldw	r2,-32756(gp)
	*hex4 = units;
	split_time(minutes, &decs, &units);
    4734:	880d883a 	mov	r6,r17
    4738:	800b883a 	mov	r5,r16
}

void show_time(int hours, int minutes, int seconds)
{
	split_time(hours, &decs, &units);
	*hex5 = decs;
    473c:	10c00005 	stb	r3,0(r2)
	*hex4 = units;
    4740:	d0e0af17 	ldw	r3,-32068(gp)
    4744:	d0a00417 	ldw	r2,-32752(gp)
	split_time(minutes, &decs, &units);
    4748:	9809883a 	mov	r4,r19

void show_time(int hours, int minutes, int seconds)
{
	split_time(hours, &decs, &units);
	*hex5 = decs;
	*hex4 = units;
    474c:	10c00005 	stb	r3,0(r2)
	split_time(minutes, &decs, &units);
    4750:	000467c0 	call	467c <split_time>
	*hex3 = decs;
    4754:	d0e0a917 	ldw	r3,-32092(gp)
    4758:	d0a00517 	ldw	r2,-32748(gp)
	*hex2 = units;
	split_time(seconds, &decs, &units);
    475c:	880d883a 	mov	r6,r17
    4760:	800b883a 	mov	r5,r16
{
	split_time(hours, &decs, &units);
	*hex5 = decs;
	*hex4 = units;
	split_time(minutes, &decs, &units);
	*hex3 = decs;
    4764:	10c00005 	stb	r3,0(r2)
	*hex2 = units;
    4768:	d0e0af17 	ldw	r3,-32068(gp)
    476c:	d0a00617 	ldw	r2,-32744(gp)
	split_time(seconds, &decs, &units);
    4770:	9009883a 	mov	r4,r18
	split_time(hours, &decs, &units);
	*hex5 = decs;
	*hex4 = units;
	split_time(minutes, &decs, &units);
	*hex3 = decs;
	*hex2 = units;
    4774:	10c00005 	stb	r3,0(r2)
	split_time(seconds, &decs, &units);
    4778:	000467c0 	call	467c <split_time>
	*hex1 = decs;
    477c:	d0e0a917 	ldw	r3,-32092(gp)
    4780:	d0a00717 	ldw	r2,-32740(gp)
    4784:	10c00005 	stb	r3,0(r2)
	*hex0 = units;
    4788:	d0e0af17 	ldw	r3,-32068(gp)
    478c:	d0a00817 	ldw	r2,-32736(gp)
    4790:	10c00005 	stb	r3,0(r2)
}
    4794:	dfc00417 	ldw	ra,16(sp)
    4798:	dcc00317 	ldw	r19,12(sp)
    479c:	dc800217 	ldw	r18,8(sp)
    47a0:	dc400117 	ldw	r17,4(sp)
    47a4:	dc000017 	ldw	r16,0(sp)
    47a8:	dec00504 	addi	sp,sp,20
    47ac:	f800283a 	ret

000047b0 <timer_handler>:
}

/********************************************************************/
static void timer_handler(void * context)
{
	*timer_status_ptr = 0;
    47b0:	d0a01417 	ldw	r2,-32688(gp)
	return (a * 10) + b;
}

/********************************************************************/
static void timer_handler(void * context)
{
    47b4:	defffd04 	addi	sp,sp,-12
    47b8:	dc000015 	stw	r16,0(sp)
    47bc:	dfc00215 	stw	ra,8(sp)
    47c0:	dc400115 	stw	r17,4(sp)
	*timer_status_ptr = 0;
    47c4:	10000005 	stb	zero,0(r2)
	actual_time++;
    47c8:	d0a0a717 	ldw	r2,-32100(gp)
    47cc:	04000034 	movhi	r16,0
    47d0:	8418e504 	addi	r16,r16,25492
    47d4:	10800044 	addi	r2,r2,1
    47d8:	d0a0a715 	stw	r2,-32100(gp)

	/* Check actual time and check alarm */
	if (status == 0){
    47dc:	d0a0a50f 	ldh	r2,-32108(gp)
    47e0:	1000211e 	bne	r2,zero,4868 <timer_handler+0xb8>
		timestamp = *localtime(&actual_time);
    47e4:	d120a704 	addi	r4,gp,-32100
    47e8:	0004cc80 	call	4cc8 <localtime>
    47ec:	01800b04 	movi	r6,44
    47f0:	100b883a 	mov	r5,r2
    47f4:	8009883a 	mov	r4,r16
    47f8:	00050780 	call	5078 <memcpy>
		alarm_timestamp = *localtime(&alarm);
    47fc:	d120a604 	addi	r4,gp,-32104
    4800:	04400034 	movhi	r17,0
    4804:	0004cc80 	call	4cc8 <localtime>
    4808:	8c58da04 	addi	r17,r17,25448
    480c:	01800b04 	movi	r6,44
    4810:	100b883a 	mov	r5,r2
    4814:	8809883a 	mov	r4,r17
    4818:	00050780 	call	5078 <memcpy>
		show_time(timestamp.tm_hour, timestamp.tm_min, timestamp.tm_sec);
    481c:	81800017 	ldw	r6,0(r16)
    4820:	81400117 	ldw	r5,4(r16)
    4824:	81000217 	ldw	r4,8(r16)
    4828:	00046f80 	call	46f8 <show_time>
		if (timestamp.tm_sec % 2 == 0)
    482c:	80c00017 	ldw	r3,0(r16)
    4830:	d0a00917 	ldw	r2,-32732(gp)
    4834:	18c0004c 	andi	r3,r3,1
    4838:	1800091e 	bne	r3,zero,4860 <timer_handler+0xb0>
		{
			if (timestamp.tm_hour == alarm_timestamp.tm_hour && timestamp.tm_min == alarm_timestamp.tm_min){
    483c:	81000217 	ldw	r4,8(r16)
    4840:	88c00217 	ldw	r3,8(r17)
    4844:	20c0061e 	bne	r4,r3,4860 <timer_handler+0xb0>
    4848:	81000117 	ldw	r4,4(r16)
    484c:	88c00117 	ldw	r3,4(r17)
    4850:	20c0031e 	bne	r4,r3,4860 <timer_handler+0xb0>
				*leds = 0xAA;
    4854:	00ffea84 	movi	r3,-86
    4858:	10c00005 	stb	r3,0(r2)
    485c:	00001606 	br	48b8 <timer_handler+0x108>
			}
			else{
				*leds = 0;
			}
		}
		else { *leds = 0; }
    4860:	10000005 	stb	zero,0(r2)
    4864:	00001406 	br	48b8 <timer_handler+0x108>
	}

	/* New time */
	else if (status == 1)
    4868:	00c00044 	movi	r3,1
    486c:	10c00a1e 	bne	r2,r3,4898 <timer_handler+0xe8>
	{
		timestamp = *localtime(&new_time);
    4870:	d120aa04 	addi	r4,gp,-32088
    4874:	0004cc80 	call	4cc8 <localtime>
    4878:	01800b04 	movi	r6,44
    487c:	100b883a 	mov	r5,r2
    4880:	8009883a 	mov	r4,r16
    4884:	00050780 	call	5078 <memcpy>
		new_time++;
    4888:	d0a0aa17 	ldw	r2,-32088(gp)
    488c:	10800044 	addi	r2,r2,1
    4890:	d0a0aa15 	stw	r2,-32088(gp)
    4894:	00000806 	br	48b8 <timer_handler+0x108>
	}

	/* Set alarm in 7seg */
	else if (status == 2)
    4898:	00c00084 	movi	r3,2
    489c:	10c0061e 	bne	r2,r3,48b8 <timer_handler+0x108>
	{
		timestamp = *localtime(&alarm);
    48a0:	d120a604 	addi	r4,gp,-32104
    48a4:	0004cc80 	call	4cc8 <localtime>
    48a8:	01800b04 	movi	r6,44
    48ac:	100b883a 	mov	r5,r2
    48b0:	8009883a 	mov	r4,r16
    48b4:	00050780 	call	5078 <memcpy>
	}

	alarm_timestamp = *localtime(&actual_time);
    48b8:	d120a704 	addi	r4,gp,-32100
    48bc:	0004cc80 	call	4cc8 <localtime>
    48c0:	00c00034 	movhi	r3,0
    48c4:	18d8da04 	addi	r3,r3,25448
    48c8:	1809883a 	mov	r4,r3
    48cc:	01800b04 	movi	r6,44
    48d0:	100b883a 	mov	r5,r2
    48d4:	00050780 	call	5078 <memcpy>
    48d8:	1007883a 	mov	r3,r2
	if(status == 0 || (status ==1  && timestamp.tm_sec % 2 == 0) ||
    48dc:	d0a0a50f 	ldh	r2,-32108(gp)
    48e0:	10000a26 	beq	r2,zero,490c <timer_handler+0x15c>
    48e4:	01000044 	movi	r4,1
    48e8:	1100031e 	bne	r2,r4,48f8 <timer_handler+0x148>
    48ec:	80800017 	ldw	r2,0(r16)
    48f0:	1104703a 	and	r2,r2,r4
    48f4:	00000406 	br	4908 <timer_handler+0x158>
    48f8:	01000084 	movi	r4,2
    48fc:	11000b1e 	bne	r2,r4,492c <timer_handler+0x17c>
		(status == 2 && alarm_timestamp.tm_sec % 2 == 0))
    4900:	18800017 	ldw	r2,0(r3)
    4904:	1080004c 	andi	r2,r2,1
    4908:	1000081e 	bne	r2,zero,492c <timer_handler+0x17c>
	{
		show_time(timestamp.tm_hour, timestamp.tm_min, timestamp.tm_sec);
    490c:	81800017 	ldw	r6,0(r16)
    4910:	81400117 	ldw	r5,4(r16)
    4914:	81000217 	ldw	r4,8(r16)
			break;
		default:
			break;
		}
	}
}
    4918:	dfc00217 	ldw	ra,8(sp)
    491c:	dc400117 	ldw	r17,4(sp)
    4920:	dc000017 	ldw	r16,0(sp)
    4924:	dec00304 	addi	sp,sp,12

	alarm_timestamp = *localtime(&actual_time);
	if(status == 0 || (status ==1  && timestamp.tm_sec % 2 == 0) ||
		(status == 2 && alarm_timestamp.tm_sec % 2 == 0))
	{
		show_time(timestamp.tm_hour, timestamp.tm_min, timestamp.tm_sec);
    4928:	00046f81 	jmpi	46f8 <show_time>
	}

	else {
		split_time(timestamp.tm_sec, &decs, &units);
    492c:	81000017 	ldw	r4,0(r16)
    4930:	d1a0af04 	addi	r6,gp,-32068
    4934:	d160a904 	addi	r5,gp,-32092
    4938:	000467c0 	call	467c <split_time>
		*hex1 = decs;
    493c:	d0e0a917 	ldw	r3,-32092(gp)
    4940:	d0a00717 	ldw	r2,-32740(gp)
    4944:	10c00005 	stb	r3,0(r2)
		*hex0 = units;
    4948:	d0e0af17 	ldw	r3,-32068(gp)
    494c:	d0a00817 	ldw	r2,-32736(gp)
    4950:	10c00005 	stb	r3,0(r2)

		switch (pos_ptr){
    4954:	d0a0a48f 	ldh	r2,-32110(gp)
    4958:	00c00044 	movi	r3,1
    495c:	10c00c26 	beq	r2,r3,4990 <timer_handler+0x1e0>
    4960:	18800416 	blt	r3,r2,4974 <timer_handler+0x1c4>
    4964:	1000101e 	bne	r2,zero,49a8 <timer_handler+0x1f8>
		case 0:
			*hex2 = BLINK_7SEG;
    4968:	00ffffc4 	movi	r3,-1
    496c:	d0a00617 	ldw	r2,-32744(gp)
    4970:	00000c06 	br	49a4 <timer_handler+0x1f4>
	else {
		split_time(timestamp.tm_sec, &decs, &units);
		*hex1 = decs;
		*hex0 = units;

		switch (pos_ptr){
    4974:	00c00084 	movi	r3,2
    4978:	10c00826 	beq	r2,r3,499c <timer_handler+0x1ec>
    497c:	00c000c4 	movi	r3,3
    4980:	10c0091e 	bne	r2,r3,49a8 <timer_handler+0x1f8>
			break;
		case 2:
			*hex4 = BLINK_7SEG;
			break;
		case 3:
			*hex5 = BLINK_7SEG;
    4984:	00ffffc4 	movi	r3,-1
    4988:	d0a00317 	ldw	r2,-32756(gp)
    498c:	00000506 	br	49a4 <timer_handler+0x1f4>
		switch (pos_ptr){
		case 0:
			*hex2 = BLINK_7SEG;
			break;
		case 1:
			*hex3 = BLINK_7SEG;
    4990:	00ffffc4 	movi	r3,-1
    4994:	d0a00517 	ldw	r2,-32748(gp)
    4998:	00000206 	br	49a4 <timer_handler+0x1f4>
			break;
		case 2:
			*hex4 = BLINK_7SEG;
    499c:	d0a00417 	ldw	r2,-32752(gp)
    49a0:	00ffffc4 	movi	r3,-1
			break;
		case 3:
			*hex5 = BLINK_7SEG;
    49a4:	10c00005 	stb	r3,0(r2)
			break;
		default:
			break;
		}
	}
}
    49a8:	dfc00217 	ldw	ra,8(sp)
    49ac:	dc400117 	ldw	r17,4(sp)
    49b0:	dc000017 	ldw	r16,0(sp)
    49b4:	dec00304 	addi	sp,sp,12
    49b8:	f800283a 	ret

000049bc <concatenate_nums>:
	*hex1 = decs;
	*hex0 = units;
}

int concatenate_nums(int a, int b)
{
    49bc:	defffe04 	addi	sp,sp,-8
    49c0:	dc000015 	stw	r16,0(sp)
    49c4:	2821883a 	mov	r16,r5
	return (a * 10) + b;
    49c8:	01400284 	movi	r5,10
	*hex1 = decs;
	*hex0 = units;
}

int concatenate_nums(int a, int b)
{
    49cc:	dfc00115 	stw	ra,4(sp)
	return (a * 10) + b;
    49d0:	0004ca00 	call	4ca0 <__mulsi3>
}
    49d4:	1405883a 	add	r2,r2,r16
    49d8:	dfc00117 	ldw	ra,4(sp)
    49dc:	dc000017 	ldw	r16,0(sp)
    49e0:	dec00204 	addi	sp,sp,8
    49e4:	f800283a 	ret

000049e8 <print_data>:
		default:
			break;
	}
}

void print_data() {
    49e8:	defffc04 	addi	sp,sp,-16
    49ec:	dc800215 	stw	r18,8(sp)
    49f0:	dc400115 	stw	r17,4(sp)
    49f4:	dc000015 	stw	r16,0(sp)
    49f8:	dfc00315 	stw	ra,12(sp)
	for (int i = 0; i < MSG_DATA; ++i) {
    49fc:	0021883a 	mov	r16,zero
		printf("%c", rcv_data[i]);
    4a00:	d4a0ac04 	addi	r18,gp,-32080
			break;
	}
}

void print_data() {
	for (int i = 0; i < MSG_DATA; ++i) {
    4a04:	04400144 	movi	r17,5
		printf("%c", rcv_data[i]);
    4a08:	8485883a 	add	r2,r16,r18
    4a0c:	11000007 	ldb	r4,0(r2)
			break;
	}
}

void print_data() {
	for (int i = 0; i < MSG_DATA; ++i) {
    4a10:	84000044 	addi	r16,r16,1
		printf("%c", rcv_data[i]);
    4a14:	00052e40 	call	52e4 <putchar>
			break;
	}
}

void print_data() {
	for (int i = 0; i < MSG_DATA; ++i) {
    4a18:	847ffb1e 	bne	r16,r17,4a08 <_gp+0xffff6988>
		printf("%c", rcv_data[i]);
	}
	printf("\n");
    4a1c:	01000284 	movi	r4,10
}
    4a20:	dfc00317 	ldw	ra,12(sp)
    4a24:	dc800217 	ldw	r18,8(sp)
    4a28:	dc400117 	ldw	r17,4(sp)
    4a2c:	dc000017 	ldw	r16,0(sp)
    4a30:	dec00404 	addi	sp,sp,16

void print_data() {
	for (int i = 0; i < MSG_DATA; ++i) {
		printf("%c", rcv_data[i]);
	}
	printf("\n");
    4a34:	00052e41 	jmpi	52e4 <putchar>

00004a38 <main>:
}

static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
    4a38:	d0a01217 	ldw	r2,-32696(gp)
}

/********************************************************************/

int main()
{
    4a3c:	defffd04 	addi	sp,sp,-12
    4a40:	dfc00215 	stw	ra,8(sp)
    4a44:	dc000115 	stw	r16,4(sp)
}

static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
    4a48:	00c00044 	movi	r3,1
    4a4c:	10c00005 	stb	r3,0(r2)
	*timer_edge_cap_ptr = 0xF;
    4a50:	d0a01117 	ldw	r2,-32700(gp)
    4a54:	040003c4 	movi	r16,15
	*timer_control_ptr = 7;
    4a58:	00c001c4 	movi	r3,7

static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
	*timer_edge_cap_ptr = 0xF;
    4a5c:	14000005 	stb	r16,0(r2)
	*timer_control_ptr = 7;
    4a60:	d0a01317 	ldw	r2,-32692(gp)
	*timer_status_ptr = 0;

	alt_ic_isr_register (TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
    4a64:	01800034 	movhi	r6,0
    4a68:	d1e0a804 	addi	r7,gp,-32096
static void init_timer()
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
	*timer_edge_cap_ptr = 0xF;
	*timer_control_ptr = 7;
    4a6c:	10c00005 	stb	r3,0(r2)
	*timer_status_ptr = 0;
    4a70:	d0a01417 	ldw	r2,-32688(gp)

	alt_ic_isr_register (TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
    4a74:	3191ec04 	addi	r6,r6,18352
    4a78:	01400044 	movi	r5,1
{
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
	*timer_edge_cap_ptr = 0xF;
	*timer_control_ptr = 7;
	*timer_status_ptr = 0;
    4a7c:	10000005 	stb	zero,0(r2)

	alt_ic_isr_register (TIMER_IRQ_INTERRUPT_CONTROLLER_ID,
    4a80:	0009883a 	mov	r4,zero
    4a84:	d8000015 	stw	zero,0(sp)
    4a88:	0005a840 	call	5a84 <alt_ic_isr_register>
/********************************************************************/

static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
    4a8c:	d0a00f17 	ldw	r2,-32708(gp)
	*btn_edge_ptr = 0xF;
	*btn_direction_ptr = 0;

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    4a90:	01800034 	movhi	r6,0
    4a94:	d1e0ab04 	addi	r7,gp,-32084
/********************************************************************/

static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
    4a98:	14000005 	stb	r16,0(r2)
	*btn_edge_ptr = 0xF;
    4a9c:	d0a00e17 	ldw	r2,-32712(gp)
	*btn_direction_ptr = 0;

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    4aa0:	31913504 	addi	r6,r6,17620
    4aa4:	01400084 	movi	r5,2

static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = 0xF;
    4aa8:	14000005 	stb	r16,0(r2)
	*btn_direction_ptr = 0;
    4aac:	d0a01017 	ldw	r2,-32704(gp)

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    4ab0:	0009883a 	mov	r4,zero
static void init_buttons(void)
{
	void * edge_capture_ptr = (void*) &edge_capture_button;
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = 0xF;
	*btn_direction_ptr = 0;
    4ab4:	10000005 	stb	zero,0(r2)

	alt_ic_isr_register( BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    4ab8:	d8000015 	stw	zero,0(sp)
    4abc:	0005a840 	call	5a84 <alt_ic_isr_register>
}

static void init_uart_port()
{
	void * edge_capture_ptr = (void*) &edge_capture_uart;
	*uart_control_ptr = 0x80;
    4ac0:	d0a00b17 	ldw	r2,-32724(gp)
    4ac4:	00ffe004 	movi	r3,-128

	alt_ic_isr_register( UART_IRQ_INTERRUPT_CONTROLLER_ID,
    4ac8:	01800034 	movhi	r6,0
}

static void init_uart_port()
{
	void * edge_capture_ptr = (void*) &edge_capture_uart;
	*uart_control_ptr = 0x80;
    4acc:	10c00005 	stb	r3,0(r2)

	alt_ic_isr_register( UART_IRQ_INTERRUPT_CONTROLLER_ID,
    4ad0:	d8000015 	stw	zero,0(sp)
    4ad4:	d1e0ae04 	addi	r7,gp,-32072
    4ad8:	3190c904 	addi	r6,r6,17188
    4adc:	014000c4 	movi	r5,3
    4ae0:	0009883a 	mov	r4,zero
    4ae4:	0005a840 	call	5a84 <alt_ic_isr_register>
    4ae8:	003fff06 	br	4ae8 <_gp+0xffff6a68>

00004aec <__divsi3>:
    4aec:	20001b16 	blt	r4,zero,4b5c <__divsi3+0x70>
    4af0:	000f883a 	mov	r7,zero
    4af4:	28001616 	blt	r5,zero,4b50 <__divsi3+0x64>
    4af8:	200d883a 	mov	r6,r4
    4afc:	29001a2e 	bgeu	r5,r4,4b68 <__divsi3+0x7c>
    4b00:	00800804 	movi	r2,32
    4b04:	00c00044 	movi	r3,1
    4b08:	00000106 	br	4b10 <__divsi3+0x24>
    4b0c:	10000d26 	beq	r2,zero,4b44 <__divsi3+0x58>
    4b10:	294b883a 	add	r5,r5,r5
    4b14:	10bfffc4 	addi	r2,r2,-1
    4b18:	18c7883a 	add	r3,r3,r3
    4b1c:	293ffb36 	bltu	r5,r4,4b0c <_gp+0xffff6a8c>
    4b20:	0005883a 	mov	r2,zero
    4b24:	18000726 	beq	r3,zero,4b44 <__divsi3+0x58>
    4b28:	0005883a 	mov	r2,zero
    4b2c:	31400236 	bltu	r6,r5,4b38 <__divsi3+0x4c>
    4b30:	314dc83a 	sub	r6,r6,r5
    4b34:	10c4b03a 	or	r2,r2,r3
    4b38:	1806d07a 	srli	r3,r3,1
    4b3c:	280ad07a 	srli	r5,r5,1
    4b40:	183ffa1e 	bne	r3,zero,4b2c <_gp+0xffff6aac>
    4b44:	38000126 	beq	r7,zero,4b4c <__divsi3+0x60>
    4b48:	0085c83a 	sub	r2,zero,r2
    4b4c:	f800283a 	ret
    4b50:	014bc83a 	sub	r5,zero,r5
    4b54:	39c0005c 	xori	r7,r7,1
    4b58:	003fe706 	br	4af8 <_gp+0xffff6a78>
    4b5c:	0109c83a 	sub	r4,zero,r4
    4b60:	01c00044 	movi	r7,1
    4b64:	003fe306 	br	4af4 <_gp+0xffff6a74>
    4b68:	00c00044 	movi	r3,1
    4b6c:	003fee06 	br	4b28 <_gp+0xffff6aa8>

00004b70 <__modsi3>:
    4b70:	20001716 	blt	r4,zero,4bd0 <__modsi3+0x60>
    4b74:	000f883a 	mov	r7,zero
    4b78:	2005883a 	mov	r2,r4
    4b7c:	28001216 	blt	r5,zero,4bc8 <__modsi3+0x58>
    4b80:	2900162e 	bgeu	r5,r4,4bdc <__modsi3+0x6c>
    4b84:	01800804 	movi	r6,32
    4b88:	00c00044 	movi	r3,1
    4b8c:	00000106 	br	4b94 <__modsi3+0x24>
    4b90:	30000a26 	beq	r6,zero,4bbc <__modsi3+0x4c>
    4b94:	294b883a 	add	r5,r5,r5
    4b98:	31bfffc4 	addi	r6,r6,-1
    4b9c:	18c7883a 	add	r3,r3,r3
    4ba0:	293ffb36 	bltu	r5,r4,4b90 <_gp+0xffff6b10>
    4ba4:	18000526 	beq	r3,zero,4bbc <__modsi3+0x4c>
    4ba8:	1806d07a 	srli	r3,r3,1
    4bac:	11400136 	bltu	r2,r5,4bb4 <__modsi3+0x44>
    4bb0:	1145c83a 	sub	r2,r2,r5
    4bb4:	280ad07a 	srli	r5,r5,1
    4bb8:	183ffb1e 	bne	r3,zero,4ba8 <_gp+0xffff6b28>
    4bbc:	38000126 	beq	r7,zero,4bc4 <__modsi3+0x54>
    4bc0:	0085c83a 	sub	r2,zero,r2
    4bc4:	f800283a 	ret
    4bc8:	014bc83a 	sub	r5,zero,r5
    4bcc:	003fec06 	br	4b80 <_gp+0xffff6b00>
    4bd0:	0109c83a 	sub	r4,zero,r4
    4bd4:	01c00044 	movi	r7,1
    4bd8:	003fe706 	br	4b78 <_gp+0xffff6af8>
    4bdc:	00c00044 	movi	r3,1
    4be0:	003ff106 	br	4ba8 <_gp+0xffff6b28>

00004be4 <__udivsi3>:
    4be4:	200d883a 	mov	r6,r4
    4be8:	2900152e 	bgeu	r5,r4,4c40 <__udivsi3+0x5c>
    4bec:	28001416 	blt	r5,zero,4c40 <__udivsi3+0x5c>
    4bf0:	00800804 	movi	r2,32
    4bf4:	00c00044 	movi	r3,1
    4bf8:	00000206 	br	4c04 <__udivsi3+0x20>
    4bfc:	10000e26 	beq	r2,zero,4c38 <__udivsi3+0x54>
    4c00:	28000516 	blt	r5,zero,4c18 <__udivsi3+0x34>
    4c04:	294b883a 	add	r5,r5,r5
    4c08:	10bfffc4 	addi	r2,r2,-1
    4c0c:	18c7883a 	add	r3,r3,r3
    4c10:	293ffa36 	bltu	r5,r4,4bfc <_gp+0xffff6b7c>
    4c14:	18000826 	beq	r3,zero,4c38 <__udivsi3+0x54>
    4c18:	0005883a 	mov	r2,zero
    4c1c:	31400236 	bltu	r6,r5,4c28 <__udivsi3+0x44>
    4c20:	314dc83a 	sub	r6,r6,r5
    4c24:	10c4b03a 	or	r2,r2,r3
    4c28:	1806d07a 	srli	r3,r3,1
    4c2c:	280ad07a 	srli	r5,r5,1
    4c30:	183ffa1e 	bne	r3,zero,4c1c <_gp+0xffff6b9c>
    4c34:	f800283a 	ret
    4c38:	0005883a 	mov	r2,zero
    4c3c:	f800283a 	ret
    4c40:	00c00044 	movi	r3,1
    4c44:	003ff406 	br	4c18 <_gp+0xffff6b98>

00004c48 <__umodsi3>:
    4c48:	2005883a 	mov	r2,r4
    4c4c:	2900122e 	bgeu	r5,r4,4c98 <__umodsi3+0x50>
    4c50:	28001116 	blt	r5,zero,4c98 <__umodsi3+0x50>
    4c54:	01800804 	movi	r6,32
    4c58:	00c00044 	movi	r3,1
    4c5c:	00000206 	br	4c68 <__umodsi3+0x20>
    4c60:	30000c26 	beq	r6,zero,4c94 <__umodsi3+0x4c>
    4c64:	28000516 	blt	r5,zero,4c7c <__umodsi3+0x34>
    4c68:	294b883a 	add	r5,r5,r5
    4c6c:	31bfffc4 	addi	r6,r6,-1
    4c70:	18c7883a 	add	r3,r3,r3
    4c74:	293ffa36 	bltu	r5,r4,4c60 <_gp+0xffff6be0>
    4c78:	18000626 	beq	r3,zero,4c94 <__umodsi3+0x4c>
    4c7c:	1806d07a 	srli	r3,r3,1
    4c80:	11400136 	bltu	r2,r5,4c88 <__umodsi3+0x40>
    4c84:	1145c83a 	sub	r2,r2,r5
    4c88:	280ad07a 	srli	r5,r5,1
    4c8c:	183ffb1e 	bne	r3,zero,4c7c <_gp+0xffff6bfc>
    4c90:	f800283a 	ret
    4c94:	f800283a 	ret
    4c98:	00c00044 	movi	r3,1
    4c9c:	003ff706 	br	4c7c <_gp+0xffff6bfc>

00004ca0 <__mulsi3>:
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	20000726 	beq	r4,zero,4cc4 <__mulsi3+0x24>
    4ca8:	20c0004c 	andi	r3,r4,1
    4cac:	2008d07a 	srli	r4,r4,1
    4cb0:	18000126 	beq	r3,zero,4cb8 <__mulsi3+0x18>
    4cb4:	1145883a 	add	r2,r2,r5
    4cb8:	294b883a 	add	r5,r5,r5
    4cbc:	203ffa1e 	bne	r4,zero,4ca8 <_gp+0xffff6c28>
    4cc0:	f800283a 	ret
    4cc4:	f800283a 	ret

00004cc8 <localtime>:
    4cc8:	00800034 	movhi	r2,0
    4ccc:	defffd04 	addi	sp,sp,-12
    4cd0:	10983804 	addi	r2,r2,24800
    4cd4:	dc000015 	stw	r16,0(sp)
    4cd8:	14000017 	ldw	r16,0(r2)
    4cdc:	dc400115 	stw	r17,4(sp)
    4ce0:	dfc00215 	stw	ra,8(sp)
    4ce4:	80800917 	ldw	r2,36(r16)
    4ce8:	2023883a 	mov	r17,r4
    4cec:	1000031e 	bne	r2,zero,4cfc <localtime+0x34>
    4cf0:	01000904 	movi	r4,36
    4cf4:	00050500 	call	5050 <malloc>
    4cf8:	80800915 	stw	r2,36(r16)
    4cfc:	81400917 	ldw	r5,36(r16)
    4d00:	8809883a 	mov	r4,r17
    4d04:	dfc00217 	ldw	ra,8(sp)
    4d08:	dc400117 	ldw	r17,4(sp)
    4d0c:	dc000017 	ldw	r16,0(sp)
    4d10:	dec00304 	addi	sp,sp,12
    4d14:	0004d181 	jmpi	4d18 <localtime_r>

00004d18 <localtime_r>:
    4d18:	defff904 	addi	sp,sp,-28
    4d1c:	dfc00615 	stw	ra,24(sp)
    4d20:	dd000515 	stw	r20,20(sp)
    4d24:	dcc00415 	stw	r19,16(sp)
    4d28:	dc400215 	stw	r17,8(sp)
    4d2c:	dc000115 	stw	r16,4(sp)
    4d30:	2029883a 	mov	r20,r4
    4d34:	d9400015 	stw	r5,0(sp)
    4d38:	dc800315 	stw	r18,12(sp)
    4d3c:	00056000 	call	5600 <__gettzinfo>
    4d40:	d9400017 	ldw	r5,0(sp)
    4d44:	a009883a 	mov	r4,r20
    4d48:	1023883a 	mov	r17,r2
    4d4c:	000560c0 	call	560c <gmtime_r>
    4d50:	14c00517 	ldw	r19,20(r2)
    4d54:	1021883a 	mov	r16,r2
    4d58:	9cc1db04 	addi	r19,r19,1900
    4d5c:	988000cc 	andi	r2,r19,3
    4d60:	1000041e 	bne	r2,zero,4d74 <localtime_r+0x5c>
    4d64:	01401904 	movi	r5,100
    4d68:	9809883a 	mov	r4,r19
    4d6c:	0004b700 	call	4b70 <__modsi3>
    4d70:	1000051e 	bne	r2,zero,4d88 <localtime_r+0x70>
    4d74:	9809883a 	mov	r4,r19
    4d78:	01406404 	movi	r5,400
    4d7c:	0004b700 	call	4b70 <__modsi3>
    4d80:	1009003a 	cmpeq	r4,r2,zero
    4d84:	00000106 	br	4d8c <localtime_r+0x74>
    4d88:	01000044 	movi	r4,1
    4d8c:	01400c04 	movi	r5,48
    4d90:	04800034 	movhi	r18,0
    4d94:	0004ca00 	call	4ca0 <__mulsi3>
    4d98:	9497a604 	addi	r18,r18,24216
    4d9c:	90a5883a 	add	r18,r18,r2
    4da0:	00055f80 	call	55f8 <__tz_lock>
    4da4:	00800034 	movhi	r2,0
    4da8:	1098d304 	addi	r2,r2,25420
    4dac:	10800017 	ldw	r2,0(r2)
    4db0:	10001726 	beq	r2,zero,4e10 <localtime_r+0xf8>
    4db4:	88800117 	ldw	r2,4(r17)
    4db8:	9880051e 	bne	r19,r2,4dd0 <localtime_r+0xb8>
    4dbc:	89000017 	ldw	r4,0(r17)
    4dc0:	a0800017 	ldw	r2,0(r20)
    4dc4:	88c00717 	ldw	r3,28(r17)
    4dc8:	2000061e 	bne	r4,zero,4de4 <localtime_r+0xcc>
    4dcc:	00000706 	br	4dec <localtime_r+0xd4>
    4dd0:	9809883a 	mov	r4,r19
    4dd4:	00053500 	call	5350 <__tzcalc_limits>
    4dd8:	103ff81e 	bne	r2,zero,4dbc <_gp+0xffff6d3c>
    4ddc:	00bfffc4 	movi	r2,-1
    4de0:	00000906 	br	4e08 <localtime_r+0xf0>
    4de4:	10c00516 	blt	r2,r3,4dfc <localtime_r+0xe4>
    4de8:	00000106 	br	4df0 <localtime_r+0xd8>
    4dec:	10c0050e 	bge	r2,r3,4e04 <localtime_r+0xec>
    4df0:	88c00e17 	ldw	r3,56(r17)
    4df4:	10c4803a 	cmplt	r2,r2,r3
    4df8:	00000306 	br	4e08 <localtime_r+0xf0>
    4dfc:	0005883a 	mov	r2,zero
    4e00:	00000106 	br	4e08 <localtime_r+0xf0>
    4e04:	00800044 	movi	r2,1
    4e08:	80800815 	stw	r2,32(r16)
    4e0c:	00000106 	br	4e14 <localtime_r+0xfc>
    4e10:	80000815 	stw	zero,32(r16)
    4e14:	80c00817 	ldw	r3,32(r16)
    4e18:	00800044 	movi	r2,1
    4e1c:	1880021e 	bne	r3,r2,4e28 <localtime_r+0x110>
    4e20:	8d000f17 	ldw	r20,60(r17)
    4e24:	00000106 	br	4e2c <localtime_r+0x114>
    4e28:	8d000817 	ldw	r20,32(r17)
    4e2c:	01438404 	movi	r5,3600
    4e30:	a009883a 	mov	r4,r20
    4e34:	0004b700 	call	4b70 <__modsi3>
    4e38:	01400f04 	movi	r5,60
    4e3c:	1009883a 	mov	r4,r2
    4e40:	1027883a 	mov	r19,r2
    4e44:	0004b700 	call	4b70 <__modsi3>
    4e48:	84400017 	ldw	r17,0(r16)
    4e4c:	9809883a 	mov	r4,r19
    4e50:	01400f04 	movi	r5,60
    4e54:	88a3c83a 	sub	r17,r17,r2
    4e58:	84400015 	stw	r17,0(r16)
    4e5c:	0004aec0 	call	4aec <__divsi3>
    4e60:	84c00117 	ldw	r19,4(r16)
    4e64:	a009883a 	mov	r4,r20
    4e68:	01438404 	movi	r5,3600
    4e6c:	98a7c83a 	sub	r19,r19,r2
    4e70:	84c00115 	stw	r19,4(r16)
    4e74:	0004aec0 	call	4aec <__divsi3>
    4e78:	80c00217 	ldw	r3,8(r16)
    4e7c:	01000ec4 	movi	r4,59
    4e80:	1885c83a 	sub	r2,r3,r2
    4e84:	80800215 	stw	r2,8(r16)
    4e88:	2440040e 	bge	r4,r17,4e9c <localtime_r+0x184>
    4e8c:	9cc00044 	addi	r19,r19,1
    4e90:	84c00115 	stw	r19,4(r16)
    4e94:	8c7ff104 	addi	r17,r17,-60
    4e98:	00000406 	br	4eac <localtime_r+0x194>
    4e9c:	8800040e 	bge	r17,zero,4eb0 <localtime_r+0x198>
    4ea0:	9cffffc4 	addi	r19,r19,-1
    4ea4:	84c00115 	stw	r19,4(r16)
    4ea8:	8c400f04 	addi	r17,r17,60
    4eac:	84400015 	stw	r17,0(r16)
    4eb0:	80c00117 	ldw	r3,4(r16)
    4eb4:	20c0040e 	bge	r4,r3,4ec8 <localtime_r+0x1b0>
    4eb8:	10800044 	addi	r2,r2,1
    4ebc:	80800215 	stw	r2,8(r16)
    4ec0:	18fff104 	addi	r3,r3,-60
    4ec4:	00000406 	br	4ed8 <localtime_r+0x1c0>
    4ec8:	1800040e 	bge	r3,zero,4edc <localtime_r+0x1c4>
    4ecc:	10bfffc4 	addi	r2,r2,-1
    4ed0:	80800215 	stw	r2,8(r16)
    4ed4:	18c00f04 	addi	r3,r3,60
    4ed8:	80c00115 	stw	r3,4(r16)
    4edc:	80800217 	ldw	r2,8(r16)
    4ee0:	00c005c4 	movi	r3,23
    4ee4:	1880220e 	bge	r3,r2,4f70 <localtime_r+0x258>
    4ee8:	80c00717 	ldw	r3,28(r16)
    4eec:	01000184 	movi	r4,6
    4ef0:	18c00044 	addi	r3,r3,1
    4ef4:	80c00715 	stw	r3,28(r16)
    4ef8:	80c00617 	ldw	r3,24(r16)
    4efc:	18c00044 	addi	r3,r3,1
    4f00:	20c00216 	blt	r4,r3,4f0c <localtime_r+0x1f4>
    4f04:	80c00615 	stw	r3,24(r16)
    4f08:	00000106 	br	4f10 <localtime_r+0x1f8>
    4f0c:	80000615 	stw	zero,24(r16)
    4f10:	81000417 	ldw	r4,16(r16)
    4f14:	80c00317 	ldw	r3,12(r16)
    4f18:	10bffa04 	addi	r2,r2,-24
    4f1c:	80800215 	stw	r2,8(r16)
    4f20:	2105883a 	add	r2,r4,r4
    4f24:	18c00044 	addi	r3,r3,1
    4f28:	1085883a 	add	r2,r2,r2
    4f2c:	80c00315 	stw	r3,12(r16)
    4f30:	9085883a 	add	r2,r18,r2
    4f34:	10800017 	ldw	r2,0(r2)
    4f38:	10c03b0e 	bge	r2,r3,5028 <localtime_r+0x310>
    4f3c:	1887c83a 	sub	r3,r3,r2
    4f40:	80c00315 	stw	r3,12(r16)
    4f44:	21000044 	addi	r4,r4,1
    4f48:	00800304 	movi	r2,12
    4f4c:	20800226 	beq	r4,r2,4f58 <localtime_r+0x240>
    4f50:	81000415 	stw	r4,16(r16)
    4f54:	00003406 	br	5028 <localtime_r+0x310>
    4f58:	80800517 	ldw	r2,20(r16)
    4f5c:	80000415 	stw	zero,16(r16)
    4f60:	80000715 	stw	zero,28(r16)
    4f64:	10800044 	addi	r2,r2,1
    4f68:	80800515 	stw	r2,20(r16)
    4f6c:	00002e06 	br	5028 <localtime_r+0x310>
    4f70:	10002d0e 	bge	r2,zero,5028 <localtime_r+0x310>
    4f74:	80c00717 	ldw	r3,28(r16)
    4f78:	18ffffc4 	addi	r3,r3,-1
    4f7c:	80c00715 	stw	r3,28(r16)
    4f80:	80c00617 	ldw	r3,24(r16)
    4f84:	18ffffc4 	addi	r3,r3,-1
    4f88:	1800010e 	bge	r3,zero,4f90 <localtime_r+0x278>
    4f8c:	00c00184 	movi	r3,6
    4f90:	80c00615 	stw	r3,24(r16)
    4f94:	80c00317 	ldw	r3,12(r16)
    4f98:	10800604 	addi	r2,r2,24
    4f9c:	80800215 	stw	r2,8(r16)
    4fa0:	18ffffc4 	addi	r3,r3,-1
    4fa4:	80c00315 	stw	r3,12(r16)
    4fa8:	18001f1e 	bne	r3,zero,5028 <localtime_r+0x310>
    4fac:	80800417 	ldw	r2,16(r16)
    4fb0:	10bfffc4 	addi	r2,r2,-1
    4fb4:	10000216 	blt	r2,zero,4fc0 <localtime_r+0x2a8>
    4fb8:	80800415 	stw	r2,16(r16)
    4fbc:	00001406 	br	5010 <localtime_r+0x2f8>
    4fc0:	84400517 	ldw	r17,20(r16)
    4fc4:	008002c4 	movi	r2,11
    4fc8:	80800415 	stw	r2,16(r16)
    4fcc:	88bfffc4 	addi	r2,r17,-1
    4fd0:	80800515 	stw	r2,20(r16)
    4fd4:	108000cc 	andi	r2,r2,3
    4fd8:	8c41dac4 	addi	r17,r17,1899
    4fdc:	1000041e 	bne	r2,zero,4ff0 <localtime_r+0x2d8>
    4fe0:	01401904 	movi	r5,100
    4fe4:	8809883a 	mov	r4,r17
    4fe8:	0004b700 	call	4b70 <__modsi3>
    4fec:	1000051e 	bne	r2,zero,5004 <localtime_r+0x2ec>
    4ff0:	01406404 	movi	r5,400
    4ff4:	8809883a 	mov	r4,r17
    4ff8:	0004b700 	call	4b70 <__modsi3>
    4ffc:	1005003a 	cmpeq	r2,r2,zero
    5000:	00000106 	br	5008 <localtime_r+0x2f0>
    5004:	00800044 	movi	r2,1
    5008:	10805b04 	addi	r2,r2,364
    500c:	80800715 	stw	r2,28(r16)
    5010:	80800417 	ldw	r2,16(r16)
    5014:	1085883a 	add	r2,r2,r2
    5018:	1085883a 	add	r2,r2,r2
    501c:	9085883a 	add	r2,r18,r2
    5020:	10800017 	ldw	r2,0(r2)
    5024:	80800315 	stw	r2,12(r16)
    5028:	00055fc0 	call	55fc <__tz_unlock>
    502c:	8005883a 	mov	r2,r16
    5030:	dfc00617 	ldw	ra,24(sp)
    5034:	dd000517 	ldw	r20,20(sp)
    5038:	dcc00417 	ldw	r19,16(sp)
    503c:	dc800317 	ldw	r18,12(sp)
    5040:	dc400217 	ldw	r17,8(sp)
    5044:	dc000117 	ldw	r16,4(sp)
    5048:	dec00704 	addi	sp,sp,28
    504c:	f800283a 	ret

00005050 <malloc>:
    5050:	00800034 	movhi	r2,0
    5054:	10983804 	addi	r2,r2,24800
    5058:	200b883a 	mov	r5,r4
    505c:	11000017 	ldw	r4,0(r2)
    5060:	00051841 	jmpi	5184 <_malloc_r>

00005064 <free>:
    5064:	00800034 	movhi	r2,0
    5068:	10983804 	addi	r2,r2,24800
    506c:	200b883a 	mov	r5,r4
    5070:	11000017 	ldw	r4,0(r2)
    5074:	00050a01 	jmpi	50a0 <_free_r>

00005078 <memcpy>:
    5078:	2005883a 	mov	r2,r4
    507c:	2007883a 	mov	r3,r4
    5080:	218d883a 	add	r6,r4,r6
    5084:	19800526 	beq	r3,r6,509c <memcpy+0x24>
    5088:	29000003 	ldbu	r4,0(r5)
    508c:	18c00044 	addi	r3,r3,1
    5090:	29400044 	addi	r5,r5,1
    5094:	193fffc5 	stb	r4,-1(r3)
    5098:	003ffa06 	br	5084 <_gp+0xffff7004>
    509c:	f800283a 	ret

000050a0 <_free_r>:
    50a0:	28003726 	beq	r5,zero,5180 <_free_r+0xe0>
    50a4:	28ffff17 	ldw	r3,-4(r5)
    50a8:	28bfff04 	addi	r2,r5,-4
    50ac:	1800010e 	bge	r3,zero,50b4 <_free_r+0x14>
    50b0:	10c5883a 	add	r2,r2,r3
    50b4:	01400034 	movhi	r5,0
    50b8:	2958d104 	addi	r5,r5,25412
    50bc:	28c00017 	ldw	r3,0(r5)
    50c0:	280d883a 	mov	r6,r5
    50c4:	1800031e 	bne	r3,zero,50d4 <_free_r+0x34>
    50c8:	10000115 	stw	zero,4(r2)
    50cc:	28800015 	stw	r2,0(r5)
    50d0:	f800283a 	ret
    50d4:	10c00c2e 	bgeu	r2,r3,5108 <_free_r+0x68>
    50d8:	11000017 	ldw	r4,0(r2)
    50dc:	110b883a 	add	r5,r2,r4
    50e0:	1940041e 	bne	r3,r5,50f4 <_free_r+0x54>
    50e4:	19400017 	ldw	r5,0(r3)
    50e8:	18c00117 	ldw	r3,4(r3)
    50ec:	2909883a 	add	r4,r5,r4
    50f0:	11000015 	stw	r4,0(r2)
    50f4:	10c00115 	stw	r3,4(r2)
    50f8:	30800015 	stw	r2,0(r6)
    50fc:	f800283a 	ret
    5100:	11400336 	bltu	r2,r5,5110 <_free_r+0x70>
    5104:	2807883a 	mov	r3,r5
    5108:	19400117 	ldw	r5,4(r3)
    510c:	283ffc1e 	bne	r5,zero,5100 <_gp+0xffff7080>
    5110:	19c00017 	ldw	r7,0(r3)
    5114:	19cd883a 	add	r6,r3,r7
    5118:	30800a1e 	bne	r6,r2,5144 <_free_r+0xa4>
    511c:	10800017 	ldw	r2,0(r2)
    5120:	3885883a 	add	r2,r7,r2
    5124:	18800015 	stw	r2,0(r3)
    5128:	1889883a 	add	r4,r3,r2
    512c:	2900141e 	bne	r5,r4,5180 <_free_r+0xe0>
    5130:	29000017 	ldw	r4,0(r5)
    5134:	2085883a 	add	r2,r4,r2
    5138:	18800015 	stw	r2,0(r3)
    513c:	28800117 	ldw	r2,4(r5)
    5140:	00000e06 	br	517c <_free_r+0xdc>
    5144:	1180032e 	bgeu	r2,r6,5154 <_free_r+0xb4>
    5148:	00800304 	movi	r2,12
    514c:	20800015 	stw	r2,0(r4)
    5150:	f800283a 	ret
    5154:	11000017 	ldw	r4,0(r2)
    5158:	110d883a 	add	r6,r2,r4
    515c:	2980061e 	bne	r5,r6,5178 <_free_r+0xd8>
    5160:	29800017 	ldw	r6,0(r5)
    5164:	3109883a 	add	r4,r6,r4
    5168:	11000015 	stw	r4,0(r2)
    516c:	29000117 	ldw	r4,4(r5)
    5170:	11000115 	stw	r4,4(r2)
    5174:	00000106 	br	517c <_free_r+0xdc>
    5178:	11400115 	stw	r5,4(r2)
    517c:	18800115 	stw	r2,4(r3)
    5180:	f800283a 	ret

00005184 <_malloc_r>:
    5184:	defffb04 	addi	sp,sp,-20
    5188:	00bfff04 	movi	r2,-4
    518c:	dc400115 	stw	r17,4(sp)
    5190:	2c4000c4 	addi	r17,r5,3
    5194:	88a2703a 	and	r17,r17,r2
    5198:	dc800215 	stw	r18,8(sp)
    519c:	dfc00415 	stw	ra,16(sp)
    51a0:	dcc00315 	stw	r19,12(sp)
    51a4:	dc000015 	stw	r16,0(sp)
    51a8:	8c400204 	addi	r17,r17,8
    51ac:	00800304 	movi	r2,12
    51b0:	2025883a 	mov	r18,r4
    51b4:	8880022e 	bgeu	r17,r2,51c0 <_malloc_r+0x3c>
    51b8:	1023883a 	mov	r17,r2
    51bc:	00000506 	br	51d4 <_malloc_r+0x50>
    51c0:	8800040e 	bge	r17,zero,51d4 <_malloc_r+0x50>
    51c4:	00800304 	movi	r2,12
    51c8:	90800015 	stw	r2,0(r18)
    51cc:	0005883a 	mov	r2,zero
    51d0:	00003b06 	br	52c0 <_malloc_r+0x13c>
    51d4:	897ffb36 	bltu	r17,r5,51c4 <_gp+0xffff7144>
    51d8:	00800034 	movhi	r2,0
    51dc:	1098d104 	addi	r2,r2,25412
    51e0:	10c00017 	ldw	r3,0(r2)
    51e4:	1009883a 	mov	r4,r2
    51e8:	1821883a 	mov	r16,r3
    51ec:	80000926 	beq	r16,zero,5214 <_malloc_r+0x90>
    51f0:	80800017 	ldw	r2,0(r16)
    51f4:	1445c83a 	sub	r2,r2,r17
    51f8:	10001516 	blt	r2,zero,5250 <_malloc_r+0xcc>
    51fc:	014002c4 	movi	r5,11
    5200:	28800d2e 	bgeu	r5,r2,5238 <_malloc_r+0xb4>
    5204:	80800015 	stw	r2,0(r16)
    5208:	80a1883a 	add	r16,r16,r2
    520c:	84400015 	stw	r17,0(r16)
    5210:	8000221e 	bne	r16,zero,529c <_malloc_r+0x118>
    5214:	04000034 	movhi	r16,0
    5218:	8418d004 	addi	r16,r16,25408
    521c:	80800017 	ldw	r2,0(r16)
    5220:	10000e1e 	bne	r2,zero,525c <_malloc_r+0xd8>
    5224:	000b883a 	mov	r5,zero
    5228:	9009883a 	mov	r4,r18
    522c:	00053000 	call	5300 <_sbrk_r>
    5230:	80800015 	stw	r2,0(r16)
    5234:	00000906 	br	525c <_malloc_r+0xd8>
    5238:	80800117 	ldw	r2,4(r16)
    523c:	1c00021e 	bne	r3,r16,5248 <_malloc_r+0xc4>
    5240:	20800015 	stw	r2,0(r4)
    5244:	00001506 	br	529c <_malloc_r+0x118>
    5248:	18800115 	stw	r2,4(r3)
    524c:	00001306 	br	529c <_malloc_r+0x118>
    5250:	8007883a 	mov	r3,r16
    5254:	84000117 	ldw	r16,4(r16)
    5258:	003fe406 	br	51ec <_gp+0xffff716c>
    525c:	880b883a 	mov	r5,r17
    5260:	9009883a 	mov	r4,r18
    5264:	00053000 	call	5300 <_sbrk_r>
    5268:	04ffffc4 	movi	r19,-1
    526c:	14ffd526 	beq	r2,r19,51c4 <_gp+0xffff7144>
    5270:	140000c4 	addi	r16,r2,3
    5274:	00ffff04 	movi	r3,-4
    5278:	80e0703a 	and	r16,r16,r3
    527c:	1400021e 	bne	r2,r16,5288 <_malloc_r+0x104>
    5280:	84400015 	stw	r17,0(r16)
    5284:	00000506 	br	529c <_malloc_r+0x118>
    5288:	808bc83a 	sub	r5,r16,r2
    528c:	9009883a 	mov	r4,r18
    5290:	00053000 	call	5300 <_sbrk_r>
    5294:	14fffa1e 	bne	r2,r19,5280 <_gp+0xffff7200>
    5298:	003fca06 	br	51c4 <_gp+0xffff7144>
    529c:	810002c4 	addi	r4,r16,11
    52a0:	00bffe04 	movi	r2,-8
    52a4:	80c00104 	addi	r3,r16,4
    52a8:	2084703a 	and	r2,r4,r2
    52ac:	10c7c83a 	sub	r3,r2,r3
    52b0:	18000326 	beq	r3,zero,52c0 <_malloc_r+0x13c>
    52b4:	80e1883a 	add	r16,r16,r3
    52b8:	00c7c83a 	sub	r3,zero,r3
    52bc:	80c00015 	stw	r3,0(r16)
    52c0:	dfc00417 	ldw	ra,16(sp)
    52c4:	dcc00317 	ldw	r19,12(sp)
    52c8:	dc800217 	ldw	r18,8(sp)
    52cc:	dc400117 	ldw	r17,4(sp)
    52d0:	dc000017 	ldw	r16,0(sp)
    52d4:	dec00504 	addi	sp,sp,20
    52d8:	f800283a 	ret

000052dc <_putchar_r>:
    52dc:	21800217 	ldw	r6,8(r4)
    52e0:	00058a01 	jmpi	58a0 <_putc_r>

000052e4 <putchar>:
    52e4:	00800034 	movhi	r2,0
    52e8:	10983804 	addi	r2,r2,24800
    52ec:	10800017 	ldw	r2,0(r2)
    52f0:	200b883a 	mov	r5,r4
    52f4:	11800217 	ldw	r6,8(r2)
    52f8:	1009883a 	mov	r4,r2
    52fc:	00058a01 	jmpi	58a0 <_putc_r>

00005300 <_sbrk_r>:
    5300:	defffd04 	addi	sp,sp,-12
    5304:	dc000015 	stw	r16,0(sp)
    5308:	04000034 	movhi	r16,0
    530c:	dc400115 	stw	r17,4(sp)
    5310:	8418d404 	addi	r16,r16,25424
    5314:	2023883a 	mov	r17,r4
    5318:	2809883a 	mov	r4,r5
    531c:	dfc00215 	stw	ra,8(sp)
    5320:	80000015 	stw	zero,0(r16)
    5324:	0005cbc0 	call	5cbc <sbrk>
    5328:	00ffffc4 	movi	r3,-1
    532c:	10c0031e 	bne	r2,r3,533c <_sbrk_r+0x3c>
    5330:	80c00017 	ldw	r3,0(r16)
    5334:	18000126 	beq	r3,zero,533c <_sbrk_r+0x3c>
    5338:	88c00015 	stw	r3,0(r17)
    533c:	dfc00217 	ldw	ra,8(sp)
    5340:	dc400117 	ldw	r17,4(sp)
    5344:	dc000017 	ldw	r16,0(sp)
    5348:	dec00304 	addi	sp,sp,12
    534c:	f800283a 	ret

00005350 <__tzcalc_limits>:
    5350:	deffed04 	addi	sp,sp,-76
    5354:	ddc01015 	stw	r23,64(sp)
    5358:	dc400a15 	stw	r17,40(sp)
    535c:	dfc01215 	stw	ra,72(sp)
    5360:	df001115 	stw	fp,68(sp)
    5364:	dd800f15 	stw	r22,60(sp)
    5368:	dd400e15 	stw	r21,56(sp)
    536c:	dd000d15 	stw	r20,52(sp)
    5370:	dcc00c15 	stw	r19,48(sp)
    5374:	dc800b15 	stw	r18,44(sp)
    5378:	dc000915 	stw	r16,36(sp)
    537c:	2023883a 	mov	r17,r4
    5380:	00056000 	call	5600 <__gettzinfo>
    5384:	102f883a 	mov	r23,r2
    5388:	0081ec44 	movi	r2,1969
    538c:	14408d0e 	bge	r2,r17,55c4 <__tzcalc_limits+0x274>
    5390:	8c3e13c4 	addi	r16,r17,-1969
    5394:	893e1384 	addi	r4,r17,-1970
    5398:	bc400115 	stw	r17,4(r23)
    539c:	01405b44 	movi	r5,365
    53a0:	8021d0ba 	srai	r16,r16,2
    53a4:	0004ca00 	call	4ca0 <__mulsi3>
    53a8:	893e24c4 	addi	r4,r17,-1901
    53ac:	017fe704 	movi	r5,-100
    53b0:	1421883a 	add	r16,r2,r16
    53b4:	0004aec0 	call	4aec <__divsi3>
    53b8:	893e6fc4 	addi	r4,r17,-1601
    53bc:	01406404 	movi	r5,400
    53c0:	80a1883a 	add	r16,r16,r2
    53c4:	0004aec0 	call	4aec <__divsi3>
    53c8:	8809883a 	mov	r4,r17
    53cc:	01401904 	movi	r5,100
    53d0:	80a1883a 	add	r16,r16,r2
    53d4:	0004b700 	call	4b70 <__modsi3>
    53d8:	8809883a 	mov	r4,r17
    53dc:	01406404 	movi	r5,400
    53e0:	d8800115 	stw	r2,4(sp)
    53e4:	0004b700 	call	4b70 <__modsi3>
    53e8:	1007003a 	cmpeq	r3,r2,zero
    53ec:	d8c00415 	stw	r3,16(sp)
    53f0:	b8c00304 	addi	r3,r23,12
    53f4:	d8c00015 	stw	r3,0(sp)
    53f8:	8c4000cc 	andi	r17,r17,3
    53fc:	b8c01304 	addi	r3,r23,76
    5400:	d8800215 	stw	r2,8(sp)
    5404:	bd800204 	addi	r22,r23,8
    5408:	bd400604 	addi	r21,r23,24
    540c:	bd000804 	addi	r20,r23,32
    5410:	bcc00704 	addi	r19,r23,28
    5414:	bf000504 	addi	fp,r23,20
    5418:	bc800404 	addi	r18,r23,16
    541c:	d8c00615 	stw	r3,24(sp)
    5420:	dc400515 	stw	r17,20(sp)
    5424:	b0800007 	ldb	r2,0(r22)
    5428:	00c01284 	movi	r3,74
    542c:	10c00e1e 	bne	r2,r3,5468 <__tzcalc_limits+0x118>
    5430:	e0800017 	ldw	r2,0(fp)
    5434:	d8c00517 	ldw	r3,20(sp)
    5438:	808b883a 	add	r5,r16,r2
    543c:	1800021e 	bne	r3,zero,5448 <__tzcalc_limits+0xf8>
    5440:	d8c00117 	ldw	r3,4(sp)
    5444:	1800021e 	bne	r3,zero,5450 <__tzcalc_limits+0x100>
    5448:	d8c00217 	ldw	r3,8(sp)
    544c:	1800021e 	bne	r3,zero,5458 <__tzcalc_limits+0x108>
    5450:	10800f08 	cmpgei	r2,r2,60
    5454:	00000106 	br	545c <__tzcalc_limits+0x10c>
    5458:	0005883a 	mov	r2,zero
    545c:	1145883a 	add	r2,r2,r5
    5460:	113fffc4 	addi	r4,r2,-1
    5464:	00003e06 	br	5560 <__tzcalc_limits+0x210>
    5468:	00c01104 	movi	r3,68
    546c:	10c0031e 	bne	r2,r3,547c <__tzcalc_limits+0x12c>
    5470:	e0800017 	ldw	r2,0(fp)
    5474:	8089883a 	add	r4,r16,r2
    5478:	00003906 	br	5560 <__tzcalc_limits+0x210>
    547c:	d8c00517 	ldw	r3,20(sp)
    5480:	1800041e 	bne	r3,zero,5494 <__tzcalc_limits+0x144>
    5484:	d8c00117 	ldw	r3,4(sp)
    5488:	18000226 	beq	r3,zero,5494 <__tzcalc_limits+0x144>
    548c:	01000044 	movi	r4,1
    5490:	00000106 	br	5498 <__tzcalc_limits+0x148>
    5494:	d9000417 	ldw	r4,16(sp)
    5498:	01400c04 	movi	r5,48
    549c:	0004ca00 	call	4ca0 <__mulsi3>
    54a0:	00c00034 	movhi	r3,0
    54a4:	18d7a604 	addi	r3,r3,24216
    54a8:	1885883a 	add	r2,r3,r2
    54ac:	d8c00017 	ldw	r3,0(sp)
    54b0:	d8800315 	stw	r2,12(sp)
    54b4:	8013883a 	mov	r9,r16
    54b8:	19800017 	ldw	r6,0(r3)
    54bc:	1007883a 	mov	r3,r2
    54c0:	00800044 	movi	r2,1
    54c4:	1180050e 	bge	r2,r6,54dc <__tzcalc_limits+0x18c>
    54c8:	19000017 	ldw	r4,0(r3)
    54cc:	10800044 	addi	r2,r2,1
    54d0:	18c00104 	addi	r3,r3,4
    54d4:	4913883a 	add	r9,r9,r4
    54d8:	003ffa06 	br	54c4 <_gp+0xffff7444>
    54dc:	3023883a 	mov	r17,r6
    54e0:	01800116 	blt	zero,r6,54e8 <__tzcalc_limits+0x198>
    54e4:	04400044 	movi	r17,1
    54e8:	49000104 	addi	r4,r9,4
    54ec:	014001c4 	movi	r5,7
    54f0:	da400815 	stw	r9,32(sp)
    54f4:	0004b700 	call	4b70 <__modsi3>
    54f8:	e0c00017 	ldw	r3,0(fp)
    54fc:	da400817 	ldw	r9,32(sp)
    5500:	1887c83a 	sub	r3,r3,r2
    5504:	1800010e 	bge	r3,zero,550c <__tzcalc_limits+0x1bc>
    5508:	18c001c4 	addi	r3,r3,7
    550c:	91000017 	ldw	r4,0(r18)
    5510:	014001c4 	movi	r5,7
    5514:	d8c00715 	stw	r3,28(sp)
    5518:	213fffc4 	addi	r4,r4,-1
    551c:	da400815 	stw	r9,32(sp)
    5520:	0004ca00 	call	4ca0 <__mulsi3>
    5524:	d8c00717 	ldw	r3,28(sp)
    5528:	da400817 	ldw	r9,32(sp)
    552c:	10c5883a 	add	r2,r2,r3
    5530:	00d00034 	movhi	r3,16384
    5534:	18ffffc4 	addi	r3,r3,-1
    5538:	88cd883a 	add	r6,r17,r3
    553c:	d8c00317 	ldw	r3,12(sp)
    5540:	318d883a 	add	r6,r6,r6
    5544:	318d883a 	add	r6,r6,r6
    5548:	19a3883a 	add	r17,r3,r6
    554c:	88c00017 	ldw	r3,0(r17)
    5550:	10c00216 	blt	r2,r3,555c <__tzcalc_limits+0x20c>
    5554:	10bffe44 	addi	r2,r2,-7
    5558:	003ffd06 	br	5550 <_gp+0xffff74d0>
    555c:	4889883a 	add	r4,r9,r2
    5560:	01400074 	movhi	r5,1
    5564:	29546004 	addi	r5,r5,20864
    5568:	0004ca00 	call	4ca0 <__mulsi3>
    556c:	a8c00017 	ldw	r3,0(r21)
    5570:	e7000704 	addi	fp,fp,28
    5574:	b5800704 	addi	r22,r22,28
    5578:	10c5883a 	add	r2,r2,r3
    557c:	a0c00017 	ldw	r3,0(r20)
    5580:	ad400704 	addi	r21,r21,28
    5584:	a5000704 	addi	r20,r20,28
    5588:	10c5883a 	add	r2,r2,r3
    558c:	d8c00017 	ldw	r3,0(sp)
    5590:	98800015 	stw	r2,0(r19)
    5594:	94800704 	addi	r18,r18,28
    5598:	18c00704 	addi	r3,r3,28
    559c:	d8c00015 	stw	r3,0(sp)
    55a0:	d8c00617 	ldw	r3,24(sp)
    55a4:	9cc00704 	addi	r19,r19,28
    55a8:	1f3f9e1e 	bne	r3,fp,5424 <_gp+0xffff73a4>
    55ac:	b8800717 	ldw	r2,28(r23)
    55b0:	b8c00e17 	ldw	r3,56(r23)
    55b4:	10c4803a 	cmplt	r2,r2,r3
    55b8:	b8800015 	stw	r2,0(r23)
    55bc:	00800044 	movi	r2,1
    55c0:	00000106 	br	55c8 <__tzcalc_limits+0x278>
    55c4:	0005883a 	mov	r2,zero
    55c8:	dfc01217 	ldw	ra,72(sp)
    55cc:	df001117 	ldw	fp,68(sp)
    55d0:	ddc01017 	ldw	r23,64(sp)
    55d4:	dd800f17 	ldw	r22,60(sp)
    55d8:	dd400e17 	ldw	r21,56(sp)
    55dc:	dd000d17 	ldw	r20,52(sp)
    55e0:	dcc00c17 	ldw	r19,48(sp)
    55e4:	dc800b17 	ldw	r18,44(sp)
    55e8:	dc400a17 	ldw	r17,40(sp)
    55ec:	dc000917 	ldw	r16,36(sp)
    55f0:	dec01304 	addi	sp,sp,76
    55f4:	f800283a 	ret

000055f8 <__tz_lock>:
    55f8:	f800283a 	ret

000055fc <__tz_unlock>:
    55fc:	f800283a 	ret

00005600 <__gettzinfo>:
    5600:	00800034 	movhi	r2,0
    5604:	1097c204 	addi	r2,r2,24328
    5608:	f800283a 	ret

0000560c <gmtime_r>:
    560c:	defff904 	addi	sp,sp,-28
    5610:	dc400115 	stw	r17,4(sp)
    5614:	24400017 	ldw	r17,0(r4)
    5618:	dc800215 	stw	r18,8(sp)
    561c:	2825883a 	mov	r18,r5
    5620:	01400074 	movhi	r5,1
    5624:	8809883a 	mov	r4,r17
    5628:	29546004 	addi	r5,r5,20864
    562c:	dfc00615 	stw	ra,24(sp)
    5630:	dc000015 	stw	r16,0(sp)
    5634:	dd400515 	stw	r21,20(sp)
    5638:	dd000415 	stw	r20,16(sp)
    563c:	dcc00315 	stw	r19,12(sp)
    5640:	0004aec0 	call	4aec <__divsi3>
    5644:	01400074 	movhi	r5,1
    5648:	8809883a 	mov	r4,r17
    564c:	29546004 	addi	r5,r5,20864
    5650:	1021883a 	mov	r16,r2
    5654:	0004b700 	call	4b70 <__modsi3>
    5658:	1023883a 	mov	r17,r2
    565c:	10000216 	blt	r2,zero,5668 <gmtime_r+0x5c>
    5660:	84353dc4 	addi	r16,r16,-11017
    5664:	00000406 	br	5678 <gmtime_r+0x6c>
    5668:	00800074 	movhi	r2,1
    566c:	10946004 	addi	r2,r2,20864
    5670:	88a3883a 	add	r17,r17,r2
    5674:	84353d84 	addi	r16,r16,-11018
    5678:	8809883a 	mov	r4,r17
    567c:	01438404 	movi	r5,3600
    5680:	0004aec0 	call	4aec <__divsi3>
    5684:	8809883a 	mov	r4,r17
    5688:	01438404 	movi	r5,3600
    568c:	90800215 	stw	r2,8(r18)
    5690:	0004b700 	call	4b70 <__modsi3>
    5694:	01400f04 	movi	r5,60
    5698:	1009883a 	mov	r4,r2
    569c:	1023883a 	mov	r17,r2
    56a0:	0004aec0 	call	4aec <__divsi3>
    56a4:	01400f04 	movi	r5,60
    56a8:	8809883a 	mov	r4,r17
    56ac:	90800115 	stw	r2,4(r18)
    56b0:	0004b700 	call	4b70 <__modsi3>
    56b4:	90800015 	stw	r2,0(r18)
    56b8:	014001c4 	movi	r5,7
    56bc:	810000c4 	addi	r4,r16,3
    56c0:	0004b700 	call	4b70 <__modsi3>
    56c4:	1000010e 	bge	r2,zero,56cc <gmtime_r+0xc0>
    56c8:	108001c4 	addi	r2,r2,7
    56cc:	90800615 	stw	r2,24(r18)
    56d0:	8000050e 	bge	r16,zero,56e8 <gmtime_r+0xdc>
    56d4:	008000b4 	movhi	r2,2
    56d8:	108eac44 	addi	r2,r2,15025
    56dc:	80a1883a 	add	r16,r16,r2
    56e0:	057fffc4 	movi	r21,-1
    56e4:	00000106 	br	56ec <gmtime_r+0xe0>
    56e8:	002b883a 	mov	r21,zero
    56ec:	0163ab14 	movui	r5,36524
    56f0:	8009883a 	mov	r4,r16
    56f4:	0004aec0 	call	4aec <__divsi3>
    56f8:	1023883a 	mov	r17,r2
    56fc:	00800104 	movi	r2,4
    5700:	8880011e 	bne	r17,r2,5708 <gmtime_r+0xfc>
    5704:	044000c4 	movi	r17,3
    5708:	017ffff4 	movhi	r5,65535
    570c:	295c5504 	addi	r5,r5,29012
    5710:	8809883a 	mov	r4,r17
    5714:	0004ca00 	call	4ca0 <__mulsi3>
    5718:	1421883a 	add	r16,r2,r16
    571c:	8009883a 	mov	r4,r16
    5720:	01416d44 	movi	r5,1461
    5724:	0004aec0 	call	4aec <__divsi3>
    5728:	017e92c4 	movi	r5,-1461
    572c:	1009883a 	mov	r4,r2
    5730:	1029883a 	mov	r20,r2
    5734:	0004ca00 	call	4ca0 <__mulsi3>
    5738:	1421883a 	add	r16,r2,r16
    573c:	01405b44 	movi	r5,365
    5740:	8009883a 	mov	r4,r16
    5744:	0004aec0 	call	4aec <__divsi3>
    5748:	1027883a 	mov	r19,r2
    574c:	00800104 	movi	r2,4
    5750:	9880011e 	bne	r19,r2,5758 <gmtime_r+0x14c>
    5754:	04c000c4 	movi	r19,3
    5758:	017fa4c4 	movi	r5,-365
    575c:	9809883a 	mov	r4,r19
    5760:	0004ca00 	call	4ca0 <__mulsi3>
    5764:	a809883a 	mov	r4,r21
    5768:	01406404 	movi	r5,400
    576c:	1421883a 	add	r16,r2,r16
    5770:	0004ca00 	call	4ca0 <__mulsi3>
    5774:	01401904 	movi	r5,100
    5778:	8809883a 	mov	r4,r17
    577c:	1541f404 	addi	r21,r2,2000
    5780:	0004ca00 	call	4ca0 <__mulsi3>
    5784:	a507883a 	add	r3,r20,r20
    5788:	a885883a 	add	r2,r21,r2
    578c:	18c7883a 	add	r3,r3,r3
    5790:	10c5883a 	add	r2,r2,r3
    5794:	14c5883a 	add	r2,r2,r19
    5798:	9800031e 	bne	r19,zero,57a8 <gmtime_r+0x19c>
    579c:	a000041e 	bne	r20,zero,57b0 <gmtime_r+0x1a4>
    57a0:	8823003a 	cmpeq	r17,r17,zero
    57a4:	00000306 	br	57b4 <gmtime_r+0x1a8>
    57a8:	0023883a 	mov	r17,zero
    57ac:	00000106 	br	57b4 <gmtime_r+0x1a8>
    57b0:	04400044 	movi	r17,1
    57b4:	80c00ec4 	addi	r3,r16,59
    57b8:	1c47883a 	add	r3,r3,r17
    57bc:	89005b04 	addi	r4,r17,364
    57c0:	20c0030e 	bge	r4,r3,57d0 <gmtime_r+0x1c4>
    57c4:	8c405b44 	addi	r17,r17,365
    57c8:	1c47c83a 	sub	r3,r3,r17
    57cc:	10800044 	addi	r2,r2,1
    57d0:	10be2504 	addi	r2,r2,-1900
    57d4:	01000034 	movhi	r4,0
    57d8:	90800515 	stw	r2,20(r18)
    57dc:	90c00715 	stw	r3,28(r18)
    57e0:	00800084 	movi	r2,2
    57e4:	2117b204 	addi	r4,r4,24264
    57e8:	014002c4 	movi	r5,11
    57ec:	1087883a 	add	r3,r2,r2
    57f0:	18c7883a 	add	r3,r3,r3
    57f4:	1907883a 	add	r3,r3,r4
    57f8:	18c00017 	ldw	r3,0(r3)
    57fc:	80c00516 	blt	r16,r3,5814 <gmtime_r+0x208>
    5800:	10800044 	addi	r2,r2,1
    5804:	80e1c83a 	sub	r16,r16,r3
    5808:	28bff80e 	bge	r5,r2,57ec <_gp+0xffff776c>
    580c:	0005883a 	mov	r2,zero
    5810:	003ff606 	br	57ec <_gp+0xffff776c>
    5814:	90800415 	stw	r2,16(r18)
    5818:	84000044 	addi	r16,r16,1
    581c:	9005883a 	mov	r2,r18
    5820:	94000315 	stw	r16,12(r18)
    5824:	90000815 	stw	zero,32(r18)
    5828:	dfc00617 	ldw	ra,24(sp)
    582c:	dd400517 	ldw	r21,20(sp)
    5830:	dd000417 	ldw	r20,16(sp)
    5834:	dcc00317 	ldw	r19,12(sp)
    5838:	dc800217 	ldw	r18,8(sp)
    583c:	dc400117 	ldw	r17,4(sp)
    5840:	dc000017 	ldw	r16,0(sp)
    5844:	dec00704 	addi	sp,sp,28
    5848:	f800283a 	ret

0000584c <putc>:
    584c:	defffd04 	addi	sp,sp,-12
    5850:	00800034 	movhi	r2,0
    5854:	dc000115 	stw	r16,4(sp)
    5858:	dfc00215 	stw	ra,8(sp)
    585c:	10963e04 	addi	r2,r2,22776
    5860:	28800115 	stw	r2,4(r5)
    5864:	00800034 	movhi	r2,0
    5868:	10983804 	addi	r2,r2,24800
    586c:	d9000005 	stb	r4,0(sp)
    5870:	2021883a 	mov	r16,r4
    5874:	11000017 	ldw	r4,0(r2)
    5878:	01c00044 	movi	r7,1
    587c:	d80d883a 	mov	r6,sp
    5880:	00058f80 	call	58f8 <__sfvwrite_small_dev>
    5884:	00ffffc4 	movi	r3,-1
    5888:	10c00126 	beq	r2,r3,5890 <putc+0x44>
    588c:	8005883a 	mov	r2,r16
    5890:	dfc00217 	ldw	ra,8(sp)
    5894:	dc000117 	ldw	r16,4(sp)
    5898:	dec00304 	addi	sp,sp,12
    589c:	f800283a 	ret

000058a0 <_putc_r>:
    58a0:	defffd04 	addi	sp,sp,-12
    58a4:	00800034 	movhi	r2,0
    58a8:	dc000115 	stw	r16,4(sp)
    58ac:	dfc00215 	stw	ra,8(sp)
    58b0:	10963e04 	addi	r2,r2,22776
    58b4:	30800115 	stw	r2,4(r6)
    58b8:	00800034 	movhi	r2,0
    58bc:	10983804 	addi	r2,r2,24800
    58c0:	11000017 	ldw	r4,0(r2)
    58c4:	2821883a 	mov	r16,r5
    58c8:	01c00044 	movi	r7,1
    58cc:	300b883a 	mov	r5,r6
    58d0:	d80d883a 	mov	r6,sp
    58d4:	dc000005 	stb	r16,0(sp)
    58d8:	00058f80 	call	58f8 <__sfvwrite_small_dev>
    58dc:	00ffffc4 	movi	r3,-1
    58e0:	10c00126 	beq	r2,r3,58e8 <_putc_r+0x48>
    58e4:	8005883a 	mov	r2,r16
    58e8:	dfc00217 	ldw	ra,8(sp)
    58ec:	dc000117 	ldw	r16,4(sp)
    58f0:	dec00304 	addi	sp,sp,12
    58f4:	f800283a 	ret

000058f8 <__sfvwrite_small_dev>:
    58f8:	2880000b 	ldhu	r2,0(r5)
    58fc:	1080020c 	andi	r2,r2,8
    5900:	10002126 	beq	r2,zero,5988 <__sfvwrite_small_dev+0x90>
    5904:	2880008f 	ldh	r2,2(r5)
    5908:	defffa04 	addi	sp,sp,-24
    590c:	dc000015 	stw	r16,0(sp)
    5910:	dfc00515 	stw	ra,20(sp)
    5914:	dd000415 	stw	r20,16(sp)
    5918:	dcc00315 	stw	r19,12(sp)
    591c:	dc800215 	stw	r18,8(sp)
    5920:	dc400115 	stw	r17,4(sp)
    5924:	2821883a 	mov	r16,r5
    5928:	10001216 	blt	r2,zero,5974 <__sfvwrite_small_dev+0x7c>
    592c:	2027883a 	mov	r19,r4
    5930:	3025883a 	mov	r18,r6
    5934:	3823883a 	mov	r17,r7
    5938:	05010004 	movi	r20,1024
    593c:	04400b0e 	bge	zero,r17,596c <__sfvwrite_small_dev+0x74>
    5940:	880f883a 	mov	r7,r17
    5944:	a440010e 	bge	r20,r17,594c <__sfvwrite_small_dev+0x54>
    5948:	01c10004 	movi	r7,1024
    594c:	8140008f 	ldh	r5,2(r16)
    5950:	900d883a 	mov	r6,r18
    5954:	9809883a 	mov	r4,r19
    5958:	00059b00 	call	59b0 <_write_r>
    595c:	0080050e 	bge	zero,r2,5974 <__sfvwrite_small_dev+0x7c>
    5960:	88a3c83a 	sub	r17,r17,r2
    5964:	90a5883a 	add	r18,r18,r2
    5968:	003ff406 	br	593c <_gp+0xffff78bc>
    596c:	0005883a 	mov	r2,zero
    5970:	00000706 	br	5990 <__sfvwrite_small_dev+0x98>
    5974:	8080000b 	ldhu	r2,0(r16)
    5978:	10801014 	ori	r2,r2,64
    597c:	8080000d 	sth	r2,0(r16)
    5980:	00bfffc4 	movi	r2,-1
    5984:	00000206 	br	5990 <__sfvwrite_small_dev+0x98>
    5988:	00bfffc4 	movi	r2,-1
    598c:	f800283a 	ret
    5990:	dfc00517 	ldw	ra,20(sp)
    5994:	dd000417 	ldw	r20,16(sp)
    5998:	dcc00317 	ldw	r19,12(sp)
    599c:	dc800217 	ldw	r18,8(sp)
    59a0:	dc400117 	ldw	r17,4(sp)
    59a4:	dc000017 	ldw	r16,0(sp)
    59a8:	dec00604 	addi	sp,sp,24
    59ac:	f800283a 	ret

000059b0 <_write_r>:
    59b0:	defffd04 	addi	sp,sp,-12
    59b4:	dc000015 	stw	r16,0(sp)
    59b8:	04000034 	movhi	r16,0
    59bc:	dc400115 	stw	r17,4(sp)
    59c0:	8418d404 	addi	r16,r16,25424
    59c4:	2023883a 	mov	r17,r4
    59c8:	2809883a 	mov	r4,r5
    59cc:	300b883a 	mov	r5,r6
    59d0:	380d883a 	mov	r6,r7
    59d4:	dfc00215 	stw	ra,8(sp)
    59d8:	80000015 	stw	zero,0(r16)
    59dc:	0005d080 	call	5d08 <write>
    59e0:	00ffffc4 	movi	r3,-1
    59e4:	10c0031e 	bne	r2,r3,59f4 <_write_r+0x44>
    59e8:	80c00017 	ldw	r3,0(r16)
    59ec:	18000126 	beq	r3,zero,59f4 <_write_r+0x44>
    59f0:	88c00015 	stw	r3,0(r17)
    59f4:	dfc00217 	ldw	ra,8(sp)
    59f8:	dc400117 	ldw	r17,4(sp)
    59fc:	dc000017 	ldw	r16,0(sp)
    5a00:	dec00304 	addi	sp,sp,12
    5a04:	f800283a 	ret

00005a08 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    5a08:	3005883a 	mov	r2,r6
    5a0c:	f800283a 	ret

00005a10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5a10:	defffb04 	addi	sp,sp,-20
    5a14:	dcc00315 	stw	r19,12(sp)
    5a18:	dc800215 	stw	r18,8(sp)
    5a1c:	dc400115 	stw	r17,4(sp)
    5a20:	dc000015 	stw	r16,0(sp)
    5a24:	dfc00415 	stw	ra,16(sp)
    5a28:	2027883a 	mov	r19,r4
    5a2c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    5a30:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    5a34:	0005e740 	call	5e74 <strlen>
    5a38:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5a3c:	84400726 	beq	r16,r17,5a5c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5a40:	81000217 	ldw	r4,8(r16)
    5a44:	900d883a 	mov	r6,r18
    5a48:	980b883a 	mov	r5,r19
    5a4c:	0005e440 	call	5e44 <memcmp>
    5a50:	10000426 	beq	r2,zero,5a64 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    5a54:	84000017 	ldw	r16,0(r16)
    5a58:	003ff806 	br	5a3c <_gp+0xffff79bc>
  }
  
  /* No match found */
  
  return NULL;
    5a5c:	0005883a 	mov	r2,zero
    5a60:	00000106 	br	5a68 <alt_find_dev+0x58>
    5a64:	8005883a 	mov	r2,r16
}
    5a68:	dfc00417 	ldw	ra,16(sp)
    5a6c:	dcc00317 	ldw	r19,12(sp)
    5a70:	dc800217 	ldw	r18,8(sp)
    5a74:	dc400117 	ldw	r17,4(sp)
    5a78:	dc000017 	ldw	r16,0(sp)
    5a7c:	dec00504 	addi	sp,sp,20
    5a80:	f800283a 	ret

00005a84 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5a84:	0005b101 	jmpi	5b10 <alt_iic_isr_register>

00005a88 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a88:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a8c:	00bfff84 	movi	r2,-2
    5a90:	2084703a 	and	r2,r4,r2
    5a94:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    5a98:	00c00044 	movi	r3,1
    5a9c:	d0a0b517 	ldw	r2,-32044(gp)
    5aa0:	194a983a 	sll	r5,r3,r5
    5aa4:	288ab03a 	or	r5,r5,r2
    5aa8:	d160b515 	stw	r5,-32044(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5aac:	d0a0b517 	ldw	r2,-32044(gp)
    5ab0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ab4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    5ab8:	0005883a 	mov	r2,zero
    5abc:	f800283a 	ret

00005ac0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ac0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ac4:	00bfff84 	movi	r2,-2
    5ac8:	2084703a 	and	r2,r4,r2
    5acc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    5ad0:	00ffff84 	movi	r3,-2
    5ad4:	d0a0b517 	ldw	r2,-32044(gp)
    5ad8:	194a183a 	rol	r5,r3,r5
    5adc:	288a703a 	and	r5,r5,r2
    5ae0:	d160b515 	stw	r5,-32044(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5ae4:	d0a0b517 	ldw	r2,-32044(gp)
    5ae8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5aec:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    5af0:	0005883a 	mov	r2,zero
    5af4:	f800283a 	ret

00005af8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5af8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5afc:	00800044 	movi	r2,1
    5b00:	1144983a 	sll	r2,r2,r5
    5b04:	10c4703a 	and	r2,r2,r3
}
    5b08:	1004c03a 	cmpne	r2,r2,zero
    5b0c:	f800283a 	ret

00005b10 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5b10:	00c007c4 	movi	r3,31
    5b14:	19401616 	blt	r3,r5,5b70 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5b18:	defffe04 	addi	sp,sp,-8
    5b1c:	dfc00115 	stw	ra,4(sp)
    5b20:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b24:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b28:	00ffff84 	movi	r3,-2
    5b2c:	80c6703a 	and	r3,r16,r3
    5b30:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    5b34:	280490fa 	slli	r2,r5,3
    5b38:	00c00034 	movhi	r3,0
    5b3c:	18d8f004 	addi	r3,r3,25536
    5b40:	1885883a 	add	r2,r3,r2
    5b44:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    5b48:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5b4c:	30000226 	beq	r6,zero,5b58 <alt_iic_isr_register+0x48>
    5b50:	0005a880 	call	5a88 <alt_ic_irq_enable>
    5b54:	00000106 	br	5b5c <alt_iic_isr_register+0x4c>
    5b58:	0005ac00 	call	5ac0 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b5c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    5b60:	dfc00117 	ldw	ra,4(sp)
    5b64:	dc000017 	ldw	r16,0(sp)
    5b68:	dec00204 	addi	sp,sp,8
    5b6c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    5b70:	00bffa84 	movi	r2,-22
    5b74:	f800283a 	ret

00005b78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5b78:	deffff04 	addi	sp,sp,-4
    5b7c:	01000034 	movhi	r4,0
    5b80:	01400034 	movhi	r5,0
    5b84:	dfc00015 	stw	ra,0(sp)
    5b88:	2117c204 	addi	r4,r4,24328
    5b8c:	29584304 	addi	r5,r5,24844

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5b90:	2140061e 	bne	r4,r5,5bac <alt_load+0x34>
    5b94:	01000034 	movhi	r4,0
    5b98:	01400034 	movhi	r5,0
    5b9c:	21100804 	addi	r4,r4,16416
    5ba0:	29500804 	addi	r5,r5,16416
    5ba4:	2140121e 	bne	r4,r5,5bf0 <alt_load+0x78>
    5ba8:	00000b06 	br	5bd8 <alt_load+0x60>
    5bac:	00c00034 	movhi	r3,0
    5bb0:	18d84304 	addi	r3,r3,24844
    5bb4:	1907c83a 	sub	r3,r3,r4
    5bb8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5bbc:	10fff526 	beq	r2,r3,5b94 <_gp+0xffff7b14>
    {
      *to++ = *from++;
    5bc0:	114f883a 	add	r7,r2,r5
    5bc4:	39c00017 	ldw	r7,0(r7)
    5bc8:	110d883a 	add	r6,r2,r4
    5bcc:	10800104 	addi	r2,r2,4
    5bd0:	31c00015 	stw	r7,0(r6)
    5bd4:	003ff906 	br	5bbc <_gp+0xffff7b3c>
    5bd8:	01000034 	movhi	r4,0
    5bdc:	01400034 	movhi	r5,0
    5be0:	2117a404 	addi	r4,r4,24208
    5be4:	2957a404 	addi	r5,r5,24208

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5be8:	2140101e 	bne	r4,r5,5c2c <alt_load+0xb4>
    5bec:	00000b06 	br	5c1c <alt_load+0xa4>
    5bf0:	00c00034 	movhi	r3,0
    5bf4:	18d06004 	addi	r3,r3,16768
    5bf8:	1907c83a 	sub	r3,r3,r4
    5bfc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5c00:	10fff526 	beq	r2,r3,5bd8 <_gp+0xffff7b58>
    {
      *to++ = *from++;
    5c04:	114f883a 	add	r7,r2,r5
    5c08:	39c00017 	ldw	r7,0(r7)
    5c0c:	110d883a 	add	r6,r2,r4
    5c10:	10800104 	addi	r2,r2,4
    5c14:	31c00015 	stw	r7,0(r6)
    5c18:	003ff906 	br	5c00 <_gp+0xffff7b80>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5c1c:	0005dc00 	call	5dc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5c20:	dfc00017 	ldw	ra,0(sp)
    5c24:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5c28:	0005dc41 	jmpi	5dc4 <alt_icache_flush_all>
    5c2c:	00c00034 	movhi	r3,0
    5c30:	18d7c204 	addi	r3,r3,24328
    5c34:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5c38:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5c3c:	18bff726 	beq	r3,r2,5c1c <_gp+0xffff7b9c>
    {
      *to++ = *from++;
    5c40:	114f883a 	add	r7,r2,r5
    5c44:	39c00017 	ldw	r7,0(r7)
    5c48:	110d883a 	add	r6,r2,r4
    5c4c:	10800104 	addi	r2,r2,4
    5c50:	31c00015 	stw	r7,0(r6)
    5c54:	003ff906 	br	5c3c <_gp+0xffff7bbc>

00005c58 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5c58:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5c5c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5c60:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5c64:	0005d680 	call	5d68 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5c68:	0005d880 	call	5d88 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5c6c:	d1a0b617 	ldw	r6,-32040(gp)
    5c70:	d160b717 	ldw	r5,-32036(gp)
    5c74:	d120b817 	ldw	r4,-32032(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5c78:	dfc00017 	ldw	ra,0(sp)
    5c7c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5c80:	0004a381 	jmpi	4a38 <main>

00005c84 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    5c84:	defffe04 	addi	sp,sp,-8
    5c88:	dc000015 	stw	r16,0(sp)
    5c8c:	dfc00115 	stw	ra,4(sp)
    5c90:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5c94:	0005e740 	call	5e74 <strlen>
    5c98:	01000034 	movhi	r4,0
    5c9c:	000f883a 	mov	r7,zero
    5ca0:	100d883a 	mov	r6,r2
    5ca4:	800b883a 	mov	r5,r16
    5ca8:	21184104 	addi	r4,r4,24836
#else
    return fputs(str, stdout);
#endif
#endif
}
    5cac:	dfc00117 	ldw	ra,4(sp)
    5cb0:	dc000017 	ldw	r16,0(sp)
    5cb4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5cb8:	0005d8c1 	jmpi	5d8c <altera_avalon_jtag_uart_write>

00005cbc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5cbc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5cc0:	00bfff84 	movi	r2,-2
    5cc4:	2884703a 	and	r2,r5,r2
    5cc8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5ccc:	d0a01f17 	ldw	r2,-32644(gp)
    5cd0:	00ffff04 	movi	r3,-4
    5cd4:	108000c4 	addi	r2,r2,3
    5cd8:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5cdc:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5ce0:	d0a01f15 	stw	r2,-32644(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5ce4:	1109883a 	add	r4,r2,r4
    5ce8:	18dc0004 	addi	r3,r3,28672
    5cec:	1900032e 	bgeu	r3,r4,5cfc <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5cf0:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5cf4:	00bfffc4 	movi	r2,-1
    5cf8:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    5cfc:	d1201f15 	stw	r4,-32644(gp)
    5d00:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    5d04:	f800283a 	ret

00005d08 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5d08:	00800044 	movi	r2,1
    5d0c:	20800226 	beq	r4,r2,5d18 <write+0x10>
    5d10:	00800084 	movi	r2,2
    5d14:	2080041e 	bne	r4,r2,5d28 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5d18:	01000034 	movhi	r4,0
    5d1c:	000f883a 	mov	r7,zero
    5d20:	21184104 	addi	r4,r4,24836
    5d24:	0005d8c1 	jmpi	5d8c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5d28:	d0a02217 	ldw	r2,-32632(gp)
    5d2c:	10000926 	beq	r2,zero,5d54 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5d30:	deffff04 	addi	sp,sp,-4
    5d34:	dfc00015 	stw	ra,0(sp)
    5d38:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5d3c:	00c01444 	movi	r3,81
    5d40:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5d44:	00bfffc4 	movi	r2,-1
    5d48:	dfc00017 	ldw	ra,0(sp)
    5d4c:	dec00104 	addi	sp,sp,4
    5d50:	f800283a 	ret
    5d54:	d0a0b404 	addi	r2,gp,-32048
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5d58:	00c01444 	movi	r3,81
    5d5c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5d60:	00bfffc4 	movi	r2,-1
    5d64:	f800283a 	ret

00005d68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5d68:	deffff04 	addi	sp,sp,-4
    5d6c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
    5d70:	0005e3c0 	call	5e3c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5d74:	00800044 	movi	r2,1
    5d78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5d7c:	dfc00017 	ldw	ra,0(sp)
    5d80:	dec00104 	addi	sp,sp,4
    5d84:	f800283a 	ret

00005d88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5d88:	f800283a 	ret

00005d8c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    5d8c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5d90:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    5d94:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5d98:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5d9c:	2980072e 	bgeu	r5,r6,5dbc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5da0:	38c00037 	ldwio	r3,0(r7)
    5da4:	18ffffec 	andhi	r3,r3,65535
    5da8:	183ffc26 	beq	r3,zero,5d9c <_gp+0xffff7d1c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5dac:	28c00007 	ldb	r3,0(r5)
    5db0:	20c00035 	stwio	r3,0(r4)
    5db4:	29400044 	addi	r5,r5,1
    5db8:	003ff806 	br	5d9c <_gp+0xffff7d1c>

  return count;
}
    5dbc:	f800283a 	ret

00005dc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5dc0:	f800283a 	ret

00005dc4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5dc4:	f800283a 	ret

00005dc8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    5dc8:	213ffe84 	addi	r4,r4,-6
    5dcc:	008003c4 	movi	r2,15
    5dd0:	11001636 	bltu	r2,r4,5e2c <alt_exception_cause_generated_bad_addr+0x64>
    5dd4:	200890ba 	slli	r4,r4,2
    5dd8:	00800034 	movhi	r2,0
    5ddc:	10977b04 	addi	r2,r2,24044
    5de0:	2089883a 	add	r4,r4,r2
    5de4:	20800017 	ldw	r2,0(r4)
    5de8:	1000683a 	jmp	r2
    5dec:	00005e34 	movhi	zero,376
    5df0:	00005e34 	movhi	zero,376
    5df4:	00005e2c 	andhi	zero,zero,376
    5df8:	00005e2c 	andhi	zero,zero,376
    5dfc:	00005e2c 	andhi	zero,zero,376
    5e00:	00005e34 	movhi	zero,376
    5e04:	00005e2c 	andhi	zero,zero,376
    5e08:	00005e2c 	andhi	zero,zero,376
    5e0c:	00005e34 	movhi	zero,376
    5e10:	00005e34 	movhi	zero,376
    5e14:	00005e2c 	andhi	zero,zero,376
    5e18:	00005e34 	movhi	zero,376
    5e1c:	00005e2c 	andhi	zero,zero,376
    5e20:	00005e2c 	andhi	zero,zero,376
    5e24:	00005e2c 	andhi	zero,zero,376
    5e28:	00005e34 	movhi	zero,376
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5e2c:	0005883a 	mov	r2,zero
    5e30:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5e34:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    5e38:	f800283a 	ret

00005e3c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5e3c:	000170fa 	wrctl	ienable,zero
    5e40:	f800283a 	ret

00005e44 <memcmp>:
    5e44:	218d883a 	add	r6,r4,r6
    5e48:	21800826 	beq	r4,r6,5e6c <memcmp+0x28>
    5e4c:	20800003 	ldbu	r2,0(r4)
    5e50:	28c00003 	ldbu	r3,0(r5)
    5e54:	10c00226 	beq	r2,r3,5e60 <memcmp+0x1c>
    5e58:	10c5c83a 	sub	r2,r2,r3
    5e5c:	f800283a 	ret
    5e60:	21000044 	addi	r4,r4,1
    5e64:	29400044 	addi	r5,r5,1
    5e68:	003ff706 	br	5e48 <_gp+0xffff7dc8>
    5e6c:	0005883a 	mov	r2,zero
    5e70:	f800283a 	ret

00005e74 <strlen>:
    5e74:	2005883a 	mov	r2,r4
    5e78:	10c00007 	ldb	r3,0(r2)
    5e7c:	18000226 	beq	r3,zero,5e88 <strlen+0x14>
    5e80:	10800044 	addi	r2,r2,1
    5e84:	003ffc06 	br	5e78 <_gp+0xffff7df8>
    5e88:	1105c83a 	sub	r2,r2,r4
    5e8c:	f800283a 	ret
